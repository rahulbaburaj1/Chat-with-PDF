{"version":3,"file":"supabase.d.cts","names":["SupabaseClient","EmbeddingsInterface","Document","BaseRetriever","BaseRetrieverInput","CallbackManagerForRetrieverRun","Callbacks","SearchResult","SupabaseLibArgs","SupabaseHybridSearchParams","SupabaseHybridSearch","Promise"],"sources":["../../src/retrievers/supabase.d.ts"],"sourcesContent":["import type { SupabaseClient } from \"@supabase/supabase-js\";\nimport type { EmbeddingsInterface } from \"@langchain/core/embeddings\";\nimport { Document } from \"@langchain/core/documents\";\nimport { BaseRetriever, type BaseRetrieverInput } from \"@langchain/core/retrievers\";\nimport { CallbackManagerForRetrieverRun, Callbacks } from \"@langchain/core/callbacks/manager\";\ntype SearchResult = [Document, number, number];\nexport interface SupabaseLibArgs extends BaseRetrieverInput {\n    client: SupabaseClient;\n    /**\n     * The table name on Supabase. Defaults to \"documents\".\n     */\n    tableName?: string;\n    /**\n     * The name of the Similarity search function on Supabase. Defaults to \"match_documents\".\n     */\n    similarityQueryName?: string;\n    /**\n     * The name of the Keyword search function on Supabase. Defaults to \"kw_match_documents\".\n     */\n    keywordQueryName?: string;\n    /**\n     * The number of documents to return from the similarity search. Defaults to 2.\n     */\n    similarityK?: number;\n    /**\n     * The number of documents to return from the keyword search. Defaults to 2.\n     */\n    keywordK?: number;\n}\nexport interface SupabaseHybridSearchParams {\n    query: string;\n    similarityK: number;\n    keywordK: number;\n}\n/**\n * Class for performing hybrid search operations on a Supabase database.\n * It extends the `BaseRetriever` class and implements methods for\n * similarity search, keyword search, and hybrid search.\n */\nexport declare class SupabaseHybridSearch extends BaseRetriever {\n    static lc_name(): string;\n    lc_namespace: string[];\n    similarityK: number;\n    query: string;\n    keywordK: number;\n    similarityQueryName: string;\n    client: SupabaseClient;\n    tableName: string;\n    keywordQueryName: string;\n    embeddings: EmbeddingsInterface;\n    constructor(embeddings: EmbeddingsInterface, args: SupabaseLibArgs);\n    /**\n     * Performs a similarity search on the Supabase database using the\n     * provided query and returns the top 'k' similar documents.\n     * @param query The query to use for the similarity search.\n     * @param k The number of top similar documents to return.\n     * @param _callbacks Optional callbacks to pass to the embedQuery method.\n     * @returns A promise that resolves to an array of search results. Each result is a tuple containing a Document, its similarity score, and its ID.\n     */\n    protected similaritySearch(query: string, k: number, _callbacks?: Callbacks // implement passing to embedQuery later\n    ): Promise<SearchResult[]>;\n    /**\n     * Performs a keyword search on the Supabase database using the provided\n     * query and returns the top 'k' documents that match the keywords.\n     * @param query The query to use for the keyword search.\n     * @param k The number of top documents to return that match the keywords.\n     * @returns A promise that resolves to an array of search results. Each result is a tuple containing a Document, its similarity score multiplied by 10, and its ID.\n     */\n    protected keywordSearch(query: string, k: number): Promise<SearchResult[]>;\n    /**\n     * Combines the results of the `similaritySearch` and `keywordSearch`\n     * methods and returns the top 'k' documents based on a combination of\n     * similarity and keyword matching.\n     * @param query The query to use for the hybrid search.\n     * @param similarityK The number of top similar documents to return.\n     * @param keywordK The number of top documents to return that match the keywords.\n     * @param callbacks Optional callbacks to pass to the similaritySearch method.\n     * @returns A promise that resolves to an array of search results. Each result is a tuple containing a Document, its combined score, and its ID.\n     */\n    protected hybridSearch(query: string, similarityK: number, keywordK: number, callbacks?: Callbacks): Promise<SearchResult[]>;\n    _getRelevantDocuments(query: string, runManager?: CallbackManagerForRetrieverRun): Promise<Document[]>;\n}\nexport {};\n"],"mappings":";;;;;;;;;;KAKKO,YAAAA,IAAgBL;UACJM,eAAAA,SAAwBJ;UAC7BJ;;;;;;;AAHkF;EAE7EQ,mBAAe,CAAA,EAAA,MAAA;EAAA;;;EAA2B,gBAAA,CAAA,EAAA,MAAA;EAuB1CC;AAUjB;;EAAyC,WAO7BT,CAAAA,EAAAA,MAAAA;EAAc;;;EAI4C,QASAM,CAAAA,EAAAA,MAAAA;;AAC/DK,UA/BUF,0BAAAA,CA+BVE;EAAO,KAQiDJ,EAAAA,MAAAA;EAAY,WAApBI,EAAAA,MAAAA;EAAO,QAW+BL,EAAAA,MAAAA;;;;;;;AAxC9B,cAA1CI,oBAAAA,SAA6BP,aAAAA,CAAa;;;;;;;UAOnDH;;;cAGIC;0BACYA,2BAA2BO;;;;;;;;;oEASeF;KAC/DK,QAAQJ;;;;;;;;qDAQwCI,QAAQJ;;;;;;;;;;;2FAW8BD,YAAYK,QAAQJ;oDAC3DF,iCAAiCM,QAAQT"}