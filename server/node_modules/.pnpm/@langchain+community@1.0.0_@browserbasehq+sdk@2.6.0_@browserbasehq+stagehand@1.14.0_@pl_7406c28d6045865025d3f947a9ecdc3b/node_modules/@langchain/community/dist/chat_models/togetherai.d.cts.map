{"version":3,"file":"togetherai.d.cts","names":["BaseChatModelParams","LangSmithParams","OpenAIClient","ChatOpenAICallOptions","OpenAIChatInput","OpenAICoreRequestOptions","ChatOpenAICompletions","TogetherAIUnsupportedArgs","TogetherAIUnsupportedCallOptions","ChatTogetherAICallOptions","Record","Omit","ChatTogetherAIInput","ChatTogetherAI","Partial","___load_serializable2","Serialized","Chat","ChatCompletionCreateParamsStreaming","Completions","ChatCompletionChunk","AsyncIterable","Promise","ChatCompletionCreateParamsNonStreaming","ChatCompletion"],"sources":["../../src/chat_models/togetherai.d.ts"],"sourcesContent":["import type { BaseChatModelParams, LangSmithParams } from \"@langchain/core/language_models/chat_models\";\nimport { type OpenAIClient, type ChatOpenAICallOptions, type OpenAIChatInput, type OpenAICoreRequestOptions, ChatOpenAICompletions } from \"@langchain/openai\";\ntype TogetherAIUnsupportedArgs = \"frequencyPenalty\" | \"presencePenalty\" | \"logitBias\" | \"functions\";\ntype TogetherAIUnsupportedCallOptions = \"functions\" | \"function_call\";\nexport interface ChatTogetherAICallOptions extends Omit<ChatOpenAICallOptions, TogetherAIUnsupportedCallOptions> {\n    response_format: {\n        type: \"json_object\";\n        schema: Record<string, unknown>;\n    };\n}\nexport interface ChatTogetherAIInput extends Omit<OpenAIChatInput, \"openAIApiKey\" | TogetherAIUnsupportedArgs>, BaseChatModelParams {\n    /**\n     * The TogetherAI API key to use for requests.\n     * Alias for `apiKey`\n     * @default process.env.TOGETHER_AI_API_KEY\n     */\n    togetherAIApiKey?: string;\n    /**\n     * The TogetherAI API key to use for requests.\n     * @default process.env.TOGETHER_AI_API_KEY\n     */\n    apiKey?: string;\n}\n/**\n * TogetherAI chat model integration.\n *\n * The TogetherAI API is compatible to the OpenAI API with some limitations. View the\n * full API ref at:\n * @link {https://docs.together.ai/reference/chat-completions}\n *\n * Setup:\n * Install `@langchain/community` and set an environment variable named `TOGETHER_AI_API_KEY`.\n *\n * ```bash\n * npm install @langchain/community\n * export TOGETHER_AI_API_KEY=\"your-api-key\"\n * ```\n *\n * ## [Constructor args](https://api.js.langchain.com/classes/_langchain_community.chat_models_togetherai.ChatTogetherAI.html#constructor)\n *\n * ## [Runtime args](https://api.js.langchain.com/interfaces/_langchain_community.chat_models_togetherai.ChatTogetherAICallOptions.html)\n *\n * Runtime args can be passed as the second argument to any of the base runnable methods `.invoke`. `.stream`, `.batch`, etc.\n * They can also be passed via `.withConfig`, or the second arg in `.bindTools`, like shown in the examples below:\n *\n * ```typescript\n * // When calling `.withConfig`, call options should be passed via the first argument\n * const llmWithArgsBound = llm.withConfig({\n *   stop: [\"\\n\"],\n *   tools: [...],\n * });\n *\n * // When calling `.bindTools`, call options should be passed via the second argument\n * const llmWithTools = llm.bindTools(\n *   [...],\n *   {\n *     tool_choice: \"auto\",\n *   }\n * );\n * ```\n *\n * ## Examples\n *\n * <details open>\n * <summary><strong>Instantiate</strong></summary>\n *\n * ```typescript\n * import { ChatTogetherAI } from '@langchain/community/chat_models/togetherai';\n *\n * const llm = new ChatTogetherAI({\n *   model: \"meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo\",\n *   temperature: 0,\n *   // other params...\n * });\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Invoking</strong></summary>\n *\n * ```typescript\n * const input = `Translate \"I love programming\" into French.`;\n *\n * // Models also accept a list of chat messages or a formatted prompt\n * const result = await llm.invoke(input);\n * console.log(result);\n * ```\n *\n * ```txt\n * AIMessage {\n *   \"id\": \"8b23ea7bcc4c924b-MUC\",\n *   \"content\": \"\\\"J'adore programmer\\\"\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"tokenUsage\": {\n *       \"completionTokens\": 8,\n *       \"promptTokens\": 19,\n *       \"totalTokens\": 27\n *     },\n *     \"finish_reason\": \"eos\"\n *   },\n *   \"tool_calls\": [],\n *   \"invalid_tool_calls\": [],\n *   \"usage_metadata\": {\n *     \"input_tokens\": 19,\n *     \"output_tokens\": 8,\n *     \"total_tokens\": 27\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Streaming Chunks</strong></summary>\n *\n * ```typescript\n * for await (const chunk of await llm.stream(input)) {\n *   console.log(chunk);\n * }\n * ```\n *\n * ```txt\n * AIMessageChunk {\n *   \"id\": \"8b23eb602fb19263-MUC\",\n *   \"content\": \"\\\"\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0,\n *     \"finish_reason\": null\n *   },\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *   \"id\": \"8b23eb602fb19263-MUC\",\n *   \"content\": \"J\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0,\n *     \"finish_reason\": null\n *   },\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *   \"id\": \"8b23eb602fb19263-MUC\",\n *   \"content\": \"'\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0,\n *     \"finish_reason\": null\n *   },\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *   \"id\": \"8b23eb602fb19263-MUC\",\n *   \"content\": \"ad\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0,\n *     \"finish_reason\": null\n *   },\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *   \"id\": \"8b23eb602fb19263-MUC\",\n *   \"content\": \"ore\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0,\n *     \"finish_reason\": null\n *   },\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *   \"id\": \"8b23eb602fb19263-MUC\",\n *   \"content\": \" programmer\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0,\n *     \"finish_reason\": null\n *   },\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *   \"id\": \"8b23eb602fb19263-MUC\",\n *   \"content\": \"\\\"\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0,\n *     \"finish_reason\": null\n *   },\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *   \"id\": \"8b23eb602fb19263-MUC\",\n *   \"content\": \"\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0,\n *     \"finish_reason\": \"eos\"\n *   },\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *   \"content\": \"\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {},\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": [],\n *   \"usage_metadata\": {\n *     \"input_tokens\": 19,\n *     \"output_tokens\": 8,\n *     \"total_tokens\": 27\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Aggregate Streamed Chunks</strong></summary>\n *\n * ```typescript\n * import { AIMessageChunk } from '@langchain/core/messages';\n * import { concat } from '@langchain/core/utils/stream';\n *\n * const stream = await llm.stream(input);\n * let full: AIMessageChunk | undefined;\n * for await (const chunk of stream) {\n *   full = !full ? chunk : concat(full, chunk);\n * }\n * console.log(full);\n * ```\n *\n * ```txt\n * AIMessageChunk {\n *   \"id\": \"8b23ecd42e469236-MUC\",\n *   \"content\": \"\\\"J'adore programmer\\\"\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0,\n *     \"finish_reason\": \"eos\"\n *   },\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": [],\n *   \"usage_metadata\": {\n *     \"input_tokens\": 19,\n *     \"output_tokens\": 8,\n *     \"total_tokens\": 27\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Bind tools</strong></summary>\n *\n * ```typescript\n * import { z } from 'zod';\n *\n * const GetWeather = {\n *   name: \"GetWeather\",\n *   description: \"Get the current weather in a given location\",\n *   schema: z.object({\n *     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n *   }),\n * }\n *\n * const GetPopulation = {\n *   name: \"GetPopulation\",\n *   description: \"Get the current population in a given location\",\n *   schema: z.object({\n *     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n *   }),\n * }\n *\n * const llmWithTools = llm.bindTools([GetWeather, GetPopulation]);\n * const aiMsg = await llmWithTools.invoke(\n *   \"Which city is hotter today and which is bigger: LA or NY? Respond with JSON and use tools.\"\n * );\n * console.log(aiMsg.tool_calls);\n * ```\n *\n * ```txt\n * [\n *   {\n *     name: 'GetWeather',\n *     args: { location: 'Los Angeles' },\n *     type: 'tool_call',\n *     id: 'call_q8i4zx1udqjjnou2bzbrg8ms'\n *   }\n * ]\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Structured Output</strong></summary>\n *\n * ```typescript\n * import { z } from 'zod';\n *\n * const Joke = z.object({\n *   setup: z.string().describe(\"The setup of the joke\"),\n *   punchline: z.string().describe(\"The punchline to the joke\"),\n *   rating: z.number().optional().describe(\"How funny the joke is, from 1 to 10\")\n * }).describe('Joke to tell user.');\n *\n * const structuredLlm = llm.withStructuredOutput(Joke, { name: \"Joke\" });\n * const jokeResult = await structuredLlm.invoke(\"Tell me a joke about cats\");\n * console.log(jokeResult);\n * ```\n *\n * ```txt\n * {\n *   setup: 'Why did the cat join a band',\n *   punchline: 'Because it wanted to be the purr-cussionist'\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Usage Metadata</strong></summary>\n *\n * ```typescript\n * const aiMsgForMetadata = await llm.invoke(input);\n * console.log(aiMsgForMetadata.usage_metadata);\n * ```\n *\n * ```txt\n * { input_tokens: 19, output_tokens: 65, total_tokens: 84 }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Response Metadata</strong></summary>\n *\n * ```typescript\n * const aiMsgForResponseMetadata = await llm.invoke(input);\n * console.log(aiMsgForResponseMetadata.response_metadata);\n * ```\n *\n * ```txt\n * {\n *   tokenUsage: { completionTokens: 91, promptTokens: 19, totalTokens: 110 },\n *   finish_reason: 'eos'\n * }\n * ```\n * </details>\n *\n * <br />\n */\nexport declare class ChatTogetherAI extends ChatOpenAICompletions<ChatTogetherAICallOptions> {\n    static lc_name(): string;\n    _llmType(): string;\n    get lc_secrets(): {\n        [key: string]: string;\n    } | undefined;\n    lc_serializable: boolean;\n    constructor(fields?: Partial<Omit<OpenAIChatInput, \"openAIApiKey\" | TogetherAIUnsupportedArgs>> & BaseChatModelParams & {\n        /**\n         * Prefer `apiKey`\n         */\n        togetherAIApiKey?: string;\n        /**\n         * The TogetherAI API key to use.\n         */\n        apiKey?: string;\n    });\n    getLsParams(options: this[\"ParsedCallOptions\"]): LangSmithParams;\n    toJSON(): import(\"../load/serializable\").Serialized;\n    completionWithRetry(request: OpenAIClient.Chat.ChatCompletionCreateParamsStreaming, options?: OpenAICoreRequestOptions): Promise<AsyncIterable<OpenAIClient.Chat.Completions.ChatCompletionChunk>>;\n    completionWithRetry(request: OpenAIClient.Chat.ChatCompletionCreateParamsNonStreaming, options?: OpenAICoreRequestOptions): Promise<OpenAIClient.Chat.Completions.ChatCompletion>;\n}\nexport {};\n"],"mappings":";;;;;;;;KAEKO,yBAAAA;KACAC,gCAAAA;UACYC,yBAAAA,SAAkCE,KAAKR,uBAAuBK;;;YAG/DE;;;UAGCE,mBAAAA,SAA4BD,KAAKP,kCAAkCG,4BAA4BP;;AAT8C;AAChI;AAE9B;;EAA0C,gBAAcG,CAAAA,EAAAA,MAAAA;EAAqB;;;AAAtB;EAMtCS,MAAAA,CAAAA,EAAAA,MAAAA;;;;;;AAAkH;AA4XnI;;;;;;;;;;;;;;;;;;;;AAAiE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAA5CC,cAAAA,SAAuBP,sBAAsBG;;;;;;;uBAOzCK,QAAQH,KAAKP,kCAAkCG,8BAA8BP;;;;;;;;;;mDAUjDC;YAAec,sBAAAA,CACvBC;+BACZd,YAAAA,CAAae,IAAAA,CAAKC,+CAA+Cb,2BAA2BiB,QAAQD,cAAcnB,YAAAA,CAAae,IAAAA,CAAKE,WAAAA,CAAYC;+BAChJlB,YAAAA,CAAae,IAAAA,CAAKM,kDAAkDlB,2BAA2BiB,QAAQpB,YAAAA,CAAae,IAAAA,CAAKE,WAAAA,CAAYK"}