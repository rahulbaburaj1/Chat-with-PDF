{"version":3,"file":"airtable.d.cts","names":["BaseDocumentLoader","Document","AirtableRequestParams","AirtableLoaderOptions","AirtableLoader","tableId","baseId","kwargs","Promise","AsyncGenerator"],"sources":["../../../src/document_loaders/web/airtable.d.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { BaseDocumentLoader } from \"@langchain/core/document_loaders/base\";\nimport { Document } from \"@langchain/core/documents\";\nexport interface AirtableRequestParams {\n    view?: string;\n    maxRecords?: number;\n    filterByFormula?: string;\n    fields?: string[];\n}\nexport interface AirtableLoaderOptions {\n    tableId: string;\n    baseId: string;\n    kwargs?: AirtableRequestParams;\n}\nexport declare class AirtableLoader extends BaseDocumentLoader {\n    private readonly apiToken;\n    private readonly tableId;\n    private readonly baseId;\n    private readonly kwargs;\n    private static readonly BASE_URL = \"https://api.airtable.com/v0\";\n    private asyncCaller;\n    /**\n     * Initializes the AirtableLoader with configuration options.\n     * Retrieves the API token from environment variables and validates it.\n     *\n     * @param tableId - ID of the Airtable table.\n     * @param baseId - ID of the Airtable base.\n     * @param kwargs - Additional query parameters for Airtable requests.\n     * @param config - Loader configuration for retry options.\n     */\n    constructor({ tableId, baseId, kwargs }: AirtableLoaderOptions);\n    /**\n     * Loads documents from Airtable, handling pagination and retries.\n     *\n     * @returns A promise that resolves to an array of Document objects.\n     */\n    load(): Promise<Document[]>;\n    /**\n     * Asynchronous generator function for lazily loading documents from Airtable.\n     * This method yields each document individually, enabling memory-efficient\n     * handling of large datasets by fetching records in pages.\n     *\n     * @returns An asynchronous generator yielding Document objects one by one.\n     */\n    loadLazy(): AsyncGenerator<Document>;\n    /**\n     * Constructs the request body for an API call.\n     *\n     * @param offset - An optional string representing the offset for pagination.\n     * @returns A record containing the combined properties of `kwargs` and the provided offset.\n     */\n    private constructRequestBody;\n    private fetchRecords;\n    /**\n     * Converts an Airtable record into a Document object with metadata.\n     *\n     * @param record - An Airtable record to convert.\n     * @returns A Document object with page content and metadata.\n     */\n    private createDocument;\n}\n"],"mappings":";;;;;;;UAGiBE,qBAAAA;;;;;;UAMAC,qBAAAA;;EANAD,MAAAA,EAAAA,MAAAA;EAMAC,MAAAA,CAAAA,EAGJD,qBAHyB;AAKtC;AAAmC,cAAdE,cAAAA,SAAuBJ,kBAAAA,CAAT;EAAA,iBAgBjBK,QAAAA;EAAO,iBAAEC,OAAAA;EAAM,iBAAEC,MAAAA;EAAM,iBAAIJ,MAAAA;EAAqB,wBAM9CF,QAAAA,GAAAA,6BAAAA;EAAQ,QAAhBO,WAAAA;EAAO;;;AAtB2C;;;;;;;;;;KAgBjBL;;;;;;UAMjCK,QAAQP;;;;;;;;cAQJQ,eAAeR"}