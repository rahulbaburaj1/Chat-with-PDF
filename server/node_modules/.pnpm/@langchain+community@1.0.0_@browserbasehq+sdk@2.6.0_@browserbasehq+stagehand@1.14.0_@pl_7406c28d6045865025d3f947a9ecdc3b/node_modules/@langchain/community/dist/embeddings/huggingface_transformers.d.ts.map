{"version":3,"file":"huggingface_transformers.d.ts","names":["PretrainedOptions","FeatureExtractionPipelineOptions","Embeddings","EmbeddingsParams","HuggingFaceTransformersEmbeddingsParams","HuggingFaceTransformersEmbeddings","Partial","Promise"],"sources":["../../src/embeddings/huggingface_transformers.d.ts"],"sourcesContent":["import type { PretrainedOptions, FeatureExtractionPipelineOptions } from \"@huggingface/transformers\";\nimport { Embeddings, type EmbeddingsParams } from \"@langchain/core/embeddings\";\nexport interface HuggingFaceTransformersEmbeddingsParams extends EmbeddingsParams {\n    /** Model name to use */\n    model: string;\n    /**\n     * Timeout to use when making requests to OpenAI.\n     */\n    timeout?: number;\n    /**\n     * The maximum number of documents to embed in a single request.\n     */\n    batchSize?: number;\n    /**\n     * Whether to strip new lines from the input text. This is recommended by\n     * OpenAI, but may not be suitable for all use cases.\n     */\n    stripNewLines?: boolean;\n    /**\n     * Optional parameters for the pretrained model.\n     */\n    pretrainedOptions?: PretrainedOptions;\n    /**\n     * Optional parameters for the pipeline.\n     */\n    pipelineOptions?: FeatureExtractionPipelineOptions;\n}\n/**\n * @example\n * ```typescript\n * const model = new HuggingFaceTransformersEmbeddings({\n *   model: \"Xenova/all-MiniLM-L6-v2\",\n * });\n *\n * // Embed a single query\n * const res = await model.embedQuery(\n *   \"What would be a good company name for a company that makes colorful socks?\"\n * );\n * console.log({ res });\n *\n * // Embed multiple documents\n * const documentRes = await model.embedDocuments([\"Hello world\", \"Bye bye\"]);\n * console.log({ documentRes });\n * ```\n */\nexport declare class HuggingFaceTransformersEmbeddings extends Embeddings implements HuggingFaceTransformersEmbeddingsParams {\n    model: string;\n    batchSize: number;\n    stripNewLines: boolean;\n    timeout?: number;\n    pretrainedOptions?: PretrainedOptions;\n    pipelineOptions?: FeatureExtractionPipelineOptions;\n    private pipelinePromise;\n    constructor(fields?: Partial<HuggingFaceTransformersEmbeddingsParams>);\n    embedDocuments(texts: string[]): Promise<number[][]>;\n    embedQuery(text: string): Promise<number[]>;\n    private runEmbedding;\n}\n"],"mappings":";;;;;;;UAEiBI,uCAAAA,SAAgDD;;;;;;;;AAAjE;;EAAwD,SAmBhCH,CAAAA,EAAAA,MAAAA;EAAiB;;AAnBwC;AA2CjF;EAAsD,aAAA,CAAA,EAAA,OAAA;EAAA;;;EAQkB,iBAA/CM,CAAAA,EAhCDN,iBAgCCM;EAAO;;;EARyC,eAAYF,CAAAA,EApB/DH,gCAoB+DG;AAAuC;;;;;;;;;;;;;;;;;;;cAAvGC,iCAAAA,SAA0CH,UAAAA,YAAsBE;;;;;sBAK7DJ;oBACFC;;uBAEGK,QAAQF;mCACIG;4BACPA"}