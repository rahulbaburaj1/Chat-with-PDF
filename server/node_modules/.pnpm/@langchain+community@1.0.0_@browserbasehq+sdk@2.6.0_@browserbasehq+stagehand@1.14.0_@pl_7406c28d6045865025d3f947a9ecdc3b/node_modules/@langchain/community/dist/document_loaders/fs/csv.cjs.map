{"version":3,"file":"csv.cjs","names":["TextLoader","filePathOrBlob: string | Blob","options?: CSVLoaderOptions | string","raw: string"],"sources":["../../../src/document_loaders/fs/csv.ts"],"sourcesContent":["import { TextLoader } from \"@langchain/classic/document_loaders/fs/text\";\n\n/**\n * Loads a CSV file into a list of documents.\n * Each document represents one row of the CSV file.\n *\n * When `column` is not specified, each row is converted into a key/value pair\n * with each key/value pair outputted to a new line in the document's pageContent.\n *\n * @example\n * // CSV file:\n * // id,html\n * // 1,<i>Corruption discovered at the core of the Banking Clan!</i>\n * // 2,<i>Corruption discovered at the core of the Banking Clan!</i>\n *\n * const loader = new CSVLoader(\"path/to/file.csv\");\n * const docs = await loader.load();\n *\n * // docs[0].pageContent:\n * // id: 1\n * // html: <i>Corruption discovered at the core of the Banking Clan!</i>\n *\n * When `column` is specified, one document is created for each row, and the\n * value of the specified column is used as the document's pageContent.\n *\n * @example\n * // CSV file:\n * // id,html\n * // 1,<i>Corruption discovered at the core of the Banking Clan!</i>\n * // 2,<i>Corruption discovered at the core of the Banking Clan!</i>\n *\n * const loader = new CSVLoader(\"path/to/file.csv\", \"html\");\n * const docs = await loader.load();\n *\n * // docs[0].pageContent:\n * // <i>Corruption discovered at the core of the Banking Clan!</i>\n */\n\ntype CSVLoaderOptions = {\n  column?: string;\n  separator?: string;\n};\n\n/**\n * A class that extends the TextLoader class. It represents a document\n * loader that loads documents from a CSV file. It has a constructor that\n * takes a `filePathOrBlob` parameter representing the path to the CSV\n * file or a Blob object, and an optional `options` parameter of type\n * `CSVLoaderOptions` or a string representing the column to use as the\n * document's pageContent.\n */\nexport class CSVLoader extends TextLoader {\n  protected options: CSVLoaderOptions = {};\n\n  constructor(\n    filePathOrBlob: string | Blob,\n    options?: CSVLoaderOptions | string\n  ) {\n    super(filePathOrBlob);\n    if (typeof options === \"string\") {\n      this.options = { column: options };\n    } else {\n      this.options = options ?? this.options;\n    }\n  }\n\n  /**\n   * A protected method that parses the raw CSV data and returns an array of\n   * strings representing the pageContent of each document. It uses the\n   * `dsvFormat` function from the `d3-dsv` module to parse the CSV data. If\n   * the `column` option is specified, it checks if the column exists in the\n   * CSV file and returns the values of that column as the pageContent. If\n   * the `column` option is not specified, it converts each row of the CSV\n   * data into key/value pairs and joins them with newline characters.\n   * @param raw The raw CSV data to be parsed.\n   * @returns An array of strings representing the pageContent of each document.\n   */\n  protected async parse(raw: string): Promise<string[]> {\n    const { column, separator = \",\" } = this.options;\n\n    const { dsvFormat } = await CSVLoaderImports();\n    const psv = dsvFormat(separator);\n    const parsed = psv.parse(raw.trim());\n\n    if (column !== undefined) {\n      if (!parsed.columns.includes(column)) {\n        throw new Error(`Column ${column} not found in CSV file.`);\n      }\n      // Note TextLoader will raise an exception if the value is null.\n      return parsed.map((row) => row[column]!);\n    }\n\n    return parsed.map((row) =>\n      Object.keys(row)\n        .map((key) => `${key.trim()}: ${row[key]?.trim()}`)\n        .join(\"\\n\")\n    );\n  }\n}\n\nasync function CSVLoaderImports() {\n  try {\n    const { dsvFormat } = await import(\"d3-dsv\");\n    return { dsvFormat };\n  } catch (e) {\n    console.error(e);\n    throw new Error(\n      \"Please install d3-dsv as a dependency with, e.g. `pnpm install d3-dsv@2`\"\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;AAmDA,IAAa,YAAb,cAA+BA,wDAAW;CACxC,AAAU,UAA4B,CAAE;CAExC,YACEC,gBACAC,SACA;EACA,MAAM,eAAe;AACrB,MAAI,OAAO,YAAY,UACrB,KAAK,UAAU,EAAE,QAAQ,QAAS;OAElC,KAAK,UAAU,WAAW,KAAK;CAElC;;;;;;;;;;;;CAaD,MAAgB,MAAMC,KAAgC;EACpD,MAAM,EAAE,QAAQ,YAAY,KAAK,GAAG,KAAK;EAEzC,MAAM,EAAE,WAAW,GAAG,MAAM,kBAAkB;EAC9C,MAAM,MAAM,UAAU,UAAU;EAChC,MAAM,SAAS,IAAI,MAAM,IAAI,MAAM,CAAC;AAEpC,MAAI,WAAW,QAAW;AACxB,OAAI,CAAC,OAAO,QAAQ,SAAS,OAAO,CAClC,OAAM,IAAI,MAAM,CAAC,OAAO,EAAE,OAAO,uBAAuB,CAAC;AAG3D,UAAO,OAAO,IAAI,CAAC,QAAQ,IAAI,QAAS;EACzC;AAED,SAAO,OAAO,IAAI,CAAC,QACjB,OAAO,KAAK,IAAI,CACb,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,EAAE,EAAE,IAAI,MAAM,MAAM,EAAE,CAAC,CAClD,KAAK,KAAK,CACd;CACF;AACF;AAED,eAAe,mBAAmB;AAChC,KAAI;EACF,MAAM,EAAE,WAAW,GAAG,MAAM,OAAO;AACnC,SAAO,EAAE,UAAW;CACrB,SAAQ,GAAG;EACV,QAAQ,MAAM,EAAE;AAChB,QAAM,IAAI,MACR;CAEH;AACF"}