{"version":3,"file":"ai21.d.cts","names":["LLM","BaseLLMParams","AI21PenaltyData","AI21Input","Record","AI21","Promise"],"sources":["../../src/llms/ai21.d.ts"],"sourcesContent":["import { LLM, type BaseLLMParams } from \"@langchain/core/language_models/llms\";\n/**\n * Type definition for AI21 penalty data.\n */\nexport type AI21PenaltyData = {\n    scale: number;\n    applyToWhitespaces: boolean;\n    applyToPunctuations: boolean;\n    applyToNumbers: boolean;\n    applyToStopwords: boolean;\n    applyToEmojis: boolean;\n};\n/**\n * Interface for AI21 input parameters.\n */\nexport interface AI21Input extends BaseLLMParams {\n    ai21ApiKey?: string;\n    model?: string;\n    temperature?: number;\n    minTokens?: number;\n    maxTokens?: number;\n    topP?: number;\n    presencePenalty?: AI21PenaltyData;\n    countPenalty?: AI21PenaltyData;\n    frequencyPenalty?: AI21PenaltyData;\n    numResults?: number;\n    logitBias?: Record<string, number>;\n    stop?: string[];\n    baseUrl?: string;\n}\n/**\n * Class representing the AI21 language model. It extends the LLM (Large\n * Language Model) class, providing a standard interface for interacting\n * with the AI21 language model.\n */\nexport declare class AI21 extends LLM implements AI21Input {\n    lc_serializable: boolean;\n    model: string;\n    temperature: number;\n    maxTokens: number;\n    minTokens: number;\n    topP: number;\n    presencePenalty: AI21PenaltyData;\n    countPenalty: AI21PenaltyData;\n    frequencyPenalty: AI21PenaltyData;\n    numResults: number;\n    logitBias?: Record<string, number>;\n    ai21ApiKey?: string;\n    stop?: string[];\n    baseUrl?: string;\n    constructor(fields?: AI21Input);\n    /**\n     * Method to validate the environment. It checks if the AI21 API key is\n     * set. If not, it throws an error.\n     */\n    validateEnvironment(): void;\n    /**\n     * Static method to get the default penalty data for AI21.\n     * @returns AI21PenaltyData\n     */\n    static getDefaultAI21PenaltyData(): AI21PenaltyData;\n    /** Get the type of LLM. */\n    _llmType(): string;\n    /** Get the default parameters for calling AI21 API. */\n    get defaultParams(): {\n        temperature: number;\n        maxTokens: number;\n        minTokens: number;\n        topP: number;\n        presencePenalty: AI21PenaltyData;\n        countPenalty: AI21PenaltyData;\n        frequencyPenalty: AI21PenaltyData;\n        numResults: number;\n        logitBias: Record<string, number> | undefined;\n    };\n    /** Get the identifying parameters for this LLM. */\n    get identifyingParams(): {\n        temperature: number;\n        maxTokens: number;\n        minTokens: number;\n        topP: number;\n        presencePenalty: AI21PenaltyData;\n        countPenalty: AI21PenaltyData;\n        frequencyPenalty: AI21PenaltyData;\n        numResults: number;\n        logitBias: Record<string, number> | undefined;\n        model: string;\n    };\n    /** Call out to AI21's complete endpoint.\n     Args:\n         prompt: The prompt to pass into the model.\n     stop: Optional list of stop words to use when generating.\n  \n         Returns:\n     The string generated by the model.\n  \n     Example:\n     let response = ai21._call(\"Tell me a joke.\");\n     */\n    _call(prompt: string, options: this[\"ParsedCallOptions\"]): Promise<string>;\n}\n"],"mappings":";;;;;;;;;KAIYE,eAAAA;;;;;;EAAAA,aAAAA,EAAAA,OAAe;AAW3B,CAAA;;;;AASuBA,UATNC,SAAAA,SAAkBF,aASZC,CAAAA;EAAe,UAEtBE,CAAAA,EAAAA,MAAAA;EAAM,KAXaH,CAAAA,EAAAA,MAAAA;EAAa,WAAA,CAAA,EAAA,MAAA;EAoB3BI,SAAI,CAAA,EAAA,MAAA;EAAA,SAAA,CAAA,EAAA,MAAA;EAAA,IAOJH,CAAAA,EAAAA,MAAAA;EAAe,eAClBA,CAAAA,EArBIA,eAqBJA;EAAe,YACXA,CAAAA,EArBHA,eAqBGA;EAAe,gBAErBE,CAAAA,EAtBOF,eAsBPE;EAAM,UAIGD,CAAAA,EAAAA,MAAAA;EAAS,SAUMD,CAAAA,EAlCxBE,MAkCwBF,CAAAA,MAAAA,EAAAA,MAAAA,CAAAA;EAAe,IAS9BA,CAAAA,EAAAA,MAAAA,EAAAA;EAAe,OAClBA,CAAAA,EAAAA,MAAAA;;;;;;;AA6ByCI,cAhE1CD,IAAAA,SAAaL,GAAAA,YAAeG,SAgEcG,CAAAA;EAAO,eAhEpCN,EAAAA,OAAAA;EAAG,KAAYG,EAAAA,MAAAA;EAAS,WAAA,EAAA,MAAA;;;;mBAOrCD;gBACHA;oBACIA;;cAENE;;;;uBAISD;;;;;;;;;;sCAUeD;;;;;;;;;qBASfA;kBACHA;sBACIA;;eAEPE;;;;;;;;qBAQMF;kBACHA;sBACIA;;eAEPE;;;;;;;;;;;;6DAc4CE"}