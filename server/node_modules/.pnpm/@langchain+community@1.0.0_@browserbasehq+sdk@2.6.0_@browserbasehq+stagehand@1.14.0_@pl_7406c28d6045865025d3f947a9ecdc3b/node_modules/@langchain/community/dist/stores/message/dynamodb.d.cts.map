{"version":3,"file":"dynamodb.d.cts","names":["DynamoDBClientConfig","AttributeValue","BaseListChatMessageHistory","BaseMessage","DynamoDBChatMessageHistoryFields","Record","DynamoDBChatMessageHistory","tableName","sessionId","partitionKey","sortKey","messageAttributeName","config","key","Promise"],"sources":["../../../src/stores/message/dynamodb.d.ts"],"sourcesContent":["import { DynamoDBClientConfig, AttributeValue } from \"@aws-sdk/client-dynamodb\";\nimport { BaseListChatMessageHistory } from \"@langchain/core/chat_history\";\nimport { BaseMessage } from \"@langchain/core/messages\";\n/**\n * Interface defining the fields required to create an instance of\n * `DynamoDBChatMessageHistory`. It includes the DynamoDB table name,\n * session ID, partition key, sort key, message attribute name, and\n * DynamoDB client configuration.\n */\nexport interface DynamoDBChatMessageHistoryFields {\n    tableName: string;\n    sessionId: string;\n    partitionKey?: string;\n    sortKey?: string;\n    messageAttributeName?: string;\n    config?: DynamoDBClientConfig;\n    key?: Record<string, AttributeValue>;\n}\n/**\n * Class providing methods to interact with a DynamoDB table to store and\n * retrieve chat messages. It extends the `BaseListChatMessageHistory`\n * class.\n */\nexport declare class DynamoDBChatMessageHistory extends BaseListChatMessageHistory {\n    lc_namespace: string[];\n    get lc_secrets(): {\n        [key: string]: string;\n    } | undefined;\n    private tableName;\n    private sessionId;\n    private client;\n    private partitionKey;\n    private sortKey?;\n    private messageAttributeName;\n    private dynamoKey;\n    /**\n     * Transforms a `StoredMessage` into a `DynamoDBSerializedChatMessage`.\n     * The `DynamoDBSerializedChatMessage` format is suitable for storing in DynamoDB.\n     *\n     * @param message - The `StoredMessage` to be transformed.\n     * @returns The transformed `DynamoDBSerializedChatMessage`.\n     */\n    private createDynamoDBSerializedChatMessage;\n    constructor({ tableName, sessionId, partitionKey, sortKey, messageAttributeName, config, key }: DynamoDBChatMessageHistoryFields);\n    /**\n     * Retrieves all messages from the DynamoDB table and returns them as an\n     * array of `BaseMessage` instances.\n     * @returns Array of stored messages\n     */\n    getMessages(): Promise<BaseMessage[]>;\n    /**\n     * Adds a new message to the DynamoDB table.\n     * @param message The message to be added to the DynamoDB table.\n     */\n    addMessage(message: BaseMessage): Promise<void>;\n    /**\n     * Adds new messages to the DynamoDB table.\n     * @param messages The messages to be added to the DynamoDB table.\n     */\n    addMessages(messages: BaseMessage[]): Promise<void>;\n    /**\n     * Deletes all messages from the DynamoDB table.\n     */\n    clear(): Promise<void>;\n}\n"],"mappings":";;;;;;;;;;;;;;UASiBI,gCAAAA;;EAAAA,SAAAA,EAAAA,MAAAA;EAAgC,YAAA,CAAA,EAAA,MAAA;EAAA,OAMpCJ,CAAAA,EAAAA,MAAAA;EAAoB,oBACRC,CAAAA,EAAAA,MAAAA;EAAc,MAA7BI,CAAAA,EADGL,oBACHK;EAAM,GAAA,CAAA,EAANA,MAAM,CAAA,MAAA,EAASJ,cAAT,CAAA;AAOhB;;;;;;AAoB+DU,cApB1CL,0BAAAA,SAAmCJ,0BAAAA,CAoBOS;EAAoB,YAAEC,EAAAA,MAAAA,EAAAA;EAAM,IAAEC,UAAAA,CAAAA,CAAAA,EAAAA;IAAOT,CAAAA,GAAAA,EAAAA,MAAAA,CAAAA,EAAAA,MAAAA;EAAgC,CAAA,GAMzGD,SAAAA;EAAW,QAAnBW,SAAAA;EAAO,QAKFX,SAAAA;EAAW,QAAGW,MAAAA;EAAO,QAKnBX,YAAAA;EAAW,QAAKW,OAAAA;EAAO,QAIpCA,oBAAAA;EAAO,QAxCoCZ,SAAAA;EAA0B;;;;;;;;;;;;;;;;KAoBkBE;;;;;;iBAMjFU,QAAQX;;;;;sBAKHA,cAAcW;;;;;wBAKZX,gBAAgBW;;;;WAI7BA"}