{"version":3,"file":"zep_cloud.d.cts","names":["ZepClient","MaxMarginalRelevanceSearchOptions","VectorStore","EmbeddingsInterface","Document","Callbacks","IZepCloudConfig","Record","IZepCloudDeleteParams","ZepCloudVectorStore","Promise"],"sources":["../../src/vectorstores/zep_cloud.d.ts"],"sourcesContent":["import { ZepClient } from \"@getzep/zep-cloud\";\nimport { MaxMarginalRelevanceSearchOptions, VectorStore } from \"@langchain/core/vectorstores\";\nimport type { EmbeddingsInterface } from \"@langchain/core/embeddings\";\nimport { Document } from \"@langchain/core/documents\";\nimport { Callbacks } from \"@langchain/core/callbacks/manager\";\n/**\n * Interface for the configuration options for a ZepCloudVectorStore instance.\n */\nexport interface IZepCloudConfig {\n    apiKey?: string;\n    client?: ZepClient;\n    collectionName: string;\n    description?: string;\n    metadata?: Record<string, never>;\n}\n/**\n * Interface for the parameters required to delete documents from a\n * ZepCloudVectorStore instance.\n */\nexport interface IZepCloudDeleteParams {\n    uuids: string[];\n}\n/**\n * ZepCloudVectorStore is a VectorStore implementation\n * that uses the Zep long-term memory store as a backend.\n *\n * If the collection does not exist, it will be created automatically.\n *\n * Requires `@getzep/zep-cloud` to be installed:\n *\n *\n * @property {ZepClient} client - The ZepClient instance used to interact with Zep's API.\n * @property {Promise<void>} initPromise - A promise that resolves\n * when the collection is initialized.\n */\nexport declare class ZepCloudVectorStore extends VectorStore {\n    client: ZepClient;\n    collectionName: string;\n    private readonly initPromise;\n    constructor(embeddings: EmbeddingsInterface, args: IZepCloudConfig);\n    private initCollection;\n    private createCollection;\n    addVectors(): Promise<string[]>;\n    /**\n     * Adds documents to the collection. The documents are first embedded into vectors\n     * using the provided embedding model.\n     *\n     * @param {Document[]} documents - The documents to add.\n     * @returns {Promise<string[]>} - A promise that resolves with the UUIDs of the added documents.\n     */\n    addDocuments(documents: Document[]): Promise<string[]>;\n    _vectorstoreType(): string;\n    /**\n     * Deletes documents from the collection.\n     *\n     * @param {IZepDeleteParams} params - The list of Zep document UUIDs to delete.\n     * @returns {Promise<void>}\n     */\n    delete(params: IZepCloudDeleteParams): Promise<void>;\n    similaritySearchVectorWithScore(): Promise<[Document, number][]>;\n    _similaritySearchWithScore(query: string, k: number, filter?: Record<string, unknown> | undefined): Promise<[Document, number][]>;\n    similaritySearchWithScore(query: string, k?: number, filter?: Record<string, unknown> | undefined, _callbacks?: undefined // implement passing to embedQuery later\n    ): Promise<[Document, number][]>;\n    /**\n     * Performs a similarity search on the Zep collection.\n     *\n     * @param {string} query - The query string to search for.\n     * @param {number} [k=4] - The number of results to return. Defaults to 4.\n     * @param {this[\"FilterType\"] | undefined} [filter=undefined] - An optional set of JSONPath filters to apply to the search.\n     * @param {Callbacks | undefined} [_callbacks=undefined] - Optional callbacks. Currently not implemented.\n     * @returns {Promise<Document[]>} - A promise that resolves to an array of Documents that are similar to the query.\n     *\n     * @async\n     */\n    similaritySearch(query: string, k?: number, filter?: this[\"FilterType\"] | undefined, _callbacks?: Callbacks | undefined // implement passing to embedQuery later\n    ): Promise<Document[]>;\n    /**\n     * Return documents selected using the maximal marginal relevance.\n     * Maximal marginal relevance optimizes for similarity to the query AND diversity\n     * among selected documents.\n     *\n     * @param {string} query - Text to look up documents similar to.\n     * @param options\n     * @param {number} options.k - Number of documents to return.\n     * @param {number} options.fetchK=20- Number of documents to fetch before passing to the MMR algorithm.\n     * @param {number} options.lambda=0.5 - Number between 0 and 1 that determines the degree of diversity among the results,\n     *                 where 0 corresponds to maximum diversity and 1 to minimum diversity.\n     * @param {Record<string, any>} options.filter - Optional Zep JSONPath query to pre-filter on document metadata field\n     *\n     * @returns {Promise<Document[]>} - List of documents selected by maximal marginal relevance.\n     */\n    maxMarginalRelevanceSearch(query: string, options: MaxMarginalRelevanceSearchOptions<this[\"FilterType\"]>): Promise<Document[]>;\n    static init(zepConfig: IZepCloudConfig): Promise<ZepCloudVectorStore>;\n    /**\n     * Creates a new ZepVectorStore instance from an array of texts. Each text is converted into a Document and added to the collection.\n     *\n     * @param {string[]} texts - The texts to convert into Documents.\n     * @param {object[] | object} metadatas - The metadata to associate with each Document.\n     * If an array is provided, each element is associated with the corresponding Document.\n     * If an object is provided, it is associated with all Documents.\n     * @param {Embeddings} embeddings - Pass FakeEmbeddings, Zep Cloud will handle text embedding for you.\n     * @param {IZepConfig} zepConfig - The configuration object for the Zep API.\n     * @returns {Promise<ZepVectorStore>} - A promise that resolves with the new ZepVectorStore instance.\n     */\n    static fromTexts(texts: string[], metadatas: object[] | object, embeddings: EmbeddingsInterface, zepConfig: IZepCloudConfig): Promise<ZepCloudVectorStore>;\n    /**\n     * Creates a new ZepVectorStore instance from an array of Documents. Each Document is added to a Zep collection.\n     *\n     * @param {Document[]} docs - The Documents to add.\n     * @param {Embeddings} embeddings - Pass FakeEmbeddings, Zep Cloud will handle text embedding for you.\n     * @param {IZepConfig} zepConfig - The configuration object for the Zep API.\n     * @returns {Promise<ZepVectorStore>} - A promise that resolves with the new ZepVectorStore instance.\n     */\n    static fromDocuments(docs: Document[], embeddings: EmbeddingsInterface, zepConfig: IZepCloudConfig): Promise<ZepCloudVectorStore>;\n}\n"],"mappings":";;;;;;;;;;;;;UAQiBM,eAAAA;;WAEJN;;;aAGEO;AALf;;;;AAKqB;AAMJC,UAAAA,qBAAAA,CAAqB;EAgBjBC,KAAAA,EAAAA,MAAAA,EAAAA;;;;;;;;;;;;;;;AA0B6CF,cA1B7CE,mBAAAA,SAA4BP,WAAAA,CA0BiBK;EAAM,MACxDH,EA1BJJ,SA0BII;EAAQ,cAAjBM,EAAAA,MAAAA;EAAO,iBAYwFL,WAAAA;EAAS,WAChGD,CAAAA,UAAAA,EApCaD,mBAoCbC,EAAAA,IAAAA,EApCwCE,eAoCxCF;EAAQ,QAAhBM,cAAAA;EAAO,QAgByCT,gBAAAA;EAAiC,UAA+BG,CAAAA,CAAAA,EAjDrGM,OAiDqGN,CAAAA,MAAAA,EAAAA,CAAAA;EAAQ;;;;;;;EAa8B,YAA3BM,CAAAA,SAAAA,EAtDtGN,QAsDsGM,EAAAA,CAAAA,EAtDzFA,OAsDyFA,CAAAA,MAAAA,EAAAA,CAAAA;EAAO,gBAS1GN,CAAAA,CAAAA,EAAAA,MAAAA;EAAQ;;;;;AA9EqB;iBAuBzCI,wBAAwBE;qCACJA,SAASN;gEACkBG,sCAAsCG,SAASN;gEAC/CG;KAC3DG,SAASN;;;;;;;;;;;;oGAYsFC;KAC/FK,QAAQN;;;;;;;;;;;;;;;;qDAgBwCH,wDAAwDS,QAAQN;yBAC5FE,kBAAkBI,QAAQD;;;;;;;;;;;;8EAY2BN,gCAAgCG,kBAAkBI,QAAQD;;;;;;;;;6BAS3GL,wBAAwBD,gCAAgCG,kBAAkBI,QAAQD"}