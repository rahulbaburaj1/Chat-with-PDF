{"version":3,"file":"googlevertexai.d.ts","names":["GoogleAuthOptions","VectorStore","EmbeddingsInterface","Document","DocumentInput","AsyncCaller","AsyncCallerCallOptions","AsyncCallerParams","GoogleVertexAIConnection","Docstore","GoogleVertexAIConnectionParams","GoogleResponse","GoogleAbstractedClientOpsMethod","IdDocumentInput","IdDocument","IndexEndpointConnectionParams","DeployedIndex","IndexEndpointResponse","IndexEndpointConnection","Promise","MatchingEngineDeleteParams","RemoveDatapointParams","RemoveDatapointResponse","RemoveDatapointConnection","UpsertDatapointParams","Restriction","CrowdingTag","IndexDatapoint","UpsertDatapointResponse","UpsertDatapointConnection","PublicAPIEndpointInfo","MatchingEngineArgs","MatchingEngine","Record"],"sources":["../../src/vectorstores/googlevertexai.d.ts"],"sourcesContent":["import { GoogleAuthOptions } from \"google-auth-library\";\nimport { VectorStore } from \"@langchain/core/vectorstores\";\nimport type { EmbeddingsInterface } from \"@langchain/core/embeddings\";\nimport { Document, DocumentInput } from \"@langchain/core/documents\";\nimport { AsyncCaller, AsyncCallerCallOptions, AsyncCallerParams } from \"@langchain/core/utils/async_caller\";\nimport { GoogleVertexAIConnection } from \"../utils/googlevertexai-connection.js\";\nimport { Docstore } from \"../stores/doc/base.js\";\nimport { GoogleVertexAIConnectionParams, GoogleResponse, GoogleAbstractedClientOpsMethod } from \"../types/googlevertexai-types.js\";\n/**\n * Allows us to create IdDocument classes that contain the ID.\n */\nexport interface IdDocumentInput extends DocumentInput {\n    id?: string;\n}\n/**\n * A Document that optionally includes the ID of the document.\n */\nexport declare class IdDocument extends Document implements IdDocumentInput {\n    id?: string;\n    constructor(fields: IdDocumentInput);\n}\ninterface IndexEndpointConnectionParams extends GoogleVertexAIConnectionParams<GoogleAuthOptions> {\n    indexEndpoint: string;\n}\ninterface DeployedIndex {\n    id: string;\n    index: string;\n}\ninterface IndexEndpointResponse extends GoogleResponse {\n    data: {\n        deployedIndexes: DeployedIndex[];\n        publicEndpointDomainName: string;\n    };\n}\ndeclare class IndexEndpointConnection extends GoogleVertexAIConnection<AsyncCallerCallOptions, IndexEndpointResponse, GoogleAuthOptions> {\n    indexEndpoint: string;\n    constructor(fields: IndexEndpointConnectionParams, caller: AsyncCaller);\n    buildUrl(): Promise<string>;\n    buildMethod(): GoogleAbstractedClientOpsMethod;\n    request(options: AsyncCallerCallOptions): Promise<IndexEndpointResponse>;\n}\n/**\n * Used to represent parameters that are necessary to delete documents\n * from the matching engine. These must be a list of string IDs\n */\nexport interface MatchingEngineDeleteParams {\n    ids: string[];\n}\ninterface RemoveDatapointParams extends GoogleVertexAIConnectionParams<GoogleAuthOptions> {\n    index: string;\n}\ninterface RemoveDatapointResponse extends GoogleResponse {\n}\ndeclare class RemoveDatapointConnection extends GoogleVertexAIConnection<AsyncCallerCallOptions, RemoveDatapointResponse, GoogleAuthOptions> {\n    index: string;\n    constructor(fields: RemoveDatapointParams, caller: AsyncCaller);\n    buildUrl(): Promise<string>;\n    buildMethod(): GoogleAbstractedClientOpsMethod;\n    request(datapointIds: string[], options: AsyncCallerCallOptions): Promise<RemoveDatapointResponse>;\n}\ninterface UpsertDatapointParams extends GoogleVertexAIConnectionParams<GoogleAuthOptions> {\n    index: string;\n}\nexport interface Restriction {\n    namespace: string;\n    allowList?: string[];\n    denyList?: string[];\n}\ninterface CrowdingTag {\n    crowdingAttribute: string;\n}\ninterface IndexDatapoint {\n    datapointId: string;\n    featureVector: number[];\n    restricts?: Restriction[];\n    crowdingTag?: CrowdingTag;\n}\ninterface UpsertDatapointResponse extends GoogleResponse {\n}\ndeclare class UpsertDatapointConnection extends GoogleVertexAIConnection<AsyncCallerCallOptions, UpsertDatapointResponse, GoogleAuthOptions> {\n    index: string;\n    constructor(fields: UpsertDatapointParams, caller: AsyncCaller);\n    buildUrl(): Promise<string>;\n    buildMethod(): GoogleAbstractedClientOpsMethod;\n    request(datapoints: IndexDatapoint[], options: AsyncCallerCallOptions): Promise<UpsertDatapointResponse>;\n}\n/**\n * Information about the Matching Engine public API endpoint.\n * Primarily exported to allow for testing.\n */\nexport interface PublicAPIEndpointInfo {\n    apiEndpoint?: string;\n    deployedIndexId?: string;\n}\n/**\n * Parameters necessary to configure the Matching Engine.\n */\nexport interface MatchingEngineArgs extends GoogleVertexAIConnectionParams<GoogleAuthOptions>, IndexEndpointConnectionParams, UpsertDatapointParams {\n    docstore: Docstore;\n    callerParams?: AsyncCallerParams;\n    callerOptions?: AsyncCallerCallOptions;\n    apiEndpoint?: string;\n    deployedIndexId?: string;\n}\n/**\n * A class that represents a connection to a Google Vertex AI Matching Engine\n * instance.\n */\nexport declare class MatchingEngine extends VectorStore implements MatchingEngineArgs {\n    FilterType: Restriction[];\n    /**\n     * Docstore that retains the document, stored by ID\n     */\n    docstore: Docstore;\n    /**\n     * The host to connect to for queries and upserts.\n     */\n    apiEndpoint: string;\n    apiVersion: string;\n    endpoint: string;\n    location: string;\n    /**\n     * The id for the index endpoint\n     */\n    indexEndpoint: string;\n    /**\n     * The id for the index\n     */\n    index: string;\n    /**\n     * Explicitly set Google Auth credentials if you cannot get them from google auth application-default login\n     * This is useful for serverless or autoscaling environments like Fargate\n     */\n    authOptions: GoogleAuthOptions;\n    /**\n     * The id for the \"deployed index\", which is an identifier in the\n     * index endpoint that references the index (but is not the index id)\n     */\n    deployedIndexId: string;\n    callerParams: AsyncCallerParams;\n    callerOptions: AsyncCallerCallOptions;\n    caller: AsyncCaller;\n    indexEndpointClient: IndexEndpointConnection;\n    removeDatapointClient: RemoveDatapointConnection;\n    upsertDatapointClient: UpsertDatapointConnection;\n    constructor(embeddings: EmbeddingsInterface, args: MatchingEngineArgs);\n    _vectorstoreType(): string;\n    addDocuments(documents: Document[]): Promise<void>;\n    addVectors(vectors: number[][], documents: Document[]): Promise<void>;\n    // TODO: Refactor this into a utility type and use with pinecone as well?\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    cleanMetadata(documentMetadata: Record<string, any>): {\n        [key: string]: string | number | boolean | string[] | null;\n    };\n    /**\n     * Given the metadata from a document, convert it to an array of Restriction\n     * objects that may be passed to the Matching Engine and stored.\n     * The default implementation flattens any metadata and includes it as\n     * an \"allowList\". Subclasses can choose to convert some of these to\n     * \"denyList\" items or to add additional restrictions (for example, to format\n     * dates into a different structure or to add additional restrictions\n     * based on the date).\n     * @param documentMetadata - The metadata from a document\n     * @returns a Restriction[] (or an array of a subclass, from the FilterType)\n     */\n    metadataToRestrictions(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    documentMetadata: Record<string, any>): this[\"FilterType\"];\n    /**\n     * Create an index datapoint for the vector and document id.\n     * If an id does not exist, create it and set the document to its value.\n     * @param vector\n     * @param document\n     */\n    buildDatapoint(vector: number[], document: IdDocument): IndexDatapoint;\n    delete(params: MatchingEngineDeleteParams): Promise<void>;\n    similaritySearchVectorWithScore(query: number[], k: number, filter?: this[\"FilterType\"]): Promise<[Document, number][]>;\n    /**\n     * For this index endpoint, figure out what API Endpoint URL and deployed\n     * index ID should be used to do upserts and queries.\n     * Also sets the `apiEndpoint` and `deployedIndexId` property for future use.\n     * @return The URL\n     */\n    determinePublicAPIEndpoint(): Promise<PublicAPIEndpointInfo>;\n    getPublicAPIEndpoint(): Promise<string>;\n    getDeployedIndexId(): Promise<string>;\n    static fromTexts(texts: string[], metadatas: object[] | object, embeddings: EmbeddingsInterface, dbConfig: MatchingEngineArgs): Promise<VectorStore>;\n    static fromDocuments(docs: Document[], embeddings: EmbeddingsInterface, dbConfig: MatchingEngineArgs): Promise<VectorStore>;\n}\nexport {};\n"],"mappings":"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"}