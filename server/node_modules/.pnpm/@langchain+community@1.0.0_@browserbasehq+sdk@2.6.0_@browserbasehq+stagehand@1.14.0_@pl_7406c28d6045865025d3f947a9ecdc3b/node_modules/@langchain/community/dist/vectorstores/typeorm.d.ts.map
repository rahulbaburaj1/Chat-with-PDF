{"version":3,"file":"typeorm.d.ts","names":["Metadata","DataSource","DataSourceOptions","EntitySchema","EmbeddingsInterface","VectorStore","Document","TypeORMVectorStoreArgs","TypeORMVectorStoreDocument","TypeORMVectorStore","Promise"],"sources":["../../src/vectorstores/typeorm.d.ts"],"sourcesContent":["import { Metadata } from \"@opensearch-project/opensearch/api/types.js\";\nimport { DataSource, DataSourceOptions, EntitySchema } from \"typeorm\";\nimport type { EmbeddingsInterface } from \"@langchain/core/embeddings\";\nimport { VectorStore } from \"@langchain/core/vectorstores\";\nimport { Document } from \"@langchain/core/documents\";\n/**\n * Interface that defines the arguments required to create a\n * `TypeORMVectorStore` instance. It includes Postgres connection options,\n * table name, filter, and verbosity level.\n */\nexport interface TypeORMVectorStoreArgs {\n    postgresConnectionOptions: DataSourceOptions;\n    tableName?: string;\n    schemaName?: string;\n    filter?: Metadata;\n    verbose?: boolean;\n}\n/**\n * Class that extends the `Document` base class and adds an `embedding`\n * property. It represents a document in the vector store.\n */\nexport declare class TypeORMVectorStoreDocument extends Document {\n    embedding: string;\n}\n/**\n * Class that provides an interface to a Postgres vector database. It\n * extends the `VectorStore` base class and implements methods for adding\n * documents and vectors, performing similarity searches, and ensuring the\n * existence of a table in the database.\n */\nexport declare class TypeORMVectorStore extends VectorStore {\n    FilterType: Metadata;\n    tableName: string;\n    schemaName?: string;\n    documentEntity: EntitySchema;\n    filter?: Metadata;\n    appDataSource: DataSource;\n    _verbose?: boolean;\n    _vectorstoreType(): string;\n    private constructor();\n    /**\n     * Static method to create a new `TypeORMVectorStore` instance from a\n     * `DataSource`. It initializes the `DataSource` if it is not already\n     * initialized.\n     * @param embeddings Embeddings instance.\n     * @param fields `TypeORMVectorStoreArgs` instance.\n     * @returns A new instance of `TypeORMVectorStore`.\n     */\n    static fromDataSource(embeddings: EmbeddingsInterface, fields: TypeORMVectorStoreArgs): Promise<TypeORMVectorStore>;\n    /**\n     * Method to add documents to the vector store. It ensures the existence\n     * of the table in the database, converts the documents into vectors, and\n     * adds them to the store.\n     * @param documents Array of `Document` instances.\n     * @returns Promise that resolves when the documents have been added.\n     */\n    addDocuments(documents: Document[]): Promise<void>;\n    /**\n     * Method to add vectors to the vector store. It converts the vectors into\n     * rows and inserts them into the database.\n     * @param vectors Array of vectors.\n     * @param documents Array of `Document` instances.\n     * @returns Promise that resolves when the vectors have been added.\n     */\n    addVectors(vectors: number[][], documents: Document[]): Promise<void>;\n    /**\n     * Method to perform a similarity search in the vector store. It returns\n     * the `k` most similar documents to the query vector, along with their\n     * similarity scores.\n     * @param query Query vector.\n     * @param k Number of most similar documents to return.\n     * @param filter Optional filter to apply to the search.\n     * @returns Promise that resolves with an array of tuples, each containing a `TypeORMVectorStoreDocument` and its similarity score.\n     */\n    similaritySearchVectorWithScore(query: number[], k: number, filter?: this[\"FilterType\"]): Promise<[TypeORMVectorStoreDocument, number][]>;\n    /**\n     * Method to ensure the existence of the table in the database. It creates\n     * the table if it does not already exist.\n     * @returns Promise that resolves when the table has been ensured.\n     */\n    ensureTableInDatabase(): Promise<void>;\n    private getTablePath;\n    /**\n     * Static method to create a new `TypeORMVectorStore` instance from an\n     * array of texts and their metadata. It converts the texts into\n     * `Document` instances and adds them to the store.\n     * @param texts Array of texts.\n     * @param metadatas Array of metadata objects or a single metadata object.\n     * @param embeddings Embeddings instance.\n     * @param dbConfig `TypeORMVectorStoreArgs` instance.\n     * @returns Promise that resolves with a new instance of `TypeORMVectorStore`.\n     */\n    static fromTexts(texts: string[], metadatas: object[] | object, embeddings: EmbeddingsInterface, dbConfig: TypeORMVectorStoreArgs): Promise<TypeORMVectorStore>;\n    /**\n     * Static method to create a new `TypeORMVectorStore` instance from an\n     * array of `Document` instances. It adds the documents to the store.\n     * @param docs Array of `Document` instances.\n     * @param embeddings Embeddings instance.\n     * @param dbConfig `TypeORMVectorStoreArgs` instance.\n     * @returns Promise that resolves with a new instance of `TypeORMVectorStore`.\n     */\n    static fromDocuments(docs: Document[], embeddings: EmbeddingsInterface, dbConfig: TypeORMVectorStoreArgs): Promise<TypeORMVectorStore>;\n    /**\n     * Static method to create a new `TypeORMVectorStore` instance from an\n     * existing index.\n     * @param embeddings Embeddings instance.\n     * @param dbConfig `TypeORMVectorStoreArgs` instance.\n     * @returns Promise that resolves with a new instance of `TypeORMVectorStore`.\n     */\n    static fromExistingIndex(embeddings: EmbeddingsInterface, dbConfig: TypeORMVectorStoreArgs): Promise<TypeORMVectorStore>;\n}\n"],"mappings":";;;;;;;;;;;;;;;UAUiBO,sBAAAA;6BACcL;;;EADdK,MAAAA,CAAAA,EAIJP,QAJIO;EAAsB,OAAA,CAAA,EAAA,OAAA;;;AAIlB;AAOrB;AASA;AAAuC,cATlBC,0BAAAA,SAAmCF,QAAQ,CASzB;EAAA,SACvBN,EAAAA,MAAAA;;;;;;;;AAyBYM,cA1BPG,kBAAAA,SAA2BJ,WAAAA,CA0BpBC;EAAQ,UAAKI,EAzBzBV,QAyByBU;EAAO,SAQDJ,EAAAA,MAAAA;EAAQ,UAAKI,CAAAA,EAAAA,MAAAA;EAAO,cAUoCF,EAxCnFL,YAwCmFK;EAA0B,MAAnCE,CAAAA,EAvCjFV,QAuCiFU;EAAO,aAMxEA,EA5CVT,UA4CUS;EAAO,QAY4CN,CAAAA,EAAAA,OAAAA;EAAmB,gBAAYG,CAAAA,CAAAA,EAAAA,MAAAA;EAAsB,QAAWE,WAAAA,CAAAA;EAAkB;;;;;;;;EAiBpE,OAAWA,cAAAA,CAAAA,UAAAA,EA7DnEL,mBA6DmEK,EAAAA,MAAAA,EA7DtCF,sBA6DsCE,CAAAA,EA7DbC,OA6DaD,CA7DLA,kBA6DKA,CAAAA;EAAkB;;AA/EhE;;;;;0BA0B/BH,aAAaI;;;;;;;;6CAQMJ,aAAaI;;;;;;;;;;4FAUkCA,SAASF;;;;;;2BAM1EE;;;;;;;;;;;;8EAYmDN,+BAA+BG,yBAAyBG,QAAQD;;;;;;;;;6BASjHH,wBAAwBF,+BAA+BG,yBAAyBG,QAAQD;;;;;;;;uCAQ9EL,+BAA+BG,yBAAyBG,QAAQD"}