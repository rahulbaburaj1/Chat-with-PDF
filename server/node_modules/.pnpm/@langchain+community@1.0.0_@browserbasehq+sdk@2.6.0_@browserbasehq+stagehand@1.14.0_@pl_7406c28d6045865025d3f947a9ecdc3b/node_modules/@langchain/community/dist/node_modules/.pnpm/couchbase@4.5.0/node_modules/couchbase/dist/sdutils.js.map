{"version":3,"file":"sdutils.js","names":[],"sources":["../../../../../../../../../node_modules/.pnpm/couchbase@4.5.0/node_modules/couchbase/dist/sdutils.js"],"sourcesContent":["/* eslint jsdoc/require-jsdoc: off */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SdUtils = void 0;\nclass SdUtils {\n    static _parsePath(path) {\n        if (!path) {\n            return [];\n        }\n        let identifier = '';\n        const parts = [];\n        for (let i = 0; i < path.length; ++i) {\n            if (path[i] === '[') {\n                // Starting an array, use the previous bit as a property\n                if (identifier) {\n                    parts.push({ type: 'property', path: identifier });\n                    identifier = '';\n                }\n            }\n            else if (path[i] === ']') {\n                // array path of identifier;\n                parts.push({ type: 'index', index: parseInt(identifier) });\n                identifier = '';\n                // skip the `.` that follows, if there is one\n                ++i;\n            }\n            else if (path[i] === '.') {\n                parts.push({ type: 'property', path: identifier });\n                identifier = '';\n            }\n            else {\n                identifier += path[i];\n            }\n        }\n        if (identifier) {\n            parts.push({ type: 'property', path: identifier });\n        }\n        return parts;\n    }\n    static _insertByPath(root, parts, value) {\n        if (parts.length === 0) {\n            return value;\n        }\n        const firstPart = parts.shift();\n        if (firstPart.type === 'property') {\n            if (!root) {\n                root = {};\n            }\n            if (Array.isArray(root)) {\n                throw new Error('expected object, found array');\n            }\n            root[firstPart.path] = this._insertByPath(root[firstPart.path], parts, value);\n        }\n        else if (firstPart.type === 'index') {\n            if (!root) {\n                root = [];\n            }\n            if (!Array.isArray(root)) {\n                throw new Error('expected array, found object');\n            }\n            root[firstPart.index] = this._insertByPath(root[firstPart.index], parts, value);\n        }\n        else {\n            throw new Error('encountered unexpected path type');\n        }\n        return root;\n    }\n    static insertByPath(root, path, value) {\n        const parts = this._parsePath(path);\n        return this._insertByPath(root, parts, value);\n    }\n    static _getByPath(value, parts) {\n        if (parts.length === 0) {\n            return value;\n        }\n        const firstPart = parts.shift();\n        if (firstPart.type === 'property') {\n            if (!value) {\n                return undefined;\n            }\n            if (Array.isArray(value)) {\n                throw new Error('expected object, found array');\n            }\n            return this._getByPath(value[firstPart.path], parts);\n        }\n        else if (firstPart.type === 'index') {\n            if (!value) {\n                return undefined;\n            }\n            if (!Array.isArray(value)) {\n                throw new Error('expected array, found object');\n            }\n            return this._getByPath(value[firstPart.index], parts);\n        }\n        else {\n            throw new Error('encountered unexpected path type');\n        }\n    }\n    static getByPath(value, path) {\n        const parts = this._parsePath(path);\n        return this._getByPath(value, parts);\n    }\n    static convertMacroCasToCas(cas) {\n        const buf = Buffer.from(cas.startsWith('0x') ? cas.slice(2) : cas, 'hex');\n        return `0x${buf.reverse().toString('hex')}`;\n    }\n}\nexports.SdUtils = SdUtils;\n"],"x_google_ignoreList":[0],"mappings":";;;;;;CAEA,OAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAM,EAAC;CAC7D,QAAQ,UAAU,KAAK;CACvB,IAAM,UAAN,MAAc;EACV,OAAO,WAAW,MAAM;AACpB,OAAI,CAAC,KACD,QAAO,CAAE;GAEb,IAAI,aAAa;GACjB,MAAM,QAAQ,CAAE;AAChB,QAAK,IAAI,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,EAC/B,KAAI,KAAK,OAAO,KAEZ;QAAI,YAAY;KACZ,MAAM,KAAK;MAAE,MAAM;MAAY,MAAM;KAAY,EAAC;KAClD,aAAa;IAChB;cAEI,KAAK,OAAO,KAAK;IAEtB,MAAM,KAAK;KAAE,MAAM;KAAS,OAAO,SAAS,WAAW;IAAE,EAAC;IAC1D,aAAa;IAEb,EAAE;GACL,WACQ,KAAK,OAAO,KAAK;IACtB,MAAM,KAAK;KAAE,MAAM;KAAY,MAAM;IAAY,EAAC;IAClD,aAAa;GAChB,OAEG,cAAc,KAAK;AAG3B,OAAI,YACA,MAAM,KAAK;IAAE,MAAM;IAAY,MAAM;GAAY,EAAC;AAEtD,UAAO;EACV;EACD,OAAO,cAAc,MAAM,OAAO,OAAO;AACrC,OAAI,MAAM,WAAW,EACjB,QAAO;GAEX,MAAM,YAAY,MAAM,OAAO;AAC/B,OAAI,UAAU,SAAS,YAAY;AAC/B,QAAI,CAAC,MACD,OAAO,CAAE;AAEb,QAAI,MAAM,QAAQ,KAAK,CACnB,OAAM,IAAI,MAAM;IAEpB,KAAK,UAAU,QAAQ,KAAK,cAAc,KAAK,UAAU,OAAO,OAAO,MAAM;GAChF,WACQ,UAAU,SAAS,SAAS;AACjC,QAAI,CAAC,MACD,OAAO,CAAE;AAEb,QAAI,CAAC,MAAM,QAAQ,KAAK,CACpB,OAAM,IAAI,MAAM;IAEpB,KAAK,UAAU,SAAS,KAAK,cAAc,KAAK,UAAU,QAAQ,OAAO,MAAM;GAClF,MAEG,OAAM,IAAI,MAAM;AAEpB,UAAO;EACV;EACD,OAAO,aAAa,MAAM,MAAM,OAAO;GACnC,MAAM,QAAQ,KAAK,WAAW,KAAK;AACnC,UAAO,KAAK,cAAc,MAAM,OAAO,MAAM;EAChD;EACD,OAAO,WAAW,OAAO,OAAO;AAC5B,OAAI,MAAM,WAAW,EACjB,QAAO;GAEX,MAAM,YAAY,MAAM,OAAO;AAC/B,OAAI,UAAU,SAAS,YAAY;AAC/B,QAAI,CAAC,MACD,QAAO;AAEX,QAAI,MAAM,QAAQ,MAAM,CACpB,OAAM,IAAI,MAAM;AAEpB,WAAO,KAAK,WAAW,MAAM,UAAU,OAAO,MAAM;GACvD,WACQ,UAAU,SAAS,SAAS;AACjC,QAAI,CAAC,MACD,QAAO;AAEX,QAAI,CAAC,MAAM,QAAQ,MAAM,CACrB,OAAM,IAAI,MAAM;AAEpB,WAAO,KAAK,WAAW,MAAM,UAAU,QAAQ,MAAM;GACxD,MAEG,OAAM,IAAI,MAAM;EAEvB;EACD,OAAO,UAAU,OAAO,MAAM;GAC1B,MAAM,QAAQ,KAAK,WAAW,KAAK;AACnC,UAAO,KAAK,WAAW,OAAO,MAAM;EACvC;EACD,OAAO,qBAAqB,KAAK;GAC7B,MAAM,MAAM,OAAO,KAAK,IAAI,WAAW,KAAK,GAAG,IAAI,MAAM,EAAE,GAAG,KAAK,MAAM;AACzE,UAAO,CAAC,EAAE,EAAE,IAAI,SAAS,CAAC,SAAS,MAAM,EAAE;EAC9C;CACJ;CACD,QAAQ,UAAU"}