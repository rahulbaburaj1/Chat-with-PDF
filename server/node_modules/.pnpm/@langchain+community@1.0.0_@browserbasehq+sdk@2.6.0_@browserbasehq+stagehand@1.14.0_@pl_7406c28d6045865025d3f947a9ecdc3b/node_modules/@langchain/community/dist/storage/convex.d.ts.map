{"version":3,"file":"convex.d.ts","names":["FieldPaths","FunctionReference","GenericActionCtx","GenericDataModel","NamedTableInfo","TableNamesInDataModel","VectorIndexNames","Value","BaseStore","ConvexKVStoreConfig","DataModel","TableName","IndexName","KeyFieldName","ValueFieldName","UpsertMutation","LookupQuery","DeleteManyMutation","ConvexKVStore","T","Promise","AsyncGenerator"],"sources":["../../src/storage/convex.d.ts"],"sourcesContent":["import { FieldPaths, FunctionReference, GenericActionCtx, GenericDataModel, NamedTableInfo, TableNamesInDataModel, VectorIndexNames } from \"convex/server\";\nimport { Value } from \"convex/values\";\nimport { BaseStore } from \"@langchain/core/stores\";\n/**\n * Type that defines the config required to initialize the\n * ConvexKVStore class. It includes the table name,\n * index name, field name.\n */\nexport type ConvexKVStoreConfig<DataModel extends GenericDataModel, TableName extends TableNamesInDataModel<DataModel>, IndexName extends VectorIndexNames<NamedTableInfo<DataModel, TableName>>, KeyFieldName extends FieldPaths<NamedTableInfo<DataModel, TableName>>, ValueFieldName extends FieldPaths<NamedTableInfo<DataModel, TableName>>, UpsertMutation extends FunctionReference<\"mutation\", \"internal\", {\n    table: string;\n    document: object;\n}>, LookupQuery extends FunctionReference<\"query\", \"internal\", {\n    table: string;\n    index: string;\n    keyField: string;\n    key: string;\n}, object[]>, DeleteManyMutation extends FunctionReference<\"mutation\", \"internal\", {\n    table: string;\n    index: string;\n    keyField: string;\n    key: string;\n}>> = {\n    readonly ctx: GenericActionCtx<DataModel>;\n    /**\n     * Defaults to \"cache\"\n     */\n    readonly table?: TableName;\n    /**\n     * Defaults to \"byKey\"\n     */\n    readonly index?: IndexName;\n    /**\n     * Defaults to \"key\"\n     */\n    readonly keyField?: KeyFieldName;\n    /**\n     * Defaults to \"value\"\n     */\n    readonly valueField?: ValueFieldName;\n    /**\n     * Defaults to `internal.langchain.db.upsert`\n     */\n    readonly upsert?: UpsertMutation;\n    /**\n     * Defaults to `internal.langchain.db.lookup`\n     */\n    readonly lookup?: LookupQuery;\n    /**\n     * Defaults to `internal.langchain.db.deleteMany`\n     */\n    readonly deleteMany?: DeleteManyMutation;\n};\n/**\n * Class that extends the BaseStore class to interact with a Convex\n * database. It provides methods for getting, setting, and deleting key value pairs,\n * as well as yielding keys from the database.\n */\nexport declare class ConvexKVStore<T extends Value, DataModel extends GenericDataModel, TableName extends TableNamesInDataModel<DataModel>, IndexName extends VectorIndexNames<NamedTableInfo<DataModel, TableName>>, KeyFieldName extends FieldPaths<NamedTableInfo<DataModel, TableName>>, ValueFieldName extends FieldPaths<NamedTableInfo<DataModel, TableName>>, UpsertMutation extends FunctionReference<\"mutation\", \"internal\", {\n    table: string;\n    document: object;\n}>, LookupQuery extends FunctionReference<\"query\", \"internal\", {\n    table: string;\n    index: string;\n    keyField: string;\n    key: string;\n}, object[]>, DeleteManyMutation extends FunctionReference<\"mutation\", \"internal\", {\n    table: string;\n    index: string;\n    keyField: string;\n    key: string;\n}>> extends BaseStore<string, T> {\n    lc_namespace: string[];\n    private readonly ctx;\n    private readonly table;\n    private readonly index;\n    private readonly keyField;\n    private readonly valueField;\n    private readonly upsert;\n    private readonly lookup;\n    private readonly deleteMany;\n    constructor(config: ConvexKVStoreConfig<DataModel, TableName, IndexName, KeyFieldName, ValueFieldName, UpsertMutation, LookupQuery, DeleteManyMutation>);\n    /**\n     * Gets multiple keys from the Convex database.\n     * @param keys Array of keys to be retrieved.\n     * @returns An array of retrieved values.\n     */\n    mget(keys: string[]): Promise<(T | undefined)[]>;\n    /**\n     * Sets multiple keys in the Convex database.\n     * @param keyValuePairs Array of key-value pairs to be set.\n     * @returns Promise that resolves when all keys have been set.\n     */\n    mset(keyValuePairs: [string, T][]): Promise<void>;\n    /**\n     * Deletes multiple keys from the Convex database.\n     * @param keys Array of keys to be deleted.\n     * @returns Promise that resolves when all keys have been deleted.\n     */\n    mdelete(keys: string[]): Promise<void>;\n    /**\n     * Yields keys from the Convex database.\n     * @param prefix Optional prefix to filter the keys.\n     * @returns An AsyncGenerator that yields keys from the Convex database.\n     */\n    // eslint-disable-next-line require-yield\n    yieldKeys(_prefix?: string): AsyncGenerator<string>;\n}\n"],"mappings":";;;;;;;;;;;;;KAQYS,sCAAsCN,oCAAoCE,sBAAsBK,8BAA8BJ,iBAAiBF,eAAeM,WAAWC,kCAAkCX,WAAWI,eAAeM,WAAWC,oCAAoCX,WAAWI,eAAeM,WAAWC,oCAAoCV;;;AAAzW,CAAA,CAAA,EAAYQ,oBAGYR,iBAHO,CAAA,OAAA,EAAA,UAAA,EAAA;EAAA,KAAA,EAAA,MAAA;EAAA,KAAmBE,EAAAA,MAAAA;EAAgB,QAA0CO,EAAAA,MAAAA;EAAS,GAA/BL,EAAAA,MAAAA;CAAqB,EAAA,MAA+DK,EAAAA,CAAAA,EAAAA,2BAQjIT,iBARiIS,CAAAA,UAAAA,EAAAA,UAAAA,EAAAA;EAAS,KAAEC,EAAAA,MAAAA;EAAS,KAAnCP,EAAAA,MAAAA;EAAc,QAA/BE,EAAAA,MAAAA;EAAgB,GAAuFI,EAAAA,MAAAA;CAAS,CAAA,CAAA,GAAA;EAAW,SAAnCN,GAAAA,EAchNF,gBAdgNE,CAc/LM,SAd+LN,CAAAA;EAAc;;;EAA8F,SAAnCA,KAAAA,CAAAA,EAkBtRO,SAlBsRP;EAAc;;;EAGhR,SAKAH,KAAAA,CAAAA,EAcpBW,SAdoBX;EAAiB;;;EAU5B,SAITW,QAAAA,CAAAA,EAIGC,YAJHD;EAAS;;;EAYM,SAIdI,UAAAA,CAAAA,EARIF,cAQJE;EAAW;AAIW;AAO5C;EAAkC,SAAA,MAAA,CAAA,EAfZD,cAeY;EAAA;;;EAAuG,SAA/BV,MAAAA,CAAAA,EAXpFW,WAWoFX;EAAqB;;;EAA8D,SAA/BC,UAAAA,CAAAA,EAPpIW,kBAOoIX;CAAgB;;;;;;AAAiJF,cAA1Sc,aAA0Sd,CAAAA,UAAlRG,KAAkRH,EAAAA,kBAAzPD,gBAAyPC,EAAAA,kBAArNC,qBAAqND,CAA/LM,SAA+LN,CAAAA,EAAAA,kBAAjKE,gBAAiKF,CAAhJA,cAAgJA,CAAjIM,SAAiIN,EAAtHO,SAAsHP,CAAAA,CAAAA,EAAAA,qBAApFJ,UAAoFI,CAAzEA,cAAyEA,CAA1DM,SAA0DN,EAA/CO,SAA+CP,CAAAA,CAAAA,EAAAA,uBAAXJ,UAAWI,CAAAA,cAAAA,CAAeM,SAAfN,EAA0BO,SAA1BP,CAAAA,CAAAA,EAAAA,uBAA8DH,iBAA9DG,CAAAA,UAAAA,EAAAA,UAAAA,EAAAA;EAAc,KAAzBJ,EAAAA,MAAAA;EAAU,QAA+DC,EAAAA,MAAAA;CAAiB,CAAA,EAAA,oBAGtXA,iBAAAA,CAAAA,OAAAA,EAAAA,UAAAA,EAAAA;EAAiB,KAKAA,EAAAA,MAAAA;EAAiB,KAK5BkB,EAAAA,MAAAA;EAAC,QAUaT,EAAAA,MAAAA;EAAS,GAAEC,EAAAA,MAAAA;CAAS,EAAA,MAAEC,EAAAA,CAAAA,EAAAA,2BAfzBX,iBAeyBW,CAAAA,UAAAA,EAAAA,UAAAA,EAAAA;EAAS,KAAEC,EAAAA,MAAAA;EAAY,KAAEC,EAAAA,MAAAA;EAAc,QAAEC,EAAAA,MAAAA;EAAc,GAAEC,EAAAA,MAAAA;CAAW,CAAA,CAAA,SAV1HR,SAU4HS,CAAAA,MAAAA,EAV1GE,CAU0GF,CAAAA,CAAAA;EAAkB,YAAlIR,EAAAA,MAAAA,EAAAA;EAAmB,iBAMRU,GAAAA;EAAC,iBAAVC,KAAAA;EAAO,iBAMAD,KAAAA;EAAC,iBAAMC,QAAAA;EAAO,iBAMlBA,UAAAA;EAAO,iBAOHC,MAAAA;EAAc,iBAnCnCb,MAAAA;EAAS,iBAAA,UAAA;sBAUGC,oBAAoBC,WAAWC,WAAWC,WAAWC,cAAcC,gBAAgBC,gBAAgBC,aAAaC;;;;;;wBAM9GG,SAASD;;;;;;+BAMFA,OAAOC;;;;;;2BAMXA;;;;;;;+BAOIC"}