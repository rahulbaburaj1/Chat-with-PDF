{"version":3,"file":"connery.d.ts","names":["AsyncCaller","AsyncCallerParams","StructuredTool","InferInteropZodOutput","z","ConneryServiceParams","Parameter","Action","Input","Record","Output","ConneryActionSchema","ZodString","ZodOptional","ZodObject","ConneryAction","ConneryService","Promise","Response"],"sources":["../../src/tools/connery.d.ts"],"sourcesContent":["import { AsyncCaller, AsyncCallerParams } from \"@langchain/core/utils/async_caller\";\nimport { StructuredTool } from \"@langchain/core/tools\";\nimport { InferInteropZodOutput } from \"@langchain/core/utils/types\";\nimport { z } from \"zod/v3\";\n/**\n * An object containing configuration parameters for the ConneryService class.\n * @extends AsyncCallerParams\n */\nexport interface ConneryServiceParams extends AsyncCallerParams {\n    runnerUrl: string;\n    apiKey: string;\n}\ntype Parameter = {\n    key: string;\n    title: string;\n    description: string;\n    type: string;\n    validation?: {\n        required?: boolean;\n    };\n};\ntype Action = {\n    id: string;\n    key: string;\n    title: string;\n    description: string;\n    type: string;\n    inputParameters: Parameter[];\n    outputParameters: Parameter[];\n    pluginId: string;\n};\ntype Input = Record<string, string | undefined>;\ntype Output = Record<string, string>;\ntype ConneryActionSchema = z.ZodObject<Record<string, z.ZodString | z.ZodOptional<z.ZodString>>>;\n/**\n * A LangChain Tool object wrapping a Connery action.\n * ConneryAction is a structured tool that can be used only in the agents supporting structured tools.\n * @extends StructuredTool\n */\nexport declare class ConneryAction extends StructuredTool {\n    protected _action: Action;\n    protected _service: ConneryService;\n    name: string;\n    description: string;\n    schema: ConneryActionSchema;\n    /**\n     * Creates a ConneryAction instance based on the provided Connery Action.\n     * @param _action The Connery Action.\n     * @param _service The ConneryService instance.\n     * @returns A ConneryAction instance.\n     */\n    constructor(_action: Action, _service: ConneryService);\n    /**\n     * Runs the Connery Action with the provided input.\n     * @param arg The input object expected by the action.\n     * @returns A promise that resolves to a JSON string containing the output of the action.\n     */\n    protected _call(arg: InferInteropZodOutput<ConneryActionSchema>): Promise<string>;\n    /**\n     * Creates a Zod schema for the input object expected by the Connery action.\n     * @returns A Zod schema for the input object expected by the Connery action.\n     */\n    protected createInputSchema(): z.ZodObject<Record<string, z.ZodString | z.ZodOptional<z.ZodString>>>;\n}\n/**\n * A service for working with Connery Actions.\n */\nexport declare class ConneryService {\n    protected runnerUrl: string;\n    protected apiKey: string;\n    protected asyncCaller: AsyncCaller;\n    /**\n     * Creates a ConneryService instance.\n     * @param params A ConneryServiceParams object.\n     * If not provided, the values are retrieved from the CONNERY_RUNNER_URL\n     * and CONNERY_RUNNER_API_KEY environment variables.\n     * @returns A ConneryService instance.\n     */\n    constructor(params?: ConneryServiceParams);\n    /**\n     * Returns the list of Connery Actions wrapped as a LangChain StructuredTool objects.\n     * @returns A promise that resolves to an array of ConneryAction objects.\n     */\n    listActions(): Promise<ConneryAction[]>;\n    /**\n     * Returns the specified Connery action wrapped as a LangChain StructuredTool object.\n     * @param actionId The ID of the action to return.\n     * @returns A promise that resolves to a ConneryAction object.\n     */\n    getAction(actionId: string): Promise<ConneryAction>;\n    /**\n     * Runs the specified Connery action with the provided input.\n     * @param actionId The ID of the action to run.\n     * @param input The input object expected by the action.\n     * @returns A promise that resolves to a JSON string containing the output of the action.\n     */\n    runAction(actionId: string, input?: Input): Promise<string>;\n    /**\n     * Returns the list of actions available in the Connery runner.\n     * @returns A promise that resolves to an array of Action objects.\n     */\n    protected _listActions(): Promise<Action[]>;\n    /**\n     * Returns the specified action available in the Connery runner.\n     * @param actionId The ID of the action to return.\n     * @returns A promise that resolves to an Action object.\n     * @throws An error if the action with the specified ID is not found.\n     */\n    protected _getAction(actionId: string): Promise<Action>;\n    /**\n     * Runs the specified Connery action with the provided input.\n     * @param actionId The ID of the action to run.\n     * @param input The input object expected by the action.\n     * @returns A promise that resolves to a RunActionResult object.\n     */\n    protected _runAction(actionId: string, input?: Input): Promise<Output>;\n    /**\n     * Returns a standard set of HTTP headers to be used in API calls to the Connery runner.\n     * @returns An object containing the standard set of HTTP headers.\n     */\n    protected _getHeaders(): Record<string, string>;\n    /**\n     * Shared error handler for API calls to the Connery runner.\n     * If the response is not ok, an error is thrown containing the error message returned by the Connery runner.\n     * Otherwise, the promise resolves to void.\n     * @param response The response object returned by the Connery runner.\n     * @param errorMessage The error message to be used in the error thrown if the response is not ok.\n     * @returns A promise that resolves to void.\n     * @throws An error containing the error message returned by the Connery runner.\n     */\n    protected _handleError(response: Response, errorMessage: string): Promise<void>;\n}\nexport {};\n"],"mappings":";;;;;;;;;;;;;UAQiBK,oBAAAA,SAA6BJ;;;;KAIzCK,SAAAA;EAJYD,GAAAA,EAAAA,MAAAA;EAIZC,KAAAA,EAAAA,MAAS;EASTC,WAAM,EAAA,MAAA;EAAA,IAAA,EAAA,MAAA;EAAA,UAMUD,CAAAA,EAAAA;IACCA,QAAAA,CAAAA,EAAAA,OAAAA;EAAS,CAAA;AAAA,CAAA;AAGZ,KAVdC,MAAAA,GAWM;EACNI,EAAAA,EAAAA,MAAAA;EAAmB,GAAA,EAAA,MAAA;EAAA,KAAgCC,EAAAA,MAAAA;EAAS,WAAmBA,EAAAA,MAAAA;EAAS,IAAzBR,EAAES,MAAAA;EAAW,eAA1CJ,EANlBH,SAMkBG,EAAAA;EAAM,gBAAhBK,EALPR,SAKOQ,EAAAA;EAAS,QAAA,EAAA,MAAA;AAMtC,CAAA;KARKN,KAAAA,GAAQC,MAQqB,CAAA,MAAA,EAAA,MAAA,GAAA,SAAA,CAAA;KAP7BC,MAAAA,GAASD,MAQSF,CAAAA,MAAAA,EAAAA,MAAAA,CAAAA;KAPlBI,mBAAAA,GAAsBP,CAAAA,CAAEU,SAQLE,CAReP,MAQfO,CAAAA,MAAAA,EAR8BZ,CAAAA,CAAEQ,SAQhCI,GAR4CZ,CAAAA,CAAES,WAQ9CG,CAR0DZ,CAAAA,CAAEQ,SAQ5DI,CAAAA,CAAAA,CAAAA;;;;;;AAgB8CC,cAlBjDF,aAAAA,SAAsBb,cAAAA,CAkB2Be;EAAO,UAKbL,OAAAA,EAtBzCL,MAsByCK;EAAS,UAAmBA,QAAAA,EArBpEI,cAqBoEJ;EAAS,IAAzBR,EAAES,MAAAA;EAAW,WAA1CJ,EAAAA,MAAAA;EAAM,MAAhBK,EAlBzBH,mBAkByBG;EAAS;AAvBW;AA4BzD;;;;EAW6C,WAKlBC,CAAAA,OAAAA,EAhCFR,MAgCEQ,EAAAA,QAAAA,EAhCgBC,cAgChBD;EAAa;;;;;EAae,UAKjBR,KAAAA,CAAAA,GAAAA,EA5CbJ,qBA4CaI,CA5CSI,mBA4CTJ,CAAAA,CAAAA,EA5CgCU,OA4ChCV,CAAAA,MAAAA,CAAAA;EAAM;;;;EAcY,UAAWG,iBAAAA,CAAAA,CAAAA,EArDhCN,CAAAA,CAAEU,SAqD8BJ,CArDpBD,MAqDoBC,CAAAA,MAAAA,EArDLN,CAAAA,CAAEQ,SAqDGF,GArDSN,CAAAA,CAAES,WAqDXH,CArDuBN,CAAAA,CAAEQ,SAqDzBF,CAAAA,CAAAA,CAAAA;;;;;AAeU,cA/DxDM,cAAAA,CA+DwD;;;yBA5DlDhB;;;;;;;;uBAQFK;;;;;iBAKNY,QAAQF;;;;;;+BAMME,QAAQF;;;;;;;sCAODP,QAAQS;;;;;4BAKlBA,QAAQV;;;;;;;0CAOMU,QAAQV;;;;;;;iDAODC,QAAQS,QAAQP;;;;;2BAKtCD;;;;;;;;;;mCAUQS,iCAAiCD"}