{"version":3,"file":"writer.d.ts","names":["BaseLLMParams","LLM","WriterInput","Writer","Promise"],"sources":["../../src/llms/writer.d.ts"],"sourcesContent":["import { type BaseLLMParams, LLM } from \"@langchain/core/language_models/llms\";\n/**\n * Interface for the input parameters specific to the Writer model.\n */\nexport interface WriterInput extends BaseLLMParams {\n    /** Writer API key */\n    apiKey?: string;\n    /** Writer organization ID */\n    orgId?: string | number;\n    /** Model to use */\n    model?: string;\n    /** Sampling temperature to use */\n    temperature?: number;\n    /** Minimum number of tokens to generate. */\n    minTokens?: number;\n    /** Maximum number of tokens to generate in the completion. */\n    maxTokens?: number;\n    /** Generates this many completions server-side and returns the \"best\".\" */\n    bestOf?: number;\n    /** Penalizes repeated tokens according to frequency. */\n    frequencyPenalty?: number;\n    /** Whether to return log probabilities. */\n    logprobs?: number;\n    /** Number of completions to generate. */\n    n?: number;\n    /** Penalizes repeated tokens regardless of frequency. */\n    presencePenalty?: number;\n    /** Total probability mass of tokens to consider at each step. */\n    topP?: number;\n}\n/**\n * Class representing a Writer Large Language Model (LLM). It interacts\n * with the Writer API to generate text completions.\n */\nexport declare class Writer extends LLM implements WriterInput {\n    static lc_name(): string;\n    get lc_secrets(): {\n        [key: string]: string;\n    } | undefined;\n    get lc_aliases(): {\n        [key: string]: string;\n    } | undefined;\n    lc_serializable: boolean;\n    apiKey: string;\n    orgId: number;\n    model: string;\n    temperature?: number;\n    minTokens?: number;\n    maxTokens?: number;\n    bestOf?: number;\n    frequencyPenalty?: number;\n    logprobs?: number;\n    n?: number;\n    presencePenalty?: number;\n    topP?: number;\n    constructor(fields?: WriterInput);\n    _llmType(): string;\n    /** @ignore */\n    _call(prompt: string, options: this[\"ParsedCallOptions\"]): Promise<string>;\n}\n"],"mappings":";;;;;;;;;UAIiBE,WAAAA,SAAoBF;;;;;EAApBE;EA8BIC,KAAAA,CAAAA,EAAAA,MAAM;EAAA;EAAA,WAqBFD,CAAAA,EAAAA,MAAAA;EAAW;EAGkC,SAxBlCD,CAAAA,EAAAA,MAAAA;EAAG;EAAuB,SAAA,CAAA,EAAA,MAAA;;;;;;;;;;;;;;;;;;cAAzCE,MAAAA,SAAeF,GAAAA,YAAeC;;;;;;;;;;;;;;;;;;;;;uBAqB1BA;;;6DAGsCE"}