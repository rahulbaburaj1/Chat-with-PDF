{"version":3,"file":"fireworks.js","names":["fields?: Partial<\n      Omit<OpenAIInput, \"openAIApiKey\" | FireworksUnsupportedArgs>\n    > &\n      BaseLLMParams & { fireworksApiKey?: string }","request:\n      | OpenAIClient.CompletionCreateParamsStreaming\n      | OpenAIClient.CompletionCreateParamsNonStreaming","options?: OpenAICoreRequestOptions"],"sources":["../../src/llms/fireworks.ts"],"sourcesContent":["import {\n  type OpenAIClient,\n  type OpenAICallOptions,\n  type OpenAIInput,\n  type OpenAICoreRequestOptions,\n  OpenAI,\n} from \"@langchain/openai\";\nimport type { BaseLLMParams } from \"@langchain/core/language_models/llms\";\nimport { getEnvironmentVariable } from \"@langchain/core/utils/env\";\n\ntype FireworksUnsupportedArgs =\n  | \"frequencyPenalty\"\n  | \"presencePenalty\"\n  | \"bestOf\"\n  | \"logitBias\";\n\ntype FireworksUnsupportedCallOptions = \"functions\" | \"function_call\" | \"tools\";\n\nexport type FireworksCallOptions = Partial<\n  Omit<OpenAICallOptions, FireworksUnsupportedCallOptions>\n>;\n\n/**\n * Wrapper around Fireworks API for large language models\n *\n * Fireworks API is compatible to the OpenAI API with some limitations described in\n * https://readme.fireworks.ai/docs/openai-compatibility.\n *\n * To use, you should have the `openai` package installed and\n * the `FIREWORKS_API_KEY` environment variable set.\n */\nexport class Fireworks extends OpenAI<FireworksCallOptions> {\n  static lc_name() {\n    return \"Fireworks\";\n  }\n\n  _llmType() {\n    return \"fireworks\";\n  }\n\n  get lc_secrets(): { [key: string]: string } | undefined {\n    return {\n      fireworksApiKey: \"FIREWORKS_API_KEY\",\n    };\n  }\n\n  lc_serializable = true;\n\n  fireworksApiKey?: string;\n\n  constructor(\n    fields?: Partial<\n      Omit<OpenAIInput, \"openAIApiKey\" | FireworksUnsupportedArgs>\n    > &\n      BaseLLMParams & { fireworksApiKey?: string }\n  ) {\n    const fireworksApiKey =\n      fields?.fireworksApiKey || getEnvironmentVariable(\"FIREWORKS_API_KEY\");\n\n    if (!fireworksApiKey) {\n      throw new Error(\n        `Fireworks API key not found. Please set the FIREWORKS_API_KEY environment variable or provide the key into \"fireworksApiKey\"`\n      );\n    }\n\n    super({\n      ...fields,\n      openAIApiKey: fireworksApiKey,\n      modelName: fields?.modelName || \"accounts/fireworks/models/llama-v2-13b\",\n      configuration: {\n        baseURL: \"https://api.fireworks.ai/inference/v1\",\n      },\n    });\n\n    this.fireworksApiKey = fireworksApiKey;\n  }\n\n  toJSON() {\n    const result = super.toJSON();\n\n    if (\n      \"kwargs\" in result &&\n      typeof result.kwargs === \"object\" &&\n      result.kwargs != null\n    ) {\n      delete result.kwargs.openai_api_key;\n      delete result.kwargs.configuration;\n    }\n\n    return result;\n  }\n\n  async completionWithRetry(\n    request: OpenAIClient.CompletionCreateParamsStreaming,\n    options?: OpenAICoreRequestOptions\n  ): Promise<AsyncIterable<OpenAIClient.Completion>>;\n\n  async completionWithRetry(\n    request: OpenAIClient.CompletionCreateParamsNonStreaming,\n    options?: OpenAICoreRequestOptions\n  ): Promise<OpenAIClient.Completions.Completion>;\n\n  /**\n   * Calls the Fireworks API with retry logic in case of failures.\n   * @param request The request to send to the Fireworks API.\n   * @param options Optional configuration for the API call.\n   * @returns The response from the Fireworks API.\n   */\n  async completionWithRetry(\n    request:\n      | OpenAIClient.CompletionCreateParamsStreaming\n      | OpenAIClient.CompletionCreateParamsNonStreaming,\n    options?: OpenAICoreRequestOptions\n  ): Promise<\n    AsyncIterable<OpenAIClient.Completion> | OpenAIClient.Completions.Completion\n  > {\n    // https://readme.fireworks.ai/docs/openai-compatibility#api-compatibility\n    if (Array.isArray(request.prompt)) {\n      if (request.prompt.length > 1) {\n        throw new Error(\"Multiple prompts are not supported by Fireworks\");\n      }\n\n      const prompt = request.prompt[0];\n      if (typeof prompt !== \"string\") {\n        throw new Error(\"Only string prompts are supported by Fireworks\");\n      }\n\n      request.prompt = prompt;\n    }\n\n    delete request.frequency_penalty;\n    delete request.presence_penalty;\n    delete request.best_of;\n    delete request.logit_bias;\n\n    if (request.stream === true) {\n      return super.completionWithRetry(request, options);\n    }\n\n    return super.completionWithRetry(request, options);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AA+BA,IAAa,YAAb,cAA+B,OAA6B;CAC1D,OAAO,UAAU;AACf,SAAO;CACR;CAED,WAAW;AACT,SAAO;CACR;CAED,IAAI,aAAoD;AACtD,SAAO,EACL,iBAAiB,oBAClB;CACF;CAED,kBAAkB;CAElB;CAEA,YACEA,QAIA;EACA,MAAM,kBACJ,QAAQ,mBAAmB,uBAAuB,oBAAoB;AAExE,MAAI,CAAC,gBACH,OAAM,IAAI,MACR,CAAC,4HAA4H,CAAC;EAIlI,MAAM;GACJ,GAAG;GACH,cAAc;GACd,WAAW,QAAQ,aAAa;GAChC,eAAe,EACb,SAAS,wCACV;EACF,EAAC;EAEF,KAAK,kBAAkB;CACxB;CAED,SAAS;EACP,MAAM,SAAS,MAAM,QAAQ;AAE7B,MACE,YAAY,UACZ,OAAO,OAAO,WAAW,YACzB,OAAO,UAAU,MACjB;GACA,OAAO,OAAO,OAAO;GACrB,OAAO,OAAO,OAAO;EACtB;AAED,SAAO;CACR;;;;;;;CAkBD,MAAM,oBACJC,SAGAC,SAGA;AAEA,MAAI,MAAM,QAAQ,QAAQ,OAAO,EAAE;AACjC,OAAI,QAAQ,OAAO,SAAS,EAC1B,OAAM,IAAI,MAAM;GAGlB,MAAM,SAAS,QAAQ,OAAO;AAC9B,OAAI,OAAO,WAAW,SACpB,OAAM,IAAI,MAAM;GAGlB,QAAQ,SAAS;EAClB;EAED,OAAO,QAAQ;EACf,OAAO,QAAQ;EACf,OAAO,QAAQ;EACf,OAAO,QAAQ;AAEf,MAAI,QAAQ,WAAW,KACrB,QAAO,MAAM,oBAAoB,SAAS,QAAQ;AAGpD,SAAO,MAAM,oBAAoB,SAAS,QAAQ;CACnD;AACF"}