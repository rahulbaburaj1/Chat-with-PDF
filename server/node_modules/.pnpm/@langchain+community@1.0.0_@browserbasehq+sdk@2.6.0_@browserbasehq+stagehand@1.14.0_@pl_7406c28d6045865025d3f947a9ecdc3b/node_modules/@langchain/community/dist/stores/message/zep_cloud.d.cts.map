{"version":3,"file":"zep_cloud.d.cts","names":["Zep","ZepClient","RoleType","BaseChatMessageHistory","BaseMessage","MessageType","getZepMessageRoleType","ZepMemoryInput","MemoryType","ZepCloudChatMessageHistory","Promise","Record"],"sources":["../../../src/stores/message/zep_cloud.d.ts"],"sourcesContent":["import { Zep, ZepClient } from \"@getzep/zep-cloud\";\nimport { RoleType } from \"@getzep/zep-cloud/api\";\nimport { BaseChatMessageHistory } from \"@langchain/core/chat_history\";\nimport { BaseMessage, MessageType } from \"@langchain/core/messages\";\nexport declare const getZepMessageRoleType: (role: MessageType) => RoleType;\n/**\n * Interface defining the structure of the input data for the ZepMemory\n * class. It includes properties like humanPrefix, aiPrefix, memoryKey, sessionId, memoryType and apiKey.\n */\ninterface ZepMemoryInput {\n    sessionId: string;\n    client: ZepClient;\n    memoryType: Zep.MemoryType;\n    humanPrefix?: string;\n    aiPrefix?: string;\n    // Whether to return separate messages for chat history with a SystemMessage containing (facts and summary) or return a single HumanMessage with the entire memory context.\n    // Defaults to false (return a single HumanMessage) in order to allow more flexibility with different models.\n    separateMessages?: boolean;\n}\n/**\n * Class used to manage the memory of a chat session, including loading\n * and saving the chat history, and clearing the memory when needed. It\n * uses the ZepClient to interact with the Zep service for managing the\n * chat session's memory.\n *\n */\nexport declare class ZepCloudChatMessageHistory extends BaseChatMessageHistory implements ZepMemoryInput {\n    lc_namespace: string[];\n    sessionId: string;\n    client: ZepClient;\n    memoryType: Zep.MemoryType;\n    humanPrefix: string;\n    aiPrefix: string;\n    separateMessages: boolean;\n    constructor(fields: ZepMemoryInput);\n    private getMemory;\n    getMessages(): Promise<BaseMessage[]>;\n    addAIChatMessage(message: string, metadata?: Record<string, unknown>): Promise<void>;\n    addMessage(message: BaseMessage, metadata?: Record<string, unknown>): Promise<void>;\n    addUserMessage(message: string, metadata?: Record<string, unknown>): Promise<void>;\n    clear(): Promise<void>;\n}\nexport {};\n"],"mappings":";;;;;;;;;cAIqBM,8BAA8BD,gBAAgBH;;;;;UAKzDK,cAAAA;;UAEEN;EAPSK,UAAAA,EAQLN,GAAAA,CAAIQ,UARuD;EAAA,WAAA,CAAA,EAAA,MAAA;EAAA,QAAxBH,CAAAA,EAAAA,MAAAA;EAAW;EAAa;EAKjEE,gBAAAA,CAAc,EAAA,OAAA;;;;AAGM;AAc9B;;;;AAQwBA,cARHE,0BAAAA,SAAmCN,sBAAAA,YAAkCI,cAQlEA,CAAAA;EAAc,YAEXH,EAAAA,MAAAA,EAAAA;EAAW,SAAnBM,EAAAA,MAAAA;EAAO,MACuBC,EARrCV,SAQqCU;EAAM,UAAoBD,EAP3DV,GAAAA,CAAIQ,UAOuDE;EAAO,WAC1DN,EAAAA,MAAAA;EAAW,QAAaO,EAAAA,MAAAA;EAAM,gBAAoBD,EAAAA,OAAAA;EAAO,WAClCC,CAAAA,MAAAA,EALvBJ,cAKuBI;EAAM,QAAoBD,SAAAA;EAAO,WACnEA,CAAAA,CAAAA,EAJMA,OAINA,CAJcN,WAIdM,EAAAA,CAAAA;EAAO,gBAdoCP,CAAAA,OAAAA,EAAAA,MAAAA,EAAAA,QAAAA,CAAAA,EAWPQ,MAXOR,CAAAA,MAAAA,EAAAA,OAAAA,CAAAA,CAAAA,EAWmBO,OAXnBP,CAAAA,IAAAA,CAAAA;EAAsB,UAAYI,CAAAA,OAAAA,EAYlEH,WAZkEG,EAAAA,QAAAA,CAAAA,EAY1CI,MAZ0CJ,CAAAA,MAAAA,EAAAA,OAAAA,CAAAA,CAAAA,EAYhBG,OAZgBH,CAAAA,IAAAA,CAAAA;EAAc,cAAA,CAAA,OAAA,EAAA,MAAA,EAAA,QAAA,CAAA,EAazDI,MAbyD,CAAA,MAAA,EAAA,OAAA,CAAA,CAAA,EAa/BD,OAb+B,CAAA,IAAA,CAAA;WAc3FA"}