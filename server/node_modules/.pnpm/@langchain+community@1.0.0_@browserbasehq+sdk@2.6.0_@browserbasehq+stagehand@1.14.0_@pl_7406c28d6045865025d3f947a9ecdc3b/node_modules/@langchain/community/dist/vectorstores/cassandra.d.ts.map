{"version":3,"file":"cassandra.d.ts","names":["EmbeddingsInterface","VectorStore","MaxMarginalRelevanceSearchOptions","Document","CassandraClientArgs","Column","WhereClause","CassandraTableArgs","CassandraTable","SupportedVectorTypes","CassandraLibArgs","Omit","CassandraStore","Promise"],"sources":["../../src/vectorstores/cassandra.d.ts"],"sourcesContent":["import type { EmbeddingsInterface } from \"@langchain/core/embeddings\";\nimport { VectorStore, MaxMarginalRelevanceSearchOptions } from \"@langchain/core/vectorstores\";\nimport { Document } from \"@langchain/core/documents\";\nimport { CassandraClientArgs, Column, WhereClause, CassandraTableArgs, CassandraTable } from \"../utils/cassandra.js\";\nexport type SupportedVectorTypes = \"cosine\" | \"dot_product\" | \"euclidean\";\nexport interface CassandraLibArgs extends CassandraClientArgs, Omit<CassandraTableArgs, \"nonKeyColumns\" | \"keyspace\"> {\n    // keyspace is optional on CassandraClientArgs, but mandatory on CassandraTableArgs; we make it mandatory here\n    keyspace: string;\n    vectorType?: SupportedVectorTypes;\n    dimensions: number;\n    metadataColumns?: Column[];\n    nonKeyColumns?: Column | Column[];\n}\n/**\n * Class for interacting with the Cassandra database. It extends the\n * VectorStore class and provides methods for adding vectors and\n * documents, searching for similar vectors, and creating instances from\n * texts or documents.\n */\nexport declare class CassandraStore extends VectorStore {\n    FilterType: WhereClause;\n    private readonly table;\n    private readonly idColumnAutoName = \"id\";\n    private readonly idColumnAutoGenerated;\n    private readonly vectorColumnName = \"vector\";\n    private readonly vectorColumn;\n    private readonly textColumnName = \"text\";\n    private readonly textColumn;\n    private readonly metadataColumnDefaultName = \"metadata\";\n    private readonly metadataColumns;\n    private readonly similarityColumn;\n    private readonly embeddingColumnAlias = \"embedding\";\n    _vectorstoreType(): string;\n    private _cleanArgs;\n    private _getColumnByName;\n    constructor(embeddings: EmbeddingsInterface, args: CassandraLibArgs);\n    /**\n     * Method to save vectors to the Cassandra database.\n     * @param vectors Vectors to save.\n     * @param documents The documents associated with the vectors.\n     * @returns Promise that resolves when the vectors have been added.\n     */\n    addVectors(vectors: number[][], documents: Document[]): Promise<void>;\n    getCassandraTable(): CassandraTable;\n    /**\n     * Method to add documents to the Cassandra database.\n     * @param documents The documents to add.\n     * @returns Promise that resolves when the documents have been added.\n     */\n    addDocuments(documents: Document[]): Promise<void>;\n    /**\n     * Helper method to search for vectors that are similar to a given query vector.\n     * @param query The query vector.\n     * @param k The number of similar Documents to return.\n     * @param filter Optional filter to be applied as a WHERE clause.\n     * @param includeEmbedding Whether to include the embedding vectors in the results.\n     * @returns Promise that resolves with an array of tuples, each containing a Document and a score.\n     */\n    search(query: number[], k: number, filter?: WhereClause, includeEmbedding?: boolean): Promise<[Document, number][]>;\n    /**\n     * Method to search for vectors that are similar to a given query vector.\n     * @param query The query vector.\n     * @param k The number of similar Documents to return.\n     * @param filter Optional filter to be applied as a WHERE clause.\n     * @returns Promise that resolves with an array of tuples, each containing a Document and a score.\n     */\n    similaritySearchVectorWithScore(query: number[], k: number, filter?: WhereClause): Promise<[Document, number][]>;\n    /**\n     * Method to search for vectors that are similar to a given query vector, but with\n     * the results selected using the maximal marginal relevance.\n     * @param query The query string.\n     * @param options.k The number of similar Documents to return.\n     * @param options.fetchK=4*k The number of records to fetch before passing to the MMR algorithm.\n     * @param options.lambda=0.5 The degree of diversity among the results between 0 (maximum diversity) and 1 (minimum diversity).\n     * @param options.filter Optional filter to be applied as a WHERE clause.\n     * @returns List of documents selected by maximal marginal relevance.\n     */\n    maxMarginalRelevanceSearch(query: string, options: MaxMarginalRelevanceSearchOptions<this[\"FilterType\"]>): Promise<Document[]>;\n    /**\n     * Static method to create an instance of CassandraStore from texts.\n     * @param texts The texts to use.\n     * @param metadatas The metadata associated with the texts.\n     * @param embeddings The embeddings to use.\n     * @param args The arguments for the CassandraStore.\n     * @returns Promise that resolves with a new instance of CassandraStore.\n     */\n    static fromTexts(texts: string[], metadatas: object | object[], embeddings: EmbeddingsInterface, args: CassandraLibArgs): Promise<CassandraStore>;\n    /**\n     * Static method to create an instance of CassandraStore from documents.\n     * @param docs The documents to use.\n     * @param embeddings The embeddings to use.\n     * @param args The arguments for the CassandraStore.\n     * @returns Promise that resolves with a new instance of CassandraStore.\n     */\n    static fromDocuments(docs: Document[], embeddings: EmbeddingsInterface, args: CassandraLibArgs): Promise<CassandraStore>;\n    /**\n     * Static method to create an instance of CassandraStore from an existing\n     * index.\n     * @param embeddings The embeddings to use.\n     * @param args The arguments for the CassandraStore.\n     * @returns Promise that resolves with a new instance of CassandraStore.\n     */\n    static fromExistingIndex(embeddings: EmbeddingsInterface, args: CassandraLibArgs): Promise<CassandraStore>;\n}\n"],"mappings":";;;;;;;;;KAIYS,oBAAAA;UACKC,gBAAAA,SAAyBN,qBAAqBO,KAAKJ;;;eAGnDE;;oBAEKJ;kBACFA,SAASA;;AAP7B;AACA;;;;;AAMoBA,cAQCO,cAAAA,SAAuBX,WAAAA,CARxBI;EAAM,UAAGA,EASbC,WATaD;EAAM,iBANOD,KAAAA;EAAmB,iBAAEO,gBAAAA,GAAAA,IAAAA;EAAI,iBAAA,qBAAA;EAc9CC,iBAAc,gBAAA,GAAA,QAAA;EAAA,iBAAA,YAAA;EAAA,iBACnBN,cAAAA,GAAAA,MAAAA;EAAW,iBAeCN,UAAAA;EAAmB,iBAAQU,yBAAAA,GAAAA,UAAAA;EAAgB,iBAOxBP,eAAAA;EAAQ,iBAAKU,gBAAAA;EAAO,iBAC1CL,oBAAAA,GAAAA,WAAAA;EAAc,gBAMXL,CAAAA,CAAAA,EAAAA,MAAAA;EAAQ,QAAKU,UAAAA;EAAO,QASAP,gBAAAA;EAAW,WAAwCH,CAAAA,UAAAA,EAvBvEH,mBAuBuEG,EAAAA,IAAAA,EAvB5CO,gBAuB4CP;EAAQ;;;;;;EAmBoB,UAAhBU,CAAAA,OAAAA,EAAAA,MAAAA,EAAAA,EAAAA,EAAAA,SAAAA,EAnChEV,QAmCgEU,EAAAA,CAAAA,EAnCnDA,OAmCmDA,CAAAA,IAAAA,CAAAA;EAAO,iBAStCb,CAAAA,CAAAA,EA3CvDQ,cA2CuDR;EAAmB;;;;;EAQzB,YAAQU,CAAAA,SAAAA,EA7CtDP,QA6CsDO,EAAAA,CAAAA,EA7CzCG,OA6CyCH,CAAAA,IAAAA,CAAAA;EAAgB;;;;;;;AA3E3C;8CAuCPJ,0CAA0CO,SAASV;;;;;;;;uEAQ1BG,cAAcO,SAASV;;;;;;;;;;;qDAWzCD,wDAAwDW,QAAQV;;;;;;;;;8EASvCH,2BAA2BU,mBAAmBG,QAAQD;;;;;;;;6BAQvGT,wBAAwBH,2BAA2BU,mBAAmBG,QAAQD;;;;;;;;uCAQpEZ,2BAA2BU,mBAAmBG,QAAQD"}