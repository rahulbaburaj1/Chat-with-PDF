{"version":3,"file":"agent_executor.d.ts","names":["BaseLanguageModelInterface","ChainValues","Tool","DynamicStructuredTool","CallbackManagerForChainRun","BaseChain","ChainInputs","BasePlanner","BaseStepContainer","BaseStepExecutor","LLMPlanner","ChainStepExecutor","SerializedLLMChain","isDynamicStructuredTool","PlanAndExecuteAgentExecutorInput","PlanAndExecuteAgentExecutor","llm","tools","Promise","humanMessageTemplate","Omit"],"sources":["../../../src/experimental/plan_and_execute/agent_executor.d.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport { ChainValues } from \"@langchain/core/utils/types\";\nimport { Tool, DynamicStructuredTool } from \"@langchain/core/tools\";\nimport { CallbackManagerForChainRun } from \"@langchain/core/callbacks/manager\";\nimport { BaseChain, ChainInputs } from \"../../chains/base.js\";\nimport { BasePlanner, BaseStepContainer, BaseStepExecutor, LLMPlanner, ChainStepExecutor } from \"./base.js\";\nimport { SerializedLLMChain } from \"../../chains/serde.js\";\n/**\n * A utility function to distiguish a dynamicstructuredtool over other tools.\n * @param tool the tool to test\n * @returns bool\n */\nexport declare function isDynamicStructuredTool(tool: Tool | DynamicStructuredTool): tool is DynamicStructuredTool;\n/**\n * Interface for the input to the PlanAndExecuteAgentExecutor class. It\n * extends ChainInputs and includes additional properties for the planner,\n * step executor, step container, and input and output keys.\n */\nexport interface PlanAndExecuteAgentExecutorInput extends ChainInputs {\n    planner: BasePlanner;\n    stepExecutor: BaseStepExecutor;\n    stepContainer?: BaseStepContainer;\n    inputKey?: string;\n    outputKey?: string;\n}\n/**\n * Class representing a plan-and-execute agent executor. This agent\n * decides on the full sequence of actions upfront, then executes them all\n * without updating the plan. This is suitable for complex or long-running\n * tasks that require maintaining long-term objectives and focus.\n */\nexport declare class PlanAndExecuteAgentExecutor extends BaseChain {\n    static lc_name(): string;\n    private planner;\n    private stepExecutor;\n    private stepContainer;\n    private inputKey;\n    private outputKey;\n    constructor(input: PlanAndExecuteAgentExecutorInput);\n    get inputKeys(): string[];\n    get outputKeys(): string[];\n    /**\n     * Static method that returns a default planner for the agent. It creates\n     * a new LLMChain with a given LLM and a fixed prompt, and uses it to\n     * create a new LLMPlanner with a PlanOutputParser.\n     * @param llm The Large Language Model (LLM) used to generate responses.\n     * @returns A new LLMPlanner instance.\n     */\n    static getDefaultPlanner({ llm, tools }: {\n        llm: BaseLanguageModelInterface;\n        tools: Tool[] | DynamicStructuredTool[];\n    }): Promise<LLMPlanner>;\n    /**\n     * Static method that returns a default step executor for the agent. It\n     * creates a new ChatAgent from a given LLM and a set of tools, and uses\n     * it to create a new ChainStepExecutor.\n     * @param llm The Large Language Model (LLM) used to generate responses.\n     * @param tools The set of tools used by the agent.\n     * @param humanMessageTemplate The template for human messages. If not provided, a default template is used.\n     * @returns A new ChainStepExecutor instance.\n     */\n    static getDefaultStepExecutor({ llm, tools, humanMessageTemplate }: {\n        llm: BaseLanguageModelInterface;\n        tools: Tool[] | DynamicStructuredTool[];\n        humanMessageTemplate?: string;\n    }): ChainStepExecutor;\n    /**\n     * Static method that creates a new PlanAndExecuteAgentExecutor from a\n     * given LLM, a set of tools, and optionally a human message template. It\n     * uses the getDefaultPlanner and getDefaultStepExecutor methods to create\n     * the planner and step executor for the new agent executor.\n     * @param llm The Large Language Model (LLM) used to generate responses.\n     * @param tools The set of tools used by the agent.\n     * @param humanMessageTemplate The template for human messages. If not provided, a default template is used.\n     * @returns A new PlanAndExecuteAgentExecutor instance.\n     */\n    static fromLLMAndTools({ llm, tools, humanMessageTemplate }: {\n        llm: BaseLanguageModelInterface;\n        tools: Tool[] | DynamicStructuredTool[];\n        humanMessageTemplate?: string;\n    } & Omit<PlanAndExecuteAgentExecutorInput, \"planner\" | \"stepExecutor\">): Promise<PlanAndExecuteAgentExecutor>;\n    /** @ignore */\n    _call(inputs: ChainValues, runManager?: CallbackManagerForChainRun): Promise<ChainValues>;\n    _chainType(): \"agent_executor\";\n    serialize(): SerializedLLMChain;\n}\n"],"mappings":";;;;;;;;;;;;AAkBqE;AAarE;;AAOuBc,UApBNA,gCAAAA,SAAyCR,WAoBnCQ,CAAAA;EAAgC,OAUxBE,EA7BlBT,WA6BkBS;EAAG,YAAEC,EA5BlBR,gBA4BkBQ;EAAK,aAC5BjB,CAAAA,EA5BOQ,iBA4BPR;EAA0B,QACxBE,CAAAA,EAAAA,MAAAA;EAAI,SAAKC,CAAAA,EAAAA,MAAAA;;;;;;;;AAaAA,cAhCHY,2BAAAA,SAAoCV,SAAAA,CAgCjCF;EAAqB,OAErCQ,OAAAA,CAAAA,CAAAA,EAAAA,MAAAA;EAAiB,QAWIK,OAAAA;EAAG,QAAEC,YAAAA;EAAK,QAAEE,aAAAA;EAAoB,QAChDnB,QAAAA;EAA0B,QACxBE,SAAAA;EAAI,WAAKC,CAAAA,KAAAA,EAxCDW,gCAwCCX;EAAqB,IAEhCW,SAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA;EAAgC,IAArCM,UAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA;EAAI;;;;;;;EAIuB,OArDsBf,iBAAAA,CAAAA;IAAAA,GAAAA;IAAAA;GAAAA,EAAAA;IAAS,GAAA,EAkBrDL,0BAlBqD;WAmBnDE,SAASC;MAChBe,QAAQR;;;;;;;;;;;;;;;SAWHV;WACEE,SAASC;;MAEhBQ;;;;;;;;;;;;;;;;SAYKX;WACEE,SAASC;;MAEhBiB,KAAKN,gEAAgEI,QAAQH;;gBAEnEd,0BAA0BG,6BAA6Bc,QAAQjB;;eAEhEW"}