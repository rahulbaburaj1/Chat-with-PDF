{"version":3,"file":"translator.js","names":[],"sources":["../../../../../../../../../../../node_modules/.pnpm/langsmith@0.3.74_@opentelemetry+api@1.9.0_openai@5.12.2_ws@8.18.3_bufferutil@4.0.9_utf-8-validate@6.0.5__zod@3.25.76_/node_modules/langsmith/dist/experimental/otel/translator.js"],"sourcesContent":["import * as constants from \"./constants.js\";\nimport { getOTELTrace } from \"../../singletons/otel.js\";\nconst WELL_KNOWN_OPERATION_NAMES = {\n    llm: \"chat\",\n    tool: \"execute_tool\",\n    retriever: \"embeddings\",\n    embedding: \"embeddings\",\n    prompt: \"chat\",\n};\nfunction getOperationName(runType) {\n    return WELL_KNOWN_OPERATION_NAMES[runType] || runType;\n}\nexport class LangSmithToOTELTranslator {\n    constructor() {\n        Object.defineProperty(this, \"spans\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n    }\n    exportBatch(operations, otelContextMap) {\n        for (const op of operations) {\n            try {\n                if (!op.run) {\n                    continue;\n                }\n                if (op.operation === \"post\") {\n                    const span = this.createSpanForRun(op, op.run, otelContextMap.get(op.id));\n                    if (span && !op.run.end_time) {\n                        this.spans.set(op.id, span);\n                    }\n                }\n                else {\n                    this.updateSpanForRun(op, op.run);\n                }\n            }\n            catch (e) {\n                console.error(`Error processing operation ${op.id}:`, e);\n            }\n        }\n    }\n    createSpanForRun(op, runInfo, otelContext) {\n        const activeSpan = otelContext && getOTELTrace().getSpan(otelContext);\n        if (!activeSpan) {\n            return;\n        }\n        try {\n            return this.finishSpanSetup(activeSpan, runInfo, op);\n        }\n        catch (e) {\n            console.error(`Failed to create span for run ${op.id}:`, e);\n            return undefined;\n        }\n    }\n    finishSpanSetup(span, runInfo, op) {\n        // Set all attributes\n        this.setSpanAttributes(span, runInfo, op);\n        // Set status based on error\n        if (runInfo.error) {\n            span.setStatus({ code: 2 }); // ERROR status\n            span.recordException(new Error(runInfo.error));\n        }\n        else {\n            span.setStatus({ code: 1 }); // OK status\n        }\n        // End the span if end_time is present\n        if (runInfo.end_time) {\n            span.end(new Date(runInfo.end_time));\n        }\n        return span;\n    }\n    updateSpanForRun(op, runInfo) {\n        try {\n            const span = this.spans.get(op.id);\n            if (!span) {\n                console.debug(`No span found for run ${op.id} during update`);\n                return;\n            }\n            // Update attributes\n            this.setSpanAttributes(span, runInfo, op);\n            // Update status based on error\n            if (runInfo.error) {\n                span.setStatus({ code: 2 }); // ERROR status\n                span.recordException(new Error(runInfo.error));\n            }\n            else {\n                span.setStatus({ code: 1 }); // OK status\n            }\n            // End the span if end_time is present\n            const endTime = runInfo.end_time;\n            if (endTime) {\n                span.end(new Date(endTime));\n                this.spans.delete(op.id);\n            }\n        }\n        catch (e) {\n            console.error(`Failed to update span for run ${op.id}:`, e);\n        }\n    }\n    extractModelName(runInfo) {\n        // Try to get model name from metadata\n        if (runInfo.extra?.metadata) {\n            const metadata = runInfo.extra.metadata;\n            // First check for ls_model_name in metadata\n            if (metadata.ls_model_name) {\n                return metadata.ls_model_name;\n            }\n            // Then check invocation_params for model info\n            if (metadata.invocation_params) {\n                const invocationParams = metadata.invocation_params;\n                if (invocationParams.model) {\n                    return invocationParams.model;\n                }\n                else if (invocationParams.model_name) {\n                    return invocationParams.model_name;\n                }\n            }\n        }\n        return;\n    }\n    setSpanAttributes(span, runInfo, op) {\n        if (\"run_type\" in runInfo && runInfo.run_type) {\n            span.setAttribute(constants.LANGSMITH_RUN_TYPE, runInfo.run_type);\n            // Set GenAI attributes according to OTEL semantic conventions\n            const operationName = getOperationName(runInfo.run_type || \"chain\");\n            span.setAttribute(constants.GEN_AI_OPERATION_NAME, operationName);\n        }\n        if (\"name\" in runInfo && runInfo.name) {\n            span.setAttribute(constants.LANGSMITH_NAME, runInfo.name);\n        }\n        if (\"session_id\" in runInfo && runInfo.session_id) {\n            span.setAttribute(constants.LANGSMITH_SESSION_ID, runInfo.session_id);\n        }\n        if (\"session_name\" in runInfo && runInfo.session_name) {\n            span.setAttribute(constants.LANGSMITH_SESSION_NAME, runInfo.session_name);\n        }\n        // Set gen_ai.system\n        this.setGenAiSystem(span, runInfo);\n        // Set model name if available\n        const modelName = this.extractModelName(runInfo);\n        if (modelName) {\n            span.setAttribute(constants.GEN_AI_REQUEST_MODEL, modelName);\n        }\n        // Set token usage information\n        if (\"prompt_tokens\" in runInfo &&\n            typeof runInfo.prompt_tokens === \"number\") {\n            span.setAttribute(constants.GEN_AI_USAGE_INPUT_TOKENS, runInfo.prompt_tokens);\n        }\n        if (\"completion_tokens\" in runInfo &&\n            typeof runInfo.completion_tokens === \"number\") {\n            span.setAttribute(constants.GEN_AI_USAGE_OUTPUT_TOKENS, runInfo.completion_tokens);\n        }\n        if (\"total_tokens\" in runInfo && typeof runInfo.total_tokens === \"number\") {\n            span.setAttribute(constants.GEN_AI_USAGE_TOTAL_TOKENS, runInfo.total_tokens);\n        }\n        // Set other parameters from invocation_params\n        this.setInvocationParameters(span, runInfo);\n        // Set metadata and tags if available\n        const metadata = runInfo.extra?.metadata || {};\n        for (const [key, value] of Object.entries(metadata)) {\n            if (value !== null && value !== undefined) {\n                span.setAttribute(`${constants.LANGSMITH_METADATA}.${key}`, String(value));\n            }\n        }\n        const tags = runInfo.tags;\n        if (tags && Array.isArray(tags)) {\n            span.setAttribute(constants.LANGSMITH_TAGS, tags.join(\", \"));\n        }\n        else if (tags) {\n            span.setAttribute(constants.LANGSMITH_TAGS, String(tags));\n        }\n        // Support additional serialized attributes, if present\n        if (\"serialized\" in runInfo && typeof runInfo.serialized === \"object\") {\n            const serialized = runInfo.serialized;\n            if (serialized.name) {\n                span.setAttribute(constants.GEN_AI_SERIALIZED_NAME, String(serialized.name));\n            }\n            if (serialized.signature) {\n                span.setAttribute(constants.GEN_AI_SERIALIZED_SIGNATURE, String(serialized.signature));\n            }\n            if (serialized.doc) {\n                span.setAttribute(constants.GEN_AI_SERIALIZED_DOC, String(serialized.doc));\n            }\n        }\n        // Set inputs/outputs if available\n        this.setIOAttributes(span, op);\n    }\n    setGenAiSystem(span, runInfo) {\n        // Default to \"langchain\" if we can't determine the system\n        let system = \"langchain\";\n        // Extract model name to determine the system\n        const modelName = this.extractModelName(runInfo);\n        if (modelName) {\n            const modelLower = modelName.toLowerCase();\n            if (modelLower.includes(\"anthropic\") || modelLower.startsWith(\"claude\")) {\n                system = \"anthropic\";\n            }\n            else if (modelLower.includes(\"bedrock\")) {\n                system = \"aws.bedrock\";\n            }\n            else if (modelLower.includes(\"azure\") &&\n                modelLower.includes(\"openai\")) {\n                system = \"az.ai.openai\";\n            }\n            else if (modelLower.includes(\"azure\") &&\n                modelLower.includes(\"inference\")) {\n                system = \"az.ai.inference\";\n            }\n            else if (modelLower.includes(\"cohere\")) {\n                system = \"cohere\";\n            }\n            else if (modelLower.includes(\"deepseek\")) {\n                system = \"deepseek\";\n            }\n            else if (modelLower.includes(\"gemini\")) {\n                system = \"gemini\";\n            }\n            else if (modelLower.includes(\"groq\")) {\n                system = \"groq\";\n            }\n            else if (modelLower.includes(\"watson\") || modelLower.includes(\"ibm\")) {\n                system = \"ibm.watsonx.ai\";\n            }\n            else if (modelLower.includes(\"mistral\")) {\n                system = \"mistral_ai\";\n            }\n            else if (modelLower.includes(\"gpt\") || modelLower.includes(\"openai\")) {\n                system = \"openai\";\n            }\n            else if (modelLower.includes(\"perplexity\") ||\n                modelLower.includes(\"sonar\")) {\n                system = \"perplexity\";\n            }\n            else if (modelLower.includes(\"vertex\")) {\n                system = \"vertex_ai\";\n            }\n            else if (modelLower.includes(\"xai\") || modelLower.includes(\"grok\")) {\n                system = \"xai\";\n            }\n        }\n        span.setAttribute(constants.GEN_AI_SYSTEM, system);\n    }\n    setInvocationParameters(span, runInfo) {\n        if (!runInfo.extra?.metadata?.invocation_params) {\n            return;\n        }\n        const invocationParams = runInfo.extra.metadata.invocation_params;\n        // Set relevant invocation parameters\n        if (invocationParams.max_tokens !== undefined) {\n            span.setAttribute(constants.GEN_AI_REQUEST_MAX_TOKENS, invocationParams.max_tokens);\n        }\n        if (invocationParams.temperature !== undefined) {\n            span.setAttribute(constants.GEN_AI_REQUEST_TEMPERATURE, invocationParams.temperature);\n        }\n        if (invocationParams.top_p !== undefined) {\n            span.setAttribute(constants.GEN_AI_REQUEST_TOP_P, invocationParams.top_p);\n        }\n        if (invocationParams.frequency_penalty !== undefined) {\n            span.setAttribute(constants.GEN_AI_REQUEST_FREQUENCY_PENALTY, invocationParams.frequency_penalty);\n        }\n        if (invocationParams.presence_penalty !== undefined) {\n            span.setAttribute(constants.GEN_AI_REQUEST_PRESENCE_PENALTY, invocationParams.presence_penalty);\n        }\n    }\n    setIOAttributes(span, op) {\n        if (op.run.inputs) {\n            try {\n                const inputs = op.run.inputs;\n                if (typeof inputs === \"object\" && inputs !== null) {\n                    if (inputs.model && Array.isArray(inputs.messages)) {\n                        span.setAttribute(constants.GEN_AI_REQUEST_MODEL, inputs.model);\n                    }\n                    // Set additional request attributes if available\n                    if (inputs.stream !== undefined) {\n                        span.setAttribute(constants.LANGSMITH_REQUEST_STREAMING, inputs.stream);\n                    }\n                    if (inputs.extra_headers) {\n                        span.setAttribute(constants.LANGSMITH_REQUEST_HEADERS, JSON.stringify(inputs.extra_headers));\n                    }\n                    if (inputs.extra_query) {\n                        span.setAttribute(constants.GEN_AI_REQUEST_EXTRA_QUERY, JSON.stringify(inputs.extra_query));\n                    }\n                    if (inputs.extra_body) {\n                        span.setAttribute(constants.GEN_AI_REQUEST_EXTRA_BODY, JSON.stringify(inputs.extra_body));\n                    }\n                }\n                span.setAttribute(constants.GENAI_PROMPT, JSON.stringify(inputs));\n            }\n            catch (e) {\n                console.debug(`Failed to process inputs for run ${op.id}`, e);\n            }\n        }\n        if (op.run.outputs) {\n            try {\n                const outputs = op.run.outputs;\n                // Extract token usage from outputs (for LLM runs)\n                const tokenUsage = this.getUnifiedRunTokens(outputs);\n                if (tokenUsage) {\n                    span.setAttribute(constants.GEN_AI_USAGE_INPUT_TOKENS, tokenUsage[0]);\n                    span.setAttribute(constants.GEN_AI_USAGE_OUTPUT_TOKENS, tokenUsage[1]);\n                    span.setAttribute(constants.GEN_AI_USAGE_TOTAL_TOKENS, tokenUsage[0] + tokenUsage[1]);\n                }\n                if (outputs && typeof outputs === \"object\") {\n                    if (outputs.model) {\n                        span.setAttribute(constants.GEN_AI_RESPONSE_MODEL, String(outputs.model));\n                    }\n                    // Extract additional response attributes\n                    if (outputs.id) {\n                        span.setAttribute(constants.GEN_AI_RESPONSE_ID, outputs.id);\n                    }\n                    if (outputs.choices && Array.isArray(outputs.choices)) {\n                        const finishReasons = outputs.choices\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            .map((choice) => choice.finish_reason)\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            .filter((reason) => reason)\n                            .map(String);\n                        if (finishReasons.length > 0) {\n                            span.setAttribute(constants.GEN_AI_RESPONSE_FINISH_REASONS, finishReasons.join(\", \"));\n                        }\n                    }\n                    if (outputs.service_tier) {\n                        span.setAttribute(constants.GEN_AI_RESPONSE_SERVICE_TIER, outputs.service_tier);\n                    }\n                    if (outputs.system_fingerprint) {\n                        span.setAttribute(constants.GEN_AI_RESPONSE_SYSTEM_FINGERPRINT, outputs.system_fingerprint);\n                    }\n                    if (outputs.usage_metadata &&\n                        typeof outputs.usage_metadata === \"object\") {\n                        const usageMetadata = outputs.usage_metadata;\n                        if (usageMetadata.input_token_details) {\n                            span.setAttribute(constants.GEN_AI_USAGE_INPUT_TOKEN_DETAILS, JSON.stringify(usageMetadata.input_token_details));\n                        }\n                        if (usageMetadata.output_token_details) {\n                            span.setAttribute(constants.GEN_AI_USAGE_OUTPUT_TOKEN_DETAILS, JSON.stringify(usageMetadata.output_token_details));\n                        }\n                    }\n                }\n                span.setAttribute(constants.GENAI_COMPLETION, JSON.stringify(outputs));\n            }\n            catch (e) {\n                console.debug(`Failed to process outputs for run ${op.id}`, e);\n            }\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    getUnifiedRunTokens(outputs) {\n        if (!outputs) {\n            return null;\n        }\n        // Search in non-generations lists\n        let tokenUsage = this.extractUnifiedRunTokens(outputs.usage_metadata);\n        if (tokenUsage) {\n            return tokenUsage;\n        }\n        // Find if direct kwarg in outputs\n        const keys = Object.keys(outputs);\n        for (const key of keys) {\n            const haystack = outputs[key];\n            if (!haystack || typeof haystack !== \"object\") {\n                continue;\n            }\n            tokenUsage = this.extractUnifiedRunTokens(haystack.usage_metadata);\n            if (tokenUsage) {\n                return tokenUsage;\n            }\n            if (haystack.lc === 1 &&\n                haystack.kwargs &&\n                typeof haystack.kwargs === \"object\") {\n                tokenUsage = this.extractUnifiedRunTokens(haystack.kwargs.usage_metadata);\n                if (tokenUsage) {\n                    return tokenUsage;\n                }\n            }\n        }\n        // Find in generations\n        const generations = outputs.generations || [];\n        if (!Array.isArray(generations)) {\n            return null;\n        }\n        const flatGenerations = Array.isArray(generations[0])\n            ? generations.flat()\n            : generations;\n        for (const generation of flatGenerations) {\n            if (typeof generation === \"object\" &&\n                generation.message &&\n                typeof generation.message === \"object\" &&\n                generation.message.kwargs &&\n                typeof generation.message.kwargs === \"object\") {\n                tokenUsage = this.extractUnifiedRunTokens(generation.message.kwargs.usage_metadata);\n                if (tokenUsage) {\n                    return tokenUsage;\n                }\n            }\n        }\n        return null;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    extractUnifiedRunTokens(outputs) {\n        if (!outputs || typeof outputs !== \"object\") {\n            return null;\n        }\n        if (typeof outputs.input_tokens !== \"number\" ||\n            typeof outputs.output_tokens !== \"number\") {\n            return null;\n        }\n        return [outputs.input_tokens, outputs.output_tokens];\n    }\n}\n"],"x_google_ignoreList":[0],"mappings":"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"}