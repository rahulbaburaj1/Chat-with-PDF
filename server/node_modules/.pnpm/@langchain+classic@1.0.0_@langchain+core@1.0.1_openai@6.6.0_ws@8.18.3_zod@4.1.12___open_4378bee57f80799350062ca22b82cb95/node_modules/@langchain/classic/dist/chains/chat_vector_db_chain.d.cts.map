{"version":3,"file":"chat_vector_db_chain.d.cts","names":["BaseLanguageModelInterface","VectorStoreInterface","ChainValues","CallbackManagerForChainRun","SerializedChatVectorDBQAChain","BaseChain","ChainInputs","LLMChain","LoadValues","Record","ChatVectorDBQAChainInput","ChatVectorDBQAChain","Promise"],"sources":["../../src/chains/chat_vector_db_chain.d.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport type { VectorStoreInterface } from \"@langchain/core/vectorstores\";\nimport { ChainValues } from \"@langchain/core/utils/types\";\nimport { CallbackManagerForChainRun } from \"@langchain/core/callbacks/manager\";\nimport { SerializedChatVectorDBQAChain } from \"./serde.js\";\nimport { BaseChain, ChainInputs } from \"./base.js\";\nimport { LLMChain } from \"./llm_chain.js\";\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type LoadValues = Record<string, any>;\n/**\n * Interface for the input parameters of the ChatVectorDBQAChain class.\n */\nexport interface ChatVectorDBQAChainInput extends ChainInputs {\n    vectorstore: VectorStoreInterface;\n    combineDocumentsChain: BaseChain;\n    questionGeneratorChain: LLMChain;\n    returnSourceDocuments?: boolean;\n    outputKey?: string;\n    inputKey?: string;\n    k?: number;\n}\n/** @deprecated use `ConversationalRetrievalQAChain` instead. */\nexport declare class ChatVectorDBQAChain extends BaseChain implements ChatVectorDBQAChainInput {\n    k: number;\n    inputKey: string;\n    chatHistoryKey: string;\n    get inputKeys(): string[];\n    outputKey: string;\n    get outputKeys(): string[];\n    vectorstore: VectorStoreInterface;\n    combineDocumentsChain: BaseChain;\n    questionGeneratorChain: LLMChain;\n    returnSourceDocuments: boolean;\n    constructor(fields: ChatVectorDBQAChainInput);\n    /** @ignore */\n    _call(values: ChainValues, runManager?: CallbackManagerForChainRun): Promise<ChainValues>;\n    _chainType(): \"chat-vector-db\";\n    static deserialize(data: SerializedChatVectorDBQAChain, values: LoadValues): Promise<ChatVectorDBQAChain>;\n    serialize(): SerializedChatVectorDBQAChain;\n    /**\n     * Creates an instance of ChatVectorDBQAChain using a BaseLanguageModel\n     * and other options.\n     * @param llm Instance of BaseLanguageModel used to generate a new question.\n     * @param vectorstore Instance of VectorStore used for vector operations.\n     * @param options (Optional) Additional options for creating the ChatVectorDBQAChain instance.\n     * @returns New instance of ChatVectorDBQAChain.\n     */\n    static fromLLM(llm: BaseLanguageModelInterface, vectorstore: VectorStoreInterface, options?: {\n        inputKey?: string;\n        outputKey?: string;\n        k?: number;\n        returnSourceDocuments?: boolean;\n        questionGeneratorTemplate?: string;\n        qaTemplate?: string;\n        verbose?: boolean;\n    }): ChatVectorDBQAChain;\n}\n"],"mappings":";;;;;;;;;;KAQYQ,UAAAA,GAAaC;AAAzB;AAIA;;AACiBR,UADAS,wBAAAA,SAAiCJ,WACjCL,CAAAA;EAAoB,WACVI,EADVJ,oBACUI;EAAS,qBACRE,EADDF,SACCE;EAAQ,sBAHcD,EAGtBC,QAHsBD;EAAW,qBAAA,CAAA,EAAA,OAAA;EAUxCK,SAAAA,CAAAA,EAAAA,MAAAA;EAAmB,QAAA,CAAA,EAAA,MAAA;EAAA,CAAA,CAAA,EAOvBV,MAAAA;;;AAIOS,cAXHC,mBAAAA,SAA4BN,SAAAA,YAAqBK,wBAW9CA,CAAAA;EAAwB,CAAA,EAE9BR,MAAAA;EAAW,QAAeC,EAAAA,MAAAA;EAA0B,cAAWD,EAAAA,MAAAA;EAAW,IAAnBU,SAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA;EAAO,SAEnDR,EAAAA,MAAAA;EAA6B,IAAUI,UAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA;EAAU,WAAWG,EARxEV,oBAQwEU;EAAmB,qBAA3BC,EAPtDP,SAOsDO;EAAO,sBACvER,EAPWG,QAOXH;EAA6B,qBAStBJ,EAAAA,OAAAA;EAA0B,WAAeC,CAAAA,MAAAA,EAdzCS,wBAcyCT;EAAoB;EAQ1D,KAjCsBI,CAAAA,MAAAA,EAa/BH,WAb+BG,EAAAA,UAAAA,CAAAA,EAaLF,0BAbKE,CAAAA,EAawBO,OAbxBP,CAagCH,WAbhCG,CAAAA;EAAS,UAAYK,CAAAA,CAAAA,EAAAA,gBAAAA;EAAwB,OAAA,WAAA,CAAA,IAAA,EAejEN,6BAfiE,EAAA,MAAA,EAe1BI,UAf0B,CAAA,EAebI,OAfa,CAeLD,mBAfK,CAAA;eAgB7EP;;;;;;;;;sBASOJ,yCAAyCC;;;;;;;;MAQzDU"}