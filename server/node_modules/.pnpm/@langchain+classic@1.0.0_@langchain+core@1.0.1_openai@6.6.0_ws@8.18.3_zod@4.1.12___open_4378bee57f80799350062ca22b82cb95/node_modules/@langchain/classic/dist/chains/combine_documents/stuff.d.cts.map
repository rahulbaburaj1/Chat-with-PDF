{"version":3,"file":"stuff.d.cts","names":["LanguageModelLike","BaseOutputParser","BasePromptTemplate","RunnableSequence","createStuffDocumentsChain","llm","prompt","outputParser","documentPrompt","documentSeparator","RunOutput","Record","Error","Exclude","Promise"],"sources":["../../../src/chains/combine_documents/stuff.d.ts"],"sourcesContent":["import { LanguageModelLike } from \"@langchain/core/language_models/base\";\nimport { BaseOutputParser } from \"@langchain/core/output_parsers\";\nimport { BasePromptTemplate } from \"@langchain/core/prompts\";\nimport { RunnableSequence } from \"@langchain/core/runnables\";\n/**\n * Create a chain that passes a list of documents to a model.\n *\n * @param llm Language model to use for responding.\n * @param prompt Prompt template. Must contain input variable \"context\", which will be\n    used for passing in the formatted documents.\n * @param outputParser Output parser. Defaults to `StringOutputParser`.\n * @param documentPrompt Prompt used for formatting each document into a string. Input\n    variables can be \"page_content\" or any metadata keys that are in all documents.\n    \"page_content\" will automatically retrieve the `Document.page_content`, and all\n    other inputs variables will be automatically retrieved from the `Document.metadata` dictionary. Default to a prompt that only contains `Document.page_content`.\n * @param documentSeparator String separator to use between formatted document strings.\n * @returns An LCEL `Runnable` chain.\n    Expects a dictionary as input with a list of `Document`s being passed under\n    the \"context\" key.\n    Return type depends on the `output_parser` used.\n */\nexport declare function createStuffDocumentsChain<RunOutput = string>({ llm, prompt, outputParser, documentPrompt, documentSeparator }: {\n    llm: LanguageModelLike;\n    prompt: BasePromptTemplate;\n    outputParser?: BaseOutputParser<RunOutput>;\n    documentPrompt?: BasePromptTemplate;\n    documentSeparator?: string;\n}): Promise<RunnableSequence<Record<string, unknown>, Exclude<RunOutput, Error>>>;\n"],"mappings":";;;;;;;;;AAqBA;;;;;;;;;;;;;;;AAMsDa,iBAN9BT,yBAM8BS,CAAAA,YAAAA,MAAAA,CAAAA,CAAAA;EAAAA,GAAAA;EAAAA,MAAAA;EAAAA,YAAAA;EAAAA,cAAAA;EAAAA;CAAAA,EAAAA;EAAO,GAAjDV,EALHH,iBAKGG;EAAgB,MAAxBW,EAJQZ,kBAIRY;EAAO,YAAA,CAAA,EAHQb,gBAGR,CAHyBS,SAGzB,CAAA;mBAFUR;;IAEjBY,QAAQX,iBAAiBQ,yBAAyBE,QAAQH,WAAWE"}