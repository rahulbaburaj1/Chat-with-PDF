{"version":3,"file":"in_memory.cjs","names":["Docstore","docs?: Map<string, Document>","search: string","texts: Record<string, Document>","keys: string[]","keyValuePairs: [string, Document][]","_keys: string[]","_prefix?: string"],"sources":["../../../src/stores/doc/in_memory.ts"],"sourcesContent":["import { Document } from \"@langchain/core/documents\";\nimport { BaseStoreInterface } from \"@langchain/core/stores\";\nimport { Docstore } from \"./base.js\";\n\n/**\n * Class for storing and retrieving documents in memory asynchronously.\n * Extends the Docstore class.\n */\nexport class InMemoryDocstore\n  extends Docstore\n  implements BaseStoreInterface<string, Document>\n{\n  _docs: Map<string, Document>;\n\n  constructor(docs?: Map<string, Document>) {\n    super();\n    this._docs = docs ?? new Map();\n  }\n\n  /**\n   * Searches for a document in the store based on its ID.\n   * @param search The ID of the document to search for.\n   * @returns The document with the given ID.\n   */\n  async search(search: string): Promise<Document> {\n    const result = this._docs.get(search);\n    if (!result) {\n      throw new Error(`ID ${search} not found.`);\n    } else {\n      return result;\n    }\n  }\n\n  /**\n   * Adds new documents to the store.\n   * @param texts An object where the keys are document IDs and the values are the documents themselves.\n   * @returns Void\n   */\n  async add(texts: Record<string, Document>): Promise<void> {\n    const keys = [...this._docs.keys()];\n    const overlapping = Object.keys(texts).filter((x) => keys.includes(x));\n\n    if (overlapping.length > 0) {\n      throw new Error(`Tried to add ids that already exist: ${overlapping}`);\n    }\n\n    for (const [key, value] of Object.entries(texts)) {\n      this._docs.set(key, value);\n    }\n  }\n\n  async mget(keys: string[]): Promise<Document[]> {\n    return Promise.all(keys.map((key) => this.search(key)));\n  }\n\n  async mset(keyValuePairs: [string, Document][]): Promise<void> {\n    await Promise.all(\n      keyValuePairs.map(([key, value]) => this.add({ [key]: value }))\n    );\n  }\n\n  async mdelete(_keys: string[]): Promise<void> {\n    throw new Error(\"Not implemented.\");\n  }\n\n  // eslint-disable-next-line require-yield\n  async *yieldKeys(_prefix?: string): AsyncGenerator<string> {\n    throw new Error(\"Not implemented\");\n  }\n}\n\n/**\n * Class for storing and retrieving documents in memory synchronously.\n */\nexport class SynchronousInMemoryDocstore {\n  _docs: Map<string, Document>;\n\n  constructor(docs?: Map<string, Document>) {\n    this._docs = docs ?? new Map();\n  }\n\n  /**\n   * Searches for a document in the store based on its ID.\n   * @param search The ID of the document to search for.\n   * @returns The document with the given ID.\n   */\n  search(search: string): Document {\n    const result = this._docs.get(search);\n    if (!result) {\n      throw new Error(`ID ${search} not found.`);\n    } else {\n      return result;\n    }\n  }\n\n  /**\n   * Adds new documents to the store.\n   * @param texts An object where the keys are document IDs and the values are the documents themselves.\n   * @returns Void\n   */\n  add(texts: Record<string, Document>): void {\n    const keys = [...this._docs.keys()];\n    const overlapping = Object.keys(texts).filter((x) => keys.includes(x));\n\n    if (overlapping.length > 0) {\n      throw new Error(`Tried to add ids that already exist: ${overlapping}`);\n    }\n\n    for (const [key, value] of Object.entries(texts)) {\n      this._docs.set(key, value);\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;AAQA,IAAa,mBAAb,cACUA,iCAEV;CACE;CAEA,YAAYC,MAA8B;EACxC,OAAO;EACP,KAAK,QAAQ,wBAAQ,IAAI;CAC1B;;;;;;CAOD,MAAM,OAAOC,QAAmC;EAC9C,MAAM,SAAS,KAAK,MAAM,IAAI,OAAO;AACrC,MAAI,CAAC,OACH,OAAM,IAAI,MAAM,CAAC,GAAG,EAAE,OAAO,WAAW,CAAC;MAEzC,QAAO;CAEV;;;;;;CAOD,MAAM,IAAIC,OAAgD;EACxD,MAAM,OAAO,CAAC,GAAG,KAAK,MAAM,MAAM,AAAC;EACnC,MAAM,cAAc,OAAO,KAAK,MAAM,CAAC,OAAO,CAAC,MAAM,KAAK,SAAS,EAAE,CAAC;AAEtE,MAAI,YAAY,SAAS,EACvB,OAAM,IAAI,MAAM,CAAC,qCAAqC,EAAE,aAAa;AAGvE,OAAK,MAAM,CAAC,KAAK,MAAM,IAAI,OAAO,QAAQ,MAAM,EAC9C,KAAK,MAAM,IAAI,KAAK,MAAM;CAE7B;CAED,MAAM,KAAKC,MAAqC;AAC9C,SAAO,QAAQ,IAAI,KAAK,IAAI,CAAC,QAAQ,KAAK,OAAO,IAAI,CAAC,CAAC;CACxD;CAED,MAAM,KAAKC,eAAoD;EAC7D,MAAM,QAAQ,IACZ,cAAc,IAAI,CAAC,CAAC,KAAK,MAAM,KAAK,KAAK,IAAI,GAAG,MAAM,MAAO,EAAC,CAAC,CAChE;CACF;CAED,MAAM,QAAQC,OAAgC;AAC5C,QAAM,IAAI,MAAM;CACjB;CAGD,OAAO,UAAUC,SAA0C;AACzD,QAAM,IAAI,MAAM;CACjB;AACF;;;;AAKD,IAAa,8BAAb,MAAyC;CACvC;CAEA,YAAYN,MAA8B;EACxC,KAAK,QAAQ,wBAAQ,IAAI;CAC1B;;;;;;CAOD,OAAOC,QAA0B;EAC/B,MAAM,SAAS,KAAK,MAAM,IAAI,OAAO;AACrC,MAAI,CAAC,OACH,OAAM,IAAI,MAAM,CAAC,GAAG,EAAE,OAAO,WAAW,CAAC;MAEzC,QAAO;CAEV;;;;;;CAOD,IAAIC,OAAuC;EACzC,MAAM,OAAO,CAAC,GAAG,KAAK,MAAM,MAAM,AAAC;EACnC,MAAM,cAAc,OAAO,KAAK,MAAM,CAAC,OAAO,CAAC,MAAM,KAAK,SAAS,EAAE,CAAC;AAEtE,MAAI,YAAY,SAAS,EACvB,OAAM,IAAI,MAAM,CAAC,qCAAqC,EAAE,aAAa;AAGvE,OAAK,MAAM,CAAC,KAAK,MAAM,IAAI,OAAO,QAAQ,MAAM,EAC9C,KAAK,MAAM,IAAI,KAAK,MAAM;CAE7B;AACF"}