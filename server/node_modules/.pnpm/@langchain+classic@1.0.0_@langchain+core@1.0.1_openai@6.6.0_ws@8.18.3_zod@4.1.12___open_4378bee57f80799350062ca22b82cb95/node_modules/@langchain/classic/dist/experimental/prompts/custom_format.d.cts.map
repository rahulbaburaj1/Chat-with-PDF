{"version":3,"file":"custom_format.d.cts","names":["InputValues","ParsedFStringNode","PromptTemplate","PromptTemplateInput","TypedPromptInputValues","CustomFormatPromptTemplateInput","RunInput","Omit","CustomFormatPromptTemplate","PartialVariableName","Record","customParser","Symbol","Promise"],"sources":["../../../src/experimental/prompts/custom_format.d.ts"],"sourcesContent":["import type { InputValues } from \"@langchain/core/utils/types\";\nimport { type ParsedFStringNode, PromptTemplate, type PromptTemplateInput, TypedPromptInputValues } from \"@langchain/core/prompts\";\nexport type CustomFormatPromptTemplateInput<RunInput extends InputValues> = Omit<PromptTemplateInput<RunInput, string>, \"templateFormat\"> & {\n    customParser: (template: string) => ParsedFStringNode[];\n    templateValidator?: (template: string, inputVariables: string[]) => boolean;\n    renderer: (template: string, values: InputValues) => string;\n};\nexport declare class CustomFormatPromptTemplate<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRunInput extends InputValues = any, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPartialVariableName extends string = any> extends PromptTemplate<RunInput, PartialVariableName> {\n    static lc_name(): string;\n    lc_serializable: boolean;\n    templateValidator?: (template: string, inputVariables: string[]) => boolean;\n    renderer: (template: string, values: InputValues) => string;\n    constructor(input: CustomFormatPromptTemplateInput<RunInput>);\n    /**\n     * Load prompt template from a template\n     */\n    static fromTemplate<\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    RunInput extends InputValues = Record<string, any>>(template: string, { customParser, ...rest }: Omit<CustomFormatPromptTemplateInput<RunInput>, \"template\" | \"inputVariables\">): CustomFormatPromptTemplate<RunInput extends Symbol ? never : RunInput, any>;\n    /**\n     * Formats the prompt template with the provided values.\n     * @param values The values to be used to format the prompt template.\n     * @returns A promise that resolves to a string which is the formatted prompt.\n     */\n    format(values: TypedPromptInputValues<RunInput>): Promise<string>;\n}\n"],"mappings":";;;;KAEYK,iDAAiDL,eAAeO,KAAKJ,oBAAoBG;sCAC7DL;EAD5BI,iBAAAA,CAAAA,EAAAA,CAAAA,QAAAA,EAAAA,MAA+B,EAAA,cAAA,EAAA,MAAA,EAAA,EAAA,GAAA,OAAA;EAAA,QAAA,EAAA,CAAA,QAAA,EAAA,MAAA,EAAA,MAAA,EAGFL,WAHE,EAAA,GAAA,MAAA;CAAA;AAA0DM,cAKhFE,0BALgFF;;iBAOpFN,WAP2DO,GAAAA,GAAAA;;4BAGnCP,MAAAA,GAAAA,GAAAA,CAAAA,SAMSE,cANTF,CAMwBM,QANxBN,EAMkCS,mBANlCT,CAAAA,CAAAA;EAAW,OAAA,OAAA,CAAA,CAAA,EAAA,MAAA;EAE/BQ,eAAAA,EAAAA,OAAAA;EAA0B,iBAAA,CAAA,EAAA,CAAA,QAAA,EAAA,MAAA,EAAA,cAAA,EAAA,MAAA,EAAA,EAAA,GAAA,OAAA;EAAA,QAE9BR,EAAAA,CAAAA,QAAAA,EAAAA,MAAAA,EAAAA,MAAAA,EAMwBA,WANxBA,EAAAA,GAAAA,MAAAA;EAAW,WAEqCM,CAAAA,KAAAA,EAK1CD,+BAL0CC,CAKVA,QALUA,CAAAA;EAAQ;;;EAKV,OAAxCD,YAAAA;EAA+B;EAMtB,iBAAXL,WAAcU,GAAAA,MAAAA,CAAAA,MAAAA,EAAAA,GAAAA,CAAAA,CAAAA,CAAAA,QAAAA,EAAAA,MAAAA,EAAAA;IAAAA,YAAAA;IAAAA,GAAAA;EAAAA,CAAAA,EAAkEH,IAAlEG,CAAuEL,+BAAvEK,CAAuGJ,QAAvGI,CAAAA,EAAAA,UAAAA,GAAAA,gBAAAA,CAAAA,CAAAA,EAAmJF,0BAAnJE,CAA8KJ,QAA9KI,SAA+LE,MAA/LF,GAAAA,KAAAA,GAAgNJ,QAAhNI,EAAAA,GAAAA,CAAAA;EAAM;;;;;EAAgL,MAASE,CAAAA,MAAAA,EAM/MR,sBAN+MQ,CAMxLN,QANwLM,CAAAA,CAAAA,EAM5KC,OAN4KD,CAAAA,MAAAA,CAAAA"}