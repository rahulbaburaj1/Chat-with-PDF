{"version":3,"file":"parser.d.ts","names":["MaskingTransformer","MaskingParserConfig","MaskingParser","Map","Promise"],"sources":["../../../src/experimental/masking/parser.d.ts"],"sourcesContent":["import { MaskingTransformer } from \"./transformer.js\";\nimport type { MaskingParserConfig } from \"./types.js\";\n/**\n * MaskingParser class for handling the masking and rehydrating of messages.\n */\nexport declare class MaskingParser {\n    private transformers;\n    private state;\n    private config;\n    constructor(config?: MaskingParserConfig);\n    /**\n     * Adds a transformer to the parser.\n     * @param transformer - An instance of a class extending MaskingTransformer.\n     */\n    addTransformer(transformer: MaskingTransformer): void;\n    /**\n     * Getter method for retrieving the current state.\n     * @returns The current state map.\n     */\n    getState(): Map<string, string>;\n    /**\n     * Masks the provided message using the added transformers.\n     * This method sequentially applies each transformer's masking logic to the message.\n     * It utilizes a state map to track original values corresponding to their masked versions.\n     *\n     * @param message - The message to be masked.\n     * @returns A masked version of the message.\n     * @throws {TypeError} If the message is not a string.\n     * @throws {Error} If no transformers are added.\n     */\n    mask(message: string): Promise<string>;\n    /**\n     * Rehydrates a masked message back to its original form.\n     * This method sequentially applies the rehydration logic of each added transformer in reverse order.\n     * It relies on the state map to correctly map the masked values back to their original values.\n     *\n     * The rehydration process is essential for restoring the original content of a message\n     * that has been transformed (masked) by the transformers. This process is the inverse of the masking process.\n     *\n     * @param message - The masked message to be rehydrated.\n     * @returns The original (rehydrated) version of the message.\n     */\n    rehydrate(message: string, state?: Map<string, string>): Promise<string>;\n}\n"],"mappings":";;;;;;;AAKA;AAAkC,cAAbE,aAAAA,CAAa;EAAA,QAITD,YAAAA;EAAmB,QAKZD,KAAAA;EAAkB,QAKlCG,MAAAA;EAAG,WAWQC,CAAAA,MAAAA,CAAAA,EArBFH,mBAqBEG;EAAO;;AAYkC;;8BA5BpCJ;;;;;cAKhBG;;;;;;;;;;;yBAWWC;;;;;;;;;;;;qCAYYD,sBAAsBC"}