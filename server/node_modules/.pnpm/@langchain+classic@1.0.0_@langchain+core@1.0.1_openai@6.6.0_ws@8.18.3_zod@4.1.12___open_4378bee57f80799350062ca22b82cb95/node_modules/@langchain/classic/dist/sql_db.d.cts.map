{"version":3,"file":"sql_db.d.cts","names":["DataSource","DataSourceT","DataSourceOptions","Serializable","SerializedSqlDatabase","SqlDatabaseDataSourceParams","SqlDatabaseOptionsParams","SqlTable","SqlDatabase","_langchain_core_load_serializable0","SerializedNotImplemented","Array","Record","Promise"],"sources":["../src/sql_db.d.ts"],"sourcesContent":["import type { DataSource as DataSourceT, DataSourceOptions } from \"typeorm\";\nimport { Serializable } from \"@langchain/core/load/serializable\";\nimport { SerializedSqlDatabase, SqlDatabaseDataSourceParams, SqlDatabaseOptionsParams, SqlTable } from \"./util/sql_utils.js\";\nexport type { SqlDatabaseDataSourceParams, SqlDatabaseOptionsParams };\n/**\n * Class that represents a SQL database in the LangChain framework.\n *\n * @security **Security Notice**\n * This class generates SQL queries for the given database.\n * The SQLDatabase class provides a getTableInfo method that can be used\n * to get column information as well as sample data from the table.\n * To mitigate risk of leaking sensitive data, limit permissions\n * to read and scope to the tables that are needed.\n * Optionally, use the includesTables or ignoreTables class parameters\n * to limit which tables can/cannot be accessed.\n *\n * @link See https://js.langchain.com/docs/security for more information.\n */\nexport declare class SqlDatabase extends Serializable implements SqlDatabaseOptionsParams, SqlDatabaseDataSourceParams {\n    lc_namespace: string[];\n    toJSON(): import(\"@langchain/core/load/serializable\").SerializedNotImplemented;\n    appDataSourceOptions: DataSourceOptions;\n    appDataSource: DataSourceT;\n    allTables: Array<SqlTable>;\n    includesTables: Array<string>;\n    ignoreTables: Array<string>;\n    sampleRowsInTableInfo: number;\n    customDescription?: Record<string, string>;\n    protected constructor(fields: SqlDatabaseDataSourceParams);\n    static fromDataSourceParams(fields: SqlDatabaseDataSourceParams): Promise<SqlDatabase>;\n    static fromOptionsParams(fields: SqlDatabaseOptionsParams): Promise<SqlDatabase>;\n    /**\n     * Get information about specified tables.\n     *\n     * Follows best practices as specified in: Rajkumar et al, 2022\n     * (https://arxiv.org/abs/2204.00498)\n     *\n     * If `sample_rows_in_table_info`, the specified number of sample rows will be\n     * appended to each table description. This can increase performance as\n     * demonstrated in the paper.\n     */\n    getTableInfo(targetTables?: Array<string>): Promise<string>;\n    /**\n     * Execute a SQL command and return a string representing the results.\n     * If the statement returns rows, a string of the results is returned.\n     * If the statement returns no rows, an empty string is returned.\n     */\n    run(command: string, fetch?: \"all\" | \"one\"): Promise<string>;\n    serialize(): SerializedSqlDatabase;\n    /** @ignore */\n    static imports(): Promise<{\n        DataSource: typeof DataSourceT;\n    }>;\n}\n"],"mappings":";;;;;;;;;AAkBA;;;;;;;;;;;;AAW8EQ,cAXzDA,WAAAA,SAAoBL,YAAAA,YAAwBG,wBAWaE,EAXaH,2BAWbG,CAAAA;EAAW,YAAnBK,EAAAA,MAAAA,EAAAA;EAAO,MACxCP,CAAAA,CAAAA,EAZLG,kCAAAA,CAE0BC,wBAUrBJ;EAAwB,oBAAWE,EAT9CN,iBAS8CM;EAAW,aAAnBK,EAR7CZ,UAQ6CY;EAAO,SAWvCF,EAlBjBA,KAkBiBA,CAlBXJ,QAkBWI,CAAAA;EAAK,cAAWE,EAjB5BF,KAiB4BE,CAAAA,MAAAA,CAAAA;EAAO,YAMNA,EAtB/BF,KAsB+BE,CAAAA,MAAAA,CAAAA;EAAO,qBACvCT,EAAAA,MAAAA;EAAqB,iBAGXH,CAAAA,EAxBHW,MAwBGX,CAAAA,MAAAA,EAAAA,MAAAA,CAAAA;EAAW,UADhBY,WAAAA,CAAAA,MAAAA,EAtBYR,2BAsBZQ;EAAO,OAhCYV,oBAAAA,CAAAA,MAAAA,EAWDE,2BAXCF,CAAAA,EAW6BU,OAX7BV,CAWqCK,WAXrCL,CAAAA;EAAY,OAAYG,iBAAAA,CAAAA,MAAAA,EAY5BA,wBAZ4BA,CAAAA,EAYDO,OAZCP,CAYOE,WAZPF,CAAAA;EAAwB;AAA6B;;;;;;;;;8BAuBtFK,gBAAgBE;;;;;;+CAMCA;eAChCT;;oBAEKS;uBACKZ"}