{"version":3,"file":"sequential_chain.d.cts","names":["ChainValues","CallbackManagerForChainRun","BaseChain","ChainInputs","SerializedSequentialChain","SerializedSimpleSequentialChain","SequentialChainInput","SequentialChain","Promise","SimpleSequentialChainInput","Array","SimpleSequentialChain"],"sources":["../../src/chains/sequential_chain.d.ts"],"sourcesContent":["import { ChainValues } from \"@langchain/core/utils/types\";\nimport { CallbackManagerForChainRun } from \"@langchain/core/callbacks/manager\";\nimport { BaseChain, ChainInputs } from \"./base.js\";\nimport { SerializedSequentialChain, SerializedSimpleSequentialChain } from \"./serde.js\";\n/**\n * Interface for the input parameters of the SequentialChain class.\n */\nexport interface SequentialChainInput extends ChainInputs {\n    /** Array of chains to run as a sequence. The chains are run in order they appear in the array. */\n    chains: BaseChain[];\n    /** Defines which variables should be passed as initial input to the first chain. */\n    inputVariables: string[];\n    /** Which variables should be returned as a result of executing the chain. If not specified, output of the last of the chains is used. */\n    outputVariables?: string[];\n    /** Whether or not to return all intermediate outputs and variables (excluding initial input variables). */\n    returnAll?: boolean;\n}\n/**\n * Chain where the outputs of one chain feed directly into next.\n * @example\n * ```typescript\n * const promptTemplate = new PromptTemplate({\n *   template: `You are a playwright. Given the title of play and the era it is set in, it is your job to write a synopsis for that title.\n * Title: {title}\n * Era: {era}\n * Playwright: This is a synopsis for the above play:`,\n *   inputVariables: [\"title\", \"era\"],\n * });\n\n * const reviewPromptTemplate = new PromptTemplate({\n *   template: `You are a play critic from the New York Times. Given the synopsis of play, it is your job to write a review for that play.\n *\n *     Play Synopsis:\n *     {synopsis}\n *     Review from a New York Times play critic of the above play:`,\n *   inputVariables: [\"synopsis\"],\n * });\n\n * const overallChain = new SequentialChain({\n *   chains: [\n *     new LLMChain({\n *       llm: new ChatOpenAI({ model: \"gpt-4o-mini\", temperature: 0 }),\n *       prompt: promptTemplate,\n *       outputKey: \"synopsis\",\n *     }),\n *     new LLMChain({\n *       llm: new OpenAI({ model: \"gpt-4o-mini\", temperature: 0 }),\n *       prompt: reviewPromptTemplate,\n *       outputKey: \"review\",\n *     }),\n *   ],\n *   inputVariables: [\"era\", \"title\"],\n *   outputVariables: [\"synopsis\", \"review\"],\n *   verbose: true,\n * });\n\n * const chainExecutionResult = await overallChain.call({\n *   title: \"Tragedy at sunset on the beach\",\n *   era: \"Victorian England\",\n * });\n * console.log(chainExecutionResult);\n * ```\n */\nexport declare class SequentialChain extends BaseChain implements SequentialChainInput {\n    static lc_name(): string;\n    chains: BaseChain[];\n    inputVariables: string[];\n    outputVariables: string[];\n    returnAll?: boolean | undefined;\n    get inputKeys(): string[];\n    get outputKeys(): string[];\n    constructor(fields: SequentialChainInput);\n    /** @ignore */\n    _validateChains(): void;\n    /** @ignore */\n    _call(values: ChainValues, runManager?: CallbackManagerForChainRun): Promise<ChainValues>;\n    _chainType(): \"sequential_chain\";\n    static deserialize(data: SerializedSequentialChain): Promise<SequentialChain>;\n    serialize(): SerializedSequentialChain;\n}\n/**\n * Interface for the input parameters of the SimpleSequentialChain class.\n */\nexport interface SimpleSequentialChainInput extends ChainInputs {\n    /** Array of chains to run as a sequence. The chains are run in order they appear in the array. */\n    chains: Array<BaseChain>;\n    /** Whether or not to trim the intermediate outputs. */\n    trimOutputs?: boolean;\n}\n/**\n * Simple chain where a single string output of one chain is fed directly into the next.\n * @augments BaseChain\n * @augments SimpleSequentialChainInput\n *\n * @example\n * ```ts\n * import { SimpleSequentialChain, LLMChain } from \"@langchain/classic/chains\";\n * import { OpenAI } from \"langchain/llms/openai\";\n * import { PromptTemplate } from \"langchain/prompts\";\n *\n * // This is an LLMChain to write a synopsis given a title of a play.\n * const llm = new OpenAI({ temperature: 0 });\n * const template = `You are a playwright. Given the title of play, it is your job to write a synopsis for that title.\n *\n * Title: {title}\n * Playwright: This is a synopsis for the above play:`\n * const promptTemplate = new PromptTemplate({ template, inputVariables: [\"title\"] });\n * const synopsisChain = new LLMChain({ llm, prompt: promptTemplate });\n *\n *\n * // This is an LLMChain to write a review of a play given a synopsis.\n * const reviewLLM = new OpenAI({ temperature: 0 })\n * const reviewTemplate = `You are a play critic from the New York Times. Given the synopsis of play, it is your job to write a review for that play.\n *\n * Play Synopsis:\n * {synopsis}\n * Review from a New York Times play critic of the above play:`\n * const reviewPromptTemplate = new PromptTemplate({ template: reviewTemplate, inputVariables: [\"synopsis\"] });\n * const reviewChain = new LLMChain({ llm: reviewLLM, prompt: reviewPromptTemplate });\n *\n * const overallChain = new SimpleSequentialChain({chains: [synopsisChain, reviewChain], verbose:true})\n * const review = await overallChain.run(\"Tragedy at sunset on the beach\")\n * // the variable review contains resulting play review.\n * ```\n */\nexport declare class SimpleSequentialChain extends BaseChain implements SimpleSequentialChainInput {\n    static lc_name(): string;\n    chains: Array<BaseChain>;\n    inputKey: string;\n    outputKey: string;\n    trimOutputs: boolean;\n    get inputKeys(): string[];\n    get outputKeys(): string[];\n    constructor(fields: SimpleSequentialChainInput);\n    /** @ignore */\n    _validateChains(): void;\n    /** @ignore */\n    _call(values: ChainValues, runManager?: CallbackManagerForChainRun): Promise<ChainValues>;\n    _chainType(): \"simple_sequential_chain\";\n    static deserialize(data: SerializedSimpleSequentialChain): Promise<SimpleSequentialChain>;\n    serialize(): SerializedSimpleSequentialChain;\n}\n"],"mappings":";;;;;;;;;AAOA;AAAqC,UAApBM,oBAAAA,SAA6BH,WAAT,CAAA;EAAA;EAEhB,MAFyBA,EAElCD,SAFkCC,EAAAA;EAAW;EAwDpCI,cAAAA,EAAAA,MAAe,EAAA;EAAA;EAAA,eAExBL,CAAAA,EAAAA,MAAAA,EAAAA;EAAS;EAMuB,SAI1BF,CAAAA,EAAAA,OAAAA;;;;;;;;;;AAZoE;AAoBtF;;;;;AAA+D;AA0C/D;;;;;;;;;;;;;;;AAAkG;;;;;;;;;;;;;;;;cA9D7EO,eAAAA,SAAwBL,SAAAA,YAAqBI;;UAEtDJ;;;;;;sBAMYI;;;;gBAINN,0BAA0BC,6BAA6BO,QAAQR;;2BAEpDI,4BAA4BI,QAAQD;eAChDH;;;;;UAKAK,0BAAAA,SAAmCN;;UAExCO,MAAMR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAwCGS,qBAAAA,SAA8BT,SAAAA,YAAqBO;;UAE5DC,MAAMR;;;;;;sBAMMO;;;;gBAINT,0BAA0BC,6BAA6BO,QAAQR;;2BAEpDK,kCAAkCG,QAAQG;eACtDN"}