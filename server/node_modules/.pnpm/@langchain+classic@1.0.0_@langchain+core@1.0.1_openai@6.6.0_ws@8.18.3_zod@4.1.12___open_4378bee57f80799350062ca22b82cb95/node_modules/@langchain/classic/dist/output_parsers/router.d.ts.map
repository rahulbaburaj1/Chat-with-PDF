{"version":3,"file":"router.d.ts","names":["InferInteropZodOutput","InteropZodType","JsonMarkdownStructuredOutputParser","RouterOutputParserInput","RouterOutputParser","Y","Promise"],"sources":["../../src/output_parsers/router.d.ts"],"sourcesContent":["import { type InferInteropZodOutput, type InteropZodType } from \"@langchain/core/utils/types\";\nimport { JsonMarkdownStructuredOutputParser } from \"./structured.js\";\n/**\n * Defines the input parameters for the RouterOutputParser class. It can\n * include a default destination and an interpolation depth.\n */\nexport type RouterOutputParserInput = {\n    defaultDestination?: string;\n    interpolationDepth?: number;\n};\n/**\n * A type of output parser that extends the\n * JsonMarkdownStructuredOutputParser. It is used to parse the output of a\n * router in LangChain. The class takes a schema and an optional\n * RouterOutputParserInput object as parameters.\n */\nexport declare class RouterOutputParser<Y extends InteropZodType> extends JsonMarkdownStructuredOutputParser<Y> {\n    defaultDestination: string;\n    constructor(schema: Y, options?: RouterOutputParserInput);\n    /**\n     * Overrides the parse method from JsonMarkdownStructuredOutputParser.\n     * This method takes a string as input, attempts to parse it, and returns\n     * the parsed text. If the destination of the parsed text matches the\n     * defaultDestination, the destination is set to null. If the parsing\n     * fails, an OutputParserException is thrown.\n     * @param text The text to be parsed.\n     * @returns The parsed text as a Promise.\n     */\n    parse(text: string): Promise<InferInteropZodOutput<Y>>;\n}\n"],"mappings":";;;;;;;AAMA;AAUA;AAAuC,KAV3BG,uBAAAA,GAU2B;EAAA,kBAAWF,CAAAA,EAAAA,MAAAA;EAAc,kBAA6CI,CAAAA,EAAAA,MAAAA;CAAC;;;;;;AAAF;cAAvFD,6BAA6BH,wBAAwBC,mCAAmCG;;sBAErFA,aAAaF;;;;;;;;;;uBAUZG,QAAQN,sBAAsBK"}