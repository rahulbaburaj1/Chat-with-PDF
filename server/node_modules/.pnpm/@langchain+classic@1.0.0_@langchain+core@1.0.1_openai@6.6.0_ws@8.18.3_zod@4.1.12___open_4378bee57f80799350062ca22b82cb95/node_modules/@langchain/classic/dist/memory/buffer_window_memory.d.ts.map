{"version":3,"file":"buffer_window_memory.d.ts","names":["InputValues","MemoryVariables","BaseChatMemory","BaseChatMemoryInput","BufferWindowMemoryInput","BufferWindowMemory","Promise"],"sources":["../../src/memory/buffer_window_memory.d.ts"],"sourcesContent":["import { InputValues, MemoryVariables } from \"@langchain/core/memory\";\nimport { BaseChatMemory, BaseChatMemoryInput } from \"./chat_memory.js\";\n/**\n * Interface for the input parameters of the BufferWindowMemory class.\n */\nexport interface BufferWindowMemoryInput extends BaseChatMemoryInput {\n    humanPrefix?: string;\n    aiPrefix?: string;\n    memoryKey?: string;\n    k?: number;\n}\n/**\n * Class for managing and storing previous chat messages. It extends the\n * BaseChatMemory class and implements the BufferWindowMemoryInput\n * interface. This class is stateful and stores messages in a buffer. When\n * called in a chain, it returns all of the messages it has stored.\n * @example\n * ```typescript\n * const prompt =\n *   PromptTemplate.fromTemplate(`The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n * Current conversation:\n * {chat_history}\n * Human: {input}\n * AI:`);\n *\n * const chain = new LLMChain({\n *   llm: new ChatOpenAI({ model: \"gpt-4o-mini\", temperature: 0.9 }),\n *   prompt,\n *   memory: new BufferWindowMemory({ memoryKey: \"chat_history\", k: 1 }),\n * });\n *\n * // Example of initiating a conversation with the AI\n * const res1 = await chain.call({ input: \"Hi! I'm Jim.\" });\n * console.log({ res1 });\n *\n * // Example of following up with another question\n * const res2 = await chain.call({ input: \"What's my name?\" });\n * console.log({ res2 });\n * ```\n */\nexport declare class BufferWindowMemory extends BaseChatMemory implements BufferWindowMemoryInput {\n    humanPrefix: string;\n    aiPrefix: string;\n    memoryKey: string;\n    k: number;\n    constructor(fields?: BufferWindowMemoryInput);\n    get memoryKeys(): string[];\n    /**\n     * Method to load the memory variables. Retrieves the chat messages from\n     * the history, slices the last 'k' messages, and stores them in the\n     * memory under the memoryKey. If the returnMessages property is set to\n     * true, the method returns the messages as they are. Otherwise, it\n     * returns a string representation of the messages.\n     * @param _values InputValues object.\n     * @returns Promise that resolves to a MemoryVariables object.\n     */\n    loadMemoryVariables(_values: InputValues): Promise<MemoryVariables>;\n}\n"],"mappings":";;;;;;;AAKA;AAmCqBK,UAnCJD,uBAAAA,SAAgCD,mBAmCV,CAAA;EAAA,WAAA,CAAA,EAAA,MAAA;EAAA,QAKdC,CAAAA,EAAAA,MAAAA;EAAuB,SAWfJ,CAAAA,EAAAA,MAAAA;EAAW,CAAA,CAAA,EAAWC,MAAAA;;;;AAhB0C;;;;;;;;;;;;;;;;;;;;;;;;;;;cAA5EI,kBAAAA,SAA2BH,cAAAA,YAA0BE;;;;;uBAKjDA;;;;;;;;;;;+BAWQJ,cAAcM,QAAQL"}