{"version":3,"file":"output_parser.d.ts","names":["AgentAction","AgentFinish","AgentActionOutputParser","XMLAgentOutputParser","Promise"],"sources":["../../../src/agents/xml/output_parser.d.ts"],"sourcesContent":["import { AgentAction, AgentFinish } from \"@langchain/core/agents\";\nimport { AgentActionOutputParser } from \"../types.js\";\n/**\n * @example\n * ```typescript\n * const prompt = ChatPromptTemplate.fromMessages([\n *   HumanMessagePromptTemplate.fromTemplate(AGENT_INSTRUCTIONS),\n *   new MessagesPlaceholder(\"agent_scratchpad\"),\n * ]);\n * const runnableAgent = RunnableSequence.from([\n *   ...rest of runnable\n *   prompt,\n *   new ChatAnthropic({ modelName: \"claude-2\", temperature: 0 }).withConfig({\n *     stop: [\"</tool_input>\", \"</final_answer>\"],\n *   }),\n *   new XMLAgentOutputParser(),\n * ]);\n * const result = await executor.invoke({\n *   input: \"What is the weather in Honolulu?\",\n *   tools: [],\n * });\n * ```\n */\nexport declare class XMLAgentOutputParser extends AgentActionOutputParser {\n    lc_namespace: string[];\n    static lc_name(): string;\n    /**\n     * Parses the output text from the agent and returns an AgentAction or\n     * AgentFinish object.\n     * @param text The output text from the agent.\n     * @returns An AgentAction or AgentFinish object.\n     */\n    parse(text: string): Promise<AgentAction | AgentFinish>;\n    getFormatInstructions(): string;\n}\n"],"mappings":";;;;;;;AAuBA;;;;;;AAAyE;;;;;;;;;;;;;cAApDG,oBAAAA,SAA6BD,uBAAAA;;;;;;;;;uBASzBE,QAAQJ,cAAcC"}