{"version":3,"file":"expression-parser.d.cts","names":["ParseOptions","ParseFunction","Options","StartRule","Start","Program","Identifier","IdentifierName","Literal","NullLiteral","BooleanLiteral","NumericLiteral","StringLiteral","DecimalLiteral","PrimaryExpression","ArrayExpression","ObjectExpression","Expression","ElementList","PropertyNameAndValueList","PropertyAssignment","PropertyName","MemberExpression","CallExpression","Arguments","ExpressionStatement","ExpressionNode"],"sources":["../../src/types/expression-parser.d.ts"],"sourcesContent":["export interface ParseOptions {\n    filename?: string;\n    startRule?: \"Start\";\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    tracer?: any;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [key: string]: any;\n}\nexport type ParseFunction = <Options extends ParseOptions>(input: string, options?: Options) => Options extends {\n    startRule: infer StartRule;\n} ? StartRule extends \"Start\" ? Start : Start : Start;\n// These types were autogenerated by ts-pegjs\nexport type Start = Program;\nexport type Identifier = IdentifierName;\nexport type IdentifierName = {\n    type: \"Identifier\";\n    name: string;\n};\nexport type Literal = NullLiteral | BooleanLiteral | NumericLiteral | StringLiteral;\nexport type NullLiteral = {\n    type: \"NullLiteral\";\n    value: null;\n};\nexport type BooleanLiteral = {\n    type: \"BooleanLiteral\";\n    value: true;\n} | {\n    type: \"BooleanLiteral\";\n    value: false;\n};\nexport type NumericLiteral = DecimalLiteral;\nexport type DecimalLiteral = {\n    type: \"NumericLiteral\";\n    value: number;\n};\nexport type StringLiteral = {\n    type: \"StringLiteral\";\n    value: string;\n};\nexport type PrimaryExpression = Identifier | Literal | ArrayExpression | ObjectExpression | Expression;\nexport type ArrayExpression = {\n    type: \"ArrayExpression\";\n    elements: ElementList;\n};\nexport type ElementList = PrimaryExpression[];\nexport type ObjectExpression = {\n    type: \"ObjectExpression\";\n    properties: [];\n} | {\n    type: \"ObjectExpression\";\n    properties: PropertyNameAndValueList;\n};\nexport type PropertyNameAndValueList = PrimaryExpression[];\nexport type PropertyAssignment = {\n    type: \"PropertyAssignment\";\n    key: PropertyName;\n    value: Expression;\n    kind: \"init\";\n};\nexport type PropertyName = IdentifierName | StringLiteral | NumericLiteral;\nexport type MemberExpression = {\n    type: \"MemberExpression\";\n    property: StringLiteral;\n    computed: true;\n    object: MemberExpression | Identifier | StringLiteral;\n} | {\n    type: \"MemberExpression\";\n    property: Identifier;\n    computed: false;\n    object: MemberExpression | Identifier | StringLiteral;\n};\nexport type CallExpression = {\n    type: \"CallExpression\";\n    arguments: Arguments;\n    callee: MemberExpression | Identifier;\n};\nexport type Arguments = PrimaryExpression[];\nexport type Expression = CallExpression | MemberExpression;\nexport type ExpressionStatement = {\n    type: \"ExpressionStatement\";\n    expression: Expression;\n};\nexport type Program = {\n    type: \"Program\";\n    body: ExpressionStatement;\n};\nexport type ExpressionNode = Program | ExpressionStatement | ArrayExpression | BooleanLiteral | CallExpression | Identifier | MemberExpression | NumericLiteral | ObjectExpression | PropertyAssignment | NullLiteral | StringLiteral;\n"],"mappings":"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"}