{"version":3,"file":"handlebars.js","names":["template: string","parsed: ParsedFStringNode[]","nodes: { type: string }[]","name: string","values: InputValues","params?: Omit<\n      HandlebarsPromptTemplateInput<RunInput>,\n      | \"template\"\n      | \"inputVariables\"\n      | \"customParser\"\n      | \"templateValidator\"\n      | \"renderer\"\n    >"],"sources":["../../../src/experimental/prompts/handlebars.ts"],"sourcesContent":["import Handlebars from \"handlebars\";\nimport { type ParsedFStringNode } from \"@langchain/core/prompts\";\nimport type { InputValues } from \"@langchain/core/utils/types\";\nimport {\n  CustomFormatPromptTemplate,\n  CustomFormatPromptTemplateInput,\n} from \"./custom_format.js\";\n\nexport const parseHandlebars = (template: string): ParsedFStringNode[] => {\n  const parsed: ParsedFStringNode[] = [];\n  const nodes: { type: string }[] = [...Handlebars.parse(template).body];\n  while (nodes.length) {\n    const node = nodes.pop()!;\n    if (node.type === \"ContentStatement\") {\n      // @ts-expect-error - handlebars' hbs.AST.ContentStatement isn't exported\n      const text = node.value;\n      parsed.push({ type: \"literal\", text });\n    } else if (node.type === \"MustacheStatement\") {\n      // @ts-expect-error - handlebars' hbs.AST.MustacheStatement isn't exported\n      const name: string = node.path.parts[0];\n      // @ts-expect-error - handlebars' hbs.AST.MustacheStatement isn't exported\n      const { original } = node.path as { original: string };\n      if (\n        !!name &&\n        !original.startsWith(\"this.\") &&\n        !original.startsWith(\"@\")\n      ) {\n        parsed.push({ type: \"variable\", name });\n      }\n    } else if (node.type === \"PathExpression\") {\n      // @ts-expect-error - handlebars' hbs.AST.PathExpression isn't exported\n      const name: string = node.parts[0];\n      // @ts-expect-error - handlebars' hbs.AST.PathExpression isn't exported\n      const { original } = node;\n      if (\n        !!name &&\n        !original.startsWith(\"this.\") &&\n        !original.startsWith(\"@\")\n      ) {\n        parsed.push({ type: \"variable\", name });\n      }\n    } else if (node.type === \"BlockStatement\") {\n      // @ts-expect-error - handlebars' hbs.AST.BlockStatement isn't exported\n      nodes.push(...node.params, ...node.program.body);\n    }\n  }\n\n  return parsed;\n};\n\nexport const interpolateHandlebars = (\n  template: string,\n  values: InputValues\n) => {\n  const compiled = Handlebars.compile(template, { noEscape: true });\n  return compiled(values);\n};\n\nexport type HandlebarsPromptTemplateInput<RunInput extends InputValues> =\n  CustomFormatPromptTemplateInput<RunInput>;\n\nexport class HandlebarsPromptTemplate<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  RunInput extends InputValues = any\n> extends CustomFormatPromptTemplate<RunInput> {\n  static lc_name() {\n    return \"HandlebarsPromptTemplate\";\n  }\n\n  /**\n   * Load prompt template from a template\n   */\n  static fromTemplate<\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    RunInput extends InputValues = Record<string, any>\n  >(\n    template: string,\n    params?: Omit<\n      HandlebarsPromptTemplateInput<RunInput>,\n      | \"template\"\n      | \"inputVariables\"\n      | \"customParser\"\n      | \"templateValidator\"\n      | \"renderer\"\n    >\n  ) {\n    return super.fromTemplate<RunInput>(template, {\n      ...params,\n      validateTemplate: false,\n      customParser: parseHandlebars,\n      renderer: interpolateHandlebars,\n    });\n  }\n}\n"],"mappings":";;;;;;;;;;;AAQA,MAAa,kBAAkB,CAACA,aAA0C;CACxE,MAAMC,SAA8B,CAAE;CACtC,MAAMC,QAA4B,CAAC,GAAG,WAAW,MAAM,SAAS,CAAC,IAAK;AACtE,QAAO,MAAM,QAAQ;EACnB,MAAM,OAAO,MAAM,KAAK;AACxB,MAAI,KAAK,SAAS,oBAAoB;GAEpC,MAAM,OAAO,KAAK;GAClB,OAAO,KAAK;IAAE,MAAM;IAAW;GAAM,EAAC;EACvC,WAAU,KAAK,SAAS,qBAAqB;GAE5C,MAAMC,OAAe,KAAK,KAAK,MAAM;GAErC,MAAM,EAAE,UAAU,GAAG,KAAK;AAC1B,OACE,CAAC,CAAC,QACF,CAAC,SAAS,WAAW,QAAQ,IAC7B,CAAC,SAAS,WAAW,IAAI,EAEzB,OAAO,KAAK;IAAE,MAAM;IAAY;GAAM,EAAC;EAE1C,WAAU,KAAK,SAAS,kBAAkB;GAEzC,MAAMA,OAAe,KAAK,MAAM;GAEhC,MAAM,EAAE,UAAU,GAAG;AACrB,OACE,CAAC,CAAC,QACF,CAAC,SAAS,WAAW,QAAQ,IAC7B,CAAC,SAAS,WAAW,IAAI,EAEzB,OAAO,KAAK;IAAE,MAAM;IAAY;GAAM,EAAC;EAE1C,WAAU,KAAK,SAAS,kBAEvB,MAAM,KAAK,GAAG,KAAK,QAAQ,GAAG,KAAK,QAAQ,KAAK;CAEnD;AAED,QAAO;AACR;AAED,MAAa,wBAAwB,CACnCH,UACAI,WACG;CACH,MAAM,WAAW,WAAW,QAAQ,UAAU,EAAE,UAAU,KAAM,EAAC;AACjE,QAAO,SAAS,OAAO;AACxB;AAKD,IAAa,2BAAb,cAGU,2BAAqC;CAC7C,OAAO,UAAU;AACf,SAAO;CACR;;;;CAKD,OAAO,aAILJ,UACAK,QAQA;AACA,SAAO,MAAM,aAAuB,UAAU;GAC5C,GAAG;GACH,kBAAkB;GAClB,cAAc;GACd,UAAU;EACX,EAAC;CACH;AACF"}