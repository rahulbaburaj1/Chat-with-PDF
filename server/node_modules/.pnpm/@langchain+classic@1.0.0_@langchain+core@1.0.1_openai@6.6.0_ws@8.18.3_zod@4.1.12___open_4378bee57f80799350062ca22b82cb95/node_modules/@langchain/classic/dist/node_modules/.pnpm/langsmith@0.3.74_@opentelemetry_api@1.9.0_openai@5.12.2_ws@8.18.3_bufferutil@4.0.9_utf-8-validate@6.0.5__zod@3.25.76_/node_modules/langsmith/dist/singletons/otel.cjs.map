{"version":3,"file":"otel.cjs","names":["getOtelEnabled"],"sources":["../../../../../../../../../../node_modules/.pnpm/langsmith@0.3.74_@opentelemetry+api@1.9.0_openai@5.12.2_ws@8.18.3_bufferutil@4.0.9_utf-8-validate@6.0.5__zod@3.25.76_/node_modules/langsmith/dist/singletons/otel.js"],"sourcesContent":["// Should not import any OTEL packages to avoid pulling in optional deps.\nimport { getOtelEnabled } from \"../utils/env.js\";\nclass MockTracer {\n    constructor() {\n        Object.defineProperty(this, \"hasWarned\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n    }\n    startActiveSpan(_name, ...args) {\n        if (!this.hasWarned && getOtelEnabled()) {\n            console.warn(\"You have enabled OTEL export via the `OTEL_ENABLED` or `LANGSMITH_OTEL_ENABLED` environment variable, but have not initialized the required OTEL instances. \" +\n                'Please add:\\n```\\nimport { initializeOTEL } from \"langsmith/experimental/otel/setup\";\\ninitializeOTEL();\\n```\\nat the beginning of your code.');\n            this.hasWarned = true;\n        }\n        // Handle different overloads:\n        // startActiveSpan(name, fn)\n        // startActiveSpan(name, options, fn)\n        // startActiveSpan(name, options, context, fn)\n        let fn;\n        if (args.length === 1 && typeof args[0] === \"function\") {\n            fn = args[0];\n        }\n        else if (args.length === 2 && typeof args[1] === \"function\") {\n            fn = args[1];\n        }\n        else if (args.length === 3 && typeof args[2] === \"function\") {\n            fn = args[2];\n        }\n        if (typeof fn === \"function\") {\n            return fn();\n        }\n        return undefined;\n    }\n}\nclass MockOTELTrace {\n    constructor() {\n        Object.defineProperty(this, \"mockTracer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new MockTracer()\n        });\n    }\n    getTracer(_name, _version) {\n        return this.mockTracer;\n    }\n    getActiveSpan() {\n        return undefined;\n    }\n    setSpan(context, _span) {\n        return context;\n    }\n    getSpan(_context) {\n        return undefined;\n    }\n    setSpanContext(context, _spanContext) {\n        return context;\n    }\n    getTracerProvider() {\n        return undefined;\n    }\n    setGlobalTracerProvider(_tracerProvider) {\n        return false;\n    }\n}\nclass MockOTELContext {\n    active() {\n        return {};\n    }\n    with(_context, fn) {\n        return fn();\n    }\n}\nconst OTEL_TRACE_KEY = Symbol.for(\"ls:otel_trace\");\nconst OTEL_CONTEXT_KEY = Symbol.for(\"ls:otel_context\");\nconst OTEL_GET_DEFAULT_OTLP_TRACER_PROVIDER_KEY = Symbol.for(\"ls:otel_get_default_otlp_tracer_provider\");\nconst mockOTELTrace = new MockOTELTrace();\nconst mockOTELContext = new MockOTELContext();\nclass OTELProvider {\n    getTraceInstance() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return globalThis[OTEL_TRACE_KEY] ?? mockOTELTrace;\n    }\n    getContextInstance() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return globalThis[OTEL_CONTEXT_KEY] ?? mockOTELContext;\n    }\n    initializeGlobalInstances(otel) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (globalThis[OTEL_TRACE_KEY] === undefined) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            globalThis[OTEL_TRACE_KEY] = otel.trace;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (globalThis[OTEL_CONTEXT_KEY] === undefined) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            globalThis[OTEL_CONTEXT_KEY] = otel.context;\n        }\n    }\n    setDefaultOTLPTracerComponents(components) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        globalThis[OTEL_GET_DEFAULT_OTLP_TRACER_PROVIDER_KEY] = components;\n    }\n    getDefaultOTLPTracerComponents() {\n        return (globalThis[OTEL_GET_DEFAULT_OTLP_TRACER_PROVIDER_KEY] ??\n            undefined);\n    }\n}\nexport const OTELProviderSingleton = new OTELProvider();\n/**\n * Get the current OTEL trace instance.\n * Returns a mock implementation if OTEL is not available.\n */\nexport function getOTELTrace() {\n    return OTELProviderSingleton.getTraceInstance();\n}\n/**\n * Get the current OTEL context instance.\n * Returns a mock implementation if OTEL is not available.\n */\nexport function getOTELContext() {\n    return OTELProviderSingleton.getContextInstance();\n}\n/**\n * Initialize the global OTEL instances.\n * Should be called once when OTEL packages are available.\n */\nexport function setOTELInstances(otel) {\n    OTELProviderSingleton.initializeGlobalInstances(otel);\n}\n/**\n * Set a getter function for the default OTLP tracer provider.\n * This allows lazy initialization of the tracer provider.\n */\nexport function setDefaultOTLPTracerComponents(components) {\n    OTELProviderSingleton.setDefaultOTLPTracerComponents(components);\n}\n/**\n * Get the default OTLP tracer provider instance.\n * Returns undefined if not set.\n */\nexport function getDefaultOTLPTracerComponents() {\n    return OTELProviderSingleton.getDefaultOTLPTracerComponents();\n}\n"],"x_google_ignoreList":[0],"mappings":";;;AAEA,IAAM,aAAN,MAAiB;CACb,cAAc;EACV,OAAO,eAAe,MAAM,aAAa;GACrC,YAAY;GACZ,cAAc;GACd,UAAU;GACV,OAAO;EACV,EAAC;CACL;CACD,gBAAgB,OAAO,GAAG,MAAM;AAC5B,MAAI,CAAC,KAAK,aAAaA,4BAAgB,EAAE;GACrC,QAAQ,KAAK,8SACuI;GACpJ,KAAK,YAAY;EACpB;EAKD,IAAI;AACJ,MAAI,KAAK,WAAW,KAAK,OAAO,KAAK,OAAO,YACxC,KAAK,KAAK;WAEL,KAAK,WAAW,KAAK,OAAO,KAAK,OAAO,YAC7C,KAAK,KAAK;WAEL,KAAK,WAAW,KAAK,OAAO,KAAK,OAAO,YAC7C,KAAK,KAAK;AAEd,MAAI,OAAO,OAAO,WACd,QAAO,IAAI;AAEf,SAAO;CACV;AACJ;AACD,IAAM,gBAAN,MAAoB;CAChB,cAAc;EACV,OAAO,eAAe,MAAM,cAAc;GACtC,YAAY;GACZ,cAAc;GACd,UAAU;GACV,OAAO,IAAI;EACd,EAAC;CACL;CACD,UAAU,OAAO,UAAU;AACvB,SAAO,KAAK;CACf;CACD,gBAAgB;AACZ,SAAO;CACV;CACD,QAAQ,SAAS,OAAO;AACpB,SAAO;CACV;CACD,QAAQ,UAAU;AACd,SAAO;CACV;CACD,eAAe,SAAS,cAAc;AAClC,SAAO;CACV;CACD,oBAAoB;AAChB,SAAO;CACV;CACD,wBAAwB,iBAAiB;AACrC,SAAO;CACV;AACJ;AACD,IAAM,kBAAN,MAAsB;CAClB,SAAS;AACL,SAAO,CAAE;CACZ;CACD,KAAK,UAAU,IAAI;AACf,SAAO,IAAI;CACd;AACJ;AACD,MAAM,iBAAiB,OAAO,IAAI,gBAAgB;AAClD,MAAM,mBAAmB,OAAO,IAAI,kBAAkB;AACtD,MAAM,4CAA4C,OAAO,IAAI,2CAA2C;AACxG,MAAM,gBAAgB,IAAI;AAC1B,MAAM,kBAAkB,IAAI;AAC5B,IAAM,eAAN,MAAmB;CACf,mBAAmB;AAEf,SAAO,WAAW,mBAAmB;CACxC;CACD,qBAAqB;AAEjB,SAAO,WAAW,qBAAqB;CAC1C;CACD,0BAA0B,MAAM;AAE5B,MAAI,WAAW,oBAAoB,QAE/B,WAAW,kBAAkB,KAAK;AAGtC,MAAI,WAAW,sBAAsB,QAEjC,WAAW,oBAAoB,KAAK;CAE3C;CACD,+BAA+B,YAAY;EAEvC,WAAW,6CAA6C;CAC3D;CACD,iCAAiC;AAC7B,SAAQ,WAAW,8CACf;CACP;AACJ;AACD,MAAa,wBAAwB,IAAI;;;;;AAKzC,SAAgB,eAAe;AAC3B,QAAO,sBAAsB,kBAAkB;AAClD;;;;;AAKD,SAAgB,iBAAiB;AAC7B,QAAO,sBAAsB,oBAAoB;AACpD;;;;;AAmBD,SAAgB,iCAAiC;AAC7C,QAAO,sBAAsB,gCAAgC;AAChE"}