{"version":3,"file":"base.js","names":["fields?: BaseMemory | ChainInputs","verbose?: boolean","callbacks?: Callbacks","values: ChainValues","input: RunInput","options?: RunnableConfig","outputValues: RunOutput","outputs: Record<string, unknown>","inputs: Record<string, unknown>","input: any","config?: Callbacks | RunnableConfig","values: ChainValues & { signal?: AbortSignal; timeout?: number }","tags?: string[]","inputs: RunInput[]","config?: (Callbacks | RunnableConfig)[]","data: SerializedBaseChain","values: LoadValues"],"sources":["../../src/chains/base.ts"],"sourcesContent":["import { BaseMemory } from \"@langchain/core/memory\";\nimport { ChainValues } from \"@langchain/core/utils/types\";\nimport { RUN_KEY } from \"@langchain/core/outputs\";\nimport {\n  CallbackManagerForChainRun,\n  CallbackManager,\n  Callbacks,\n  parseCallbackConfigArg,\n} from \"@langchain/core/callbacks/manager\";\nimport { ensureConfig, type RunnableConfig } from \"@langchain/core/runnables\";\nimport {\n  BaseLangChain,\n  BaseLangChainParams,\n} from \"@langchain/core/language_models/base\";\nimport { SerializedBaseChain } from \"./serde.js\";\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type LoadValues = Record<string, any>;\n\nexport interface ChainInputs extends BaseLangChainParams {\n  memory?: BaseMemory;\n\n  /**\n   * @deprecated Use `callbacks` instead\n   */\n  callbackManager?: CallbackManager;\n}\n\n/**\n * Base interface that all chains must implement.\n */\nexport abstract class BaseChain<\n    RunInput extends ChainValues = ChainValues,\n    RunOutput extends ChainValues = ChainValues\n  >\n  extends BaseLangChain<RunInput, RunOutput>\n  implements ChainInputs\n{\n  declare memory?: BaseMemory;\n\n  get lc_namespace(): string[] {\n    return [\"langchain\", \"chains\", this._chainType()];\n  }\n\n  constructor(\n    fields?: BaseMemory | ChainInputs,\n    /** @deprecated */\n    verbose?: boolean,\n    /** @deprecated */\n    callbacks?: Callbacks\n  ) {\n    if (\n      arguments.length === 1 &&\n      typeof fields === \"object\" &&\n      !(\"saveContext\" in fields)\n    ) {\n      // fields is not a BaseMemory\n      const { memory, callbackManager, ...rest } = fields;\n      super({ ...rest, callbacks: callbackManager ?? rest.callbacks });\n      this.memory = memory;\n    } else {\n      // fields is a BaseMemory\n      super({ verbose, callbacks });\n      this.memory = fields as BaseMemory;\n    }\n  }\n\n  /** @ignore */\n  _selectMemoryInputs(values: ChainValues): ChainValues {\n    const valuesForMemory = { ...values };\n    if (\"signal\" in valuesForMemory) {\n      delete valuesForMemory.signal;\n    }\n    if (\"timeout\" in valuesForMemory) {\n      delete valuesForMemory.timeout;\n    }\n    return valuesForMemory;\n  }\n\n  /**\n   * Invoke the chain with the provided input and returns the output.\n   * @param input Input values for the chain run.\n   * @param config Optional configuration for the Runnable.\n   * @returns Promise that resolves with the output of the chain run.\n   */\n  async invoke(input: RunInput, options?: RunnableConfig): Promise<RunOutput> {\n    const config = ensureConfig(options);\n    const fullValues = await this._formatValues(input);\n    const callbackManager_ = await CallbackManager.configure(\n      config?.callbacks,\n      this.callbacks,\n      config?.tags,\n      this.tags,\n      config?.metadata,\n      this.metadata,\n      { verbose: this.verbose }\n    );\n    const runManager = await callbackManager_?.handleChainStart(\n      this.toJSON(),\n      fullValues,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      config?.runName\n    );\n    let outputValues: RunOutput;\n    try {\n      outputValues = await (fullValues.signal\n        ? (Promise.race([\n            this._call(fullValues as RunInput, runManager, config),\n            new Promise((_, reject) => {\n              fullValues.signal?.addEventListener(\"abort\", () => {\n                reject(new Error(\"AbortError\"));\n              });\n            }),\n          ]) as Promise<RunOutput>)\n        : this._call(fullValues as RunInput, runManager, config));\n    } catch (e) {\n      await runManager?.handleChainError(e);\n      throw e;\n    }\n    if (!(this.memory == null)) {\n      await this.memory.saveContext(\n        this._selectMemoryInputs(input),\n        outputValues\n      );\n    }\n    await runManager?.handleChainEnd(outputValues);\n    // add the runManager's currentRunId to the outputValues\n    Object.defineProperty(outputValues, RUN_KEY, {\n      value: runManager ? { runId: runManager?.runId } : undefined,\n      configurable: true,\n    });\n    return outputValues;\n  }\n\n  private _validateOutputs(outputs: Record<string, unknown>): void {\n    const missingKeys = this.outputKeys.filter((k) => !(k in outputs));\n    if (missingKeys.length) {\n      throw new Error(\n        `Missing output keys: ${missingKeys.join(\n          \", \"\n        )} from chain ${this._chainType()}`\n      );\n    }\n  }\n\n  async prepOutputs(\n    inputs: Record<string, unknown>,\n    outputs: Record<string, unknown>,\n    returnOnlyOutputs = false\n  ) {\n    this._validateOutputs(outputs);\n    if (this.memory) {\n      await this.memory.saveContext(inputs, outputs);\n    }\n    if (returnOnlyOutputs) {\n      return outputs;\n    }\n    return { ...inputs, ...outputs };\n  }\n\n  /**\n   * Run the core logic of this chain and return the output\n   */\n  abstract _call(\n    values: RunInput,\n    runManager?: CallbackManagerForChainRun,\n    config?: RunnableConfig\n  ): Promise<RunOutput>;\n\n  /**\n   * Return the string type key uniquely identifying this class of chain.\n   */\n  abstract _chainType(): string;\n\n  /**\n   * Return a json-like object representing this chain.\n   */\n  serialize(): SerializedBaseChain {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  abstract get inputKeys(): string[];\n\n  abstract get outputKeys(): string[];\n\n  /** @deprecated Use .invoke() instead. Will be removed in 0.2.0. */\n  async run(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    input: any,\n    config?: Callbacks | RunnableConfig\n  ): Promise<string> {\n    const inputKeys = this.inputKeys.filter(\n      (k) => !this.memory?.memoryKeys.includes(k)\n    );\n    const isKeylessInput = inputKeys.length <= 1;\n    if (!isKeylessInput) {\n      throw new Error(\n        `Chain ${this._chainType()} expects multiple inputs, cannot use 'run' `\n      );\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const values = inputKeys.length ? { [inputKeys[0]]: input } : ({} as any);\n    const returnValues = await this.call(values, config);\n    const keys = Object.keys(returnValues);\n\n    if (keys.length === 1) {\n      return returnValues[keys[0]];\n    }\n    throw new Error(\n      \"return values have multiple keys, `run` only supported when one key currently\"\n    );\n  }\n\n  protected async _formatValues(\n    values: ChainValues & { signal?: AbortSignal; timeout?: number }\n  ) {\n    const fullValues = { ...values } as typeof values;\n    if (fullValues.timeout && !fullValues.signal) {\n      fullValues.signal = AbortSignal.timeout(fullValues.timeout);\n      delete fullValues.timeout;\n    }\n    if (!(this.memory == null)) {\n      const newValues = await this.memory.loadMemoryVariables(\n        this._selectMemoryInputs(values)\n      );\n      for (const [key, value] of Object.entries(newValues)) {\n        fullValues[key] = value;\n      }\n    }\n    return fullValues;\n  }\n\n  /**\n   * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n   *\n   * Run the core logic of this chain and add to output if desired.\n   *\n   * Wraps _call and handles memory.\n   */\n  async call(\n    values: ChainValues & { signal?: AbortSignal; timeout?: number },\n    config?: Callbacks | RunnableConfig,\n    /** @deprecated */\n    tags?: string[]\n  ): Promise<RunOutput> {\n    const parsedConfig = { tags, ...parseCallbackConfigArg(config) };\n    return this.invoke(values as RunInput, parsedConfig);\n  }\n\n  /**\n   * @deprecated Use .batch() instead. Will be removed in 0.2.0.\n   *\n   * Call the chain on all inputs in the list\n   */\n  async apply(\n    inputs: RunInput[],\n    config?: (Callbacks | RunnableConfig)[]\n  ): Promise<RunOutput[]> {\n    return Promise.all(\n      inputs.map(async (i, idx) => this.call(i, config?.[idx]))\n    );\n  }\n\n  /**\n   * Load a chain from a json-like object describing it.\n   */\n  static async deserialize(\n    data: SerializedBaseChain,\n    values: LoadValues = {}\n  ): Promise<BaseChain> {\n    switch (data._type) {\n      case \"llm_chain\": {\n        const { LLMChain } = await import(\"./llm_chain.js\");\n        return LLMChain.deserialize(data);\n      }\n      case \"sequential_chain\": {\n        const { SequentialChain } = await import(\"./sequential_chain.js\");\n        return SequentialChain.deserialize(data);\n      }\n      case \"simple_sequential_chain\": {\n        const { SimpleSequentialChain } = await import(\"./sequential_chain.js\");\n        return SimpleSequentialChain.deserialize(data);\n      }\n      case \"stuff_documents_chain\": {\n        const { StuffDocumentsChain } = await import(\"./combine_docs_chain.js\");\n        return StuffDocumentsChain.deserialize(data);\n      }\n      case \"map_reduce_documents_chain\": {\n        const { MapReduceDocumentsChain } = await import(\n          \"./combine_docs_chain.js\"\n        );\n        return MapReduceDocumentsChain.deserialize(data);\n      }\n      case \"refine_documents_chain\": {\n        const { RefineDocumentsChain } = await import(\n          \"./combine_docs_chain.js\"\n        );\n        return RefineDocumentsChain.deserialize(data);\n      }\n      case \"vector_db_qa\": {\n        const { VectorDBQAChain } = await import(\"./vector_db_qa.js\");\n        return VectorDBQAChain.deserialize(data, values);\n      }\n      case \"api_chain\": {\n        const { APIChain } = await import(\"./api/api_chain.js\");\n        return APIChain.deserialize(data);\n      }\n      default:\n        throw new Error(\n          `Invalid prompt type in config: ${\n            (data as SerializedBaseChain)._type\n          }`\n        );\n    }\n  }\n}\n"],"mappings":"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"}