{"version":3,"file":"types.d.ts","names":["Runnable","BaseOutputParser","AgentAction","AgentFinish","BaseMessage","ChainValues","SerializedLLMChain","LLMChain","AgentInput","AgentActionOutputParser","RunnableSingleActionAgentInput","RunnableMultiActionAgentInput","RunnableAgentInput","AgentMultiActionOutputParser","StoppingMethod","SerializedAgentT","Record","TType","FromLLMInput","ConstructorInput","SerializedFromLLMAndTools","SerializedZeroShotAgent","SerializedAgent"],"sources":["../../src/agents/types.d.ts"],"sourcesContent":["import type { Runnable } from \"@langchain/core/runnables\";\nimport { BaseOutputParser } from \"@langchain/core/output_parsers\";\nimport type { AgentAction, AgentFinish } from \"@langchain/core/agents\";\nimport type { BaseMessage } from \"@langchain/core/messages\";\nimport type { ChainValues } from \"@langchain/core/utils/types\";\nimport { SerializedLLMChain } from \"../chains/serde.js\";\nimport { LLMChain } from \"../chains/llm_chain.js\";\n/**\n * Interface defining the input for creating an agent. It includes the\n * LLMChain instance, an optional output parser, and an optional list of\n * allowed tools.\n */\nexport interface AgentInput {\n    llmChain: LLMChain;\n    outputParser: AgentActionOutputParser | undefined;\n    allowedTools?: string[];\n}\n/**\n * Interface defining the input for creating a single action agent\n * that uses runnables.\n */\nexport interface RunnableSingleActionAgentInput {\n    runnable: Runnable<ChainValues & {\n        agent_scratchpad?: string | BaseMessage[];\n        stop?: string[];\n    }, AgentAction | AgentFinish>;\n    streamRunnable?: boolean;\n    defaultRunName?: string;\n}\n/**\n * Interface defining the input for creating a multi-action agent that uses\n * runnables. It includes the Runnable instance, and an optional list of\n * stop strings.\n */\nexport interface RunnableMultiActionAgentInput {\n    runnable: Runnable<ChainValues & {\n        agent_scratchpad?: string | BaseMessage[];\n        stop?: string[];\n    }, AgentAction[] | AgentAction | AgentFinish>;\n    streamRunnable?: boolean;\n    defaultRunName?: string;\n    stop?: string[];\n}\n/** @deprecated Renamed to RunnableMultiActionAgentInput. */\nexport interface RunnableAgentInput extends RunnableMultiActionAgentInput {\n}\n/**\n * Abstract class representing an output parser specifically for agent\n * actions and finishes in LangChain. It extends the `BaseOutputParser`\n * class.\n */\nexport declare abstract class AgentActionOutputParser extends BaseOutputParser<AgentAction | AgentFinish> {\n}\n/**\n * Abstract class representing an output parser specifically for agents\n * that return multiple actions.\n */\nexport declare abstract class AgentMultiActionOutputParser extends BaseOutputParser<AgentAction[] | AgentFinish> {\n}\n/**\n * Type representing the stopping method for an agent. It can be either\n * 'force' or 'generate'.\n */\nexport type StoppingMethod = \"force\" | \"generate\";\n/**\n * Generic type representing a serialized agent in LangChain. It includes\n * the type of the agent, the serialized form of the LLMChain, and\n * additional properties specific to the agent type.\n */\nexport type SerializedAgentT<TType extends string = string, FromLLMInput extends Record<string, unknown> = Record<string, unknown>, ConstructorInput extends AgentInput = AgentInput> = {\n    _type: TType;\n    llm_chain?: SerializedLLMChain;\n} & (({\n    load_from_llm_and_tools: true;\n} & FromLLMInput) | ({\n    load_from_llm_and_tools?: false;\n} & ConstructorInput));\nexport type SerializedFromLLMAndTools = {\n    suffix?: string;\n    prefix?: string;\n    input_variables?: string[];\n};\n/**\n * Type representing a serialized ZeroShotAgent in LangChain. It extends\n * the `SerializedAgentT` type and includes additional properties specific\n * to the ZeroShotAgent.\n */\nexport type SerializedZeroShotAgent = SerializedAgentT<\"zero-shot-react-description\", SerializedFromLLMAndTools, AgentInput>;\n/**\n * Type representing a serialized agent in LangChain. It is currently\n * synonymous with `SerializedZeroShotAgent`.\n */\nexport type SerializedAgent = SerializedZeroShotAgent;\n"],"mappings":";;;;;;;;;;;;AAYA;;;AAEkBS,UAFDD,UAAAA,CAECC;EAAuB,QAAA,EAD3BF,QAC2B;EAoBxBI,YAAAA,EApBCF,uBAoB4B,GAAA,SAAA;EAAA,YAAA,CAAA,EAAA,MAAA,EAAA;;;;;;;AAuB9C;;;;;AAAmF,UAvBlEE,6BAAAA,CAuBkE;EAMvEG,QAAAA,EA5BEd,QA4BY,CA5BHK,WA4BG,GAAA;IAMdU,gBAAgB,CAAA,EAAA,MAAA,GAjCQX,WAiCR,EAAA;IAAA,IAAA,CAAA,EAAA,MAAA,EAAA;EAAA,CAAA,EA/BrBF,WA+B0Ec,EAAAA,GA/B1Dd,WA+B0Dc,GA/B5Cb,WA+B4Ca,CAAAA;EAAM,cAAoBA,CAAAA,EAAAA,OAAAA;EAAM,cAA4CR,CAAAA,EAAAA,MAAAA;EAAU,IAAGA,CAAAA,EAAAA,MAAAA,EAAAA;;;;AAOtJ;AACpB;AAUA;;;AAAiHA,uBApCnFC,uBAAAA,SAAgCR,gBAoCmDO,CApClCN,WAoCkCM,GApCpBL,WAoCoBK,CAAAA,CAAAA;AAA3D;AAKtD;;;uBAnC8BK,4BAAAA,SAAqCZ,iBAAiBC,gBAAgBC;;;;;KAMxFW,cAAAA;;;;;;KAMAC,qEAAqEC,0BAA0BA,kDAAkDR,aAAaA;SAC/JS;cACKX;;;IAGZY;;IAEAC;KACQC,yBAAAA;;;;;;;;;;KAUAC,uBAAAA,GAA0BN,gDAAgDK,2BAA2BZ;;;;;KAKrGc,eAAAA,GAAkBD"}