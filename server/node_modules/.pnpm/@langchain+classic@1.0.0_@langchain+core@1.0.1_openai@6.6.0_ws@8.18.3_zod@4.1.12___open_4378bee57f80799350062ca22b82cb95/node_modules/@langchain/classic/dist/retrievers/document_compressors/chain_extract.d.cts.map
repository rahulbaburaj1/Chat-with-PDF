{"version":3,"file":"chain_extract.d.cts","names":["BaseLanguageModelInterface","DocumentInterface","PromptTemplate","LLMChain","BaseDocumentCompressor","LLMChainExtractorArgs","Record","LLMChainExtractor","llmChain","getInput","Promise"],"sources":["../../../src/retrievers/document_compressors/chain_extract.d.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport { type DocumentInterface } from \"@langchain/core/documents\";\nimport { PromptTemplate } from \"@langchain/core/prompts\";\nimport { LLMChain } from \"../../chains/llm_chain.js\";\nimport { BaseDocumentCompressor } from \"./index.js\";\n/**\n * Interface for the arguments required to create an instance of\n * LLMChainExtractor.\n */\nexport interface LLMChainExtractorArgs {\n    llmChain: LLMChain;\n    getInput: (query: string, doc: DocumentInterface) => Record<string, unknown>;\n}\n/**\n * A class that uses an LLM chain to extract relevant parts of documents.\n * It extends the BaseDocumentCompressor class.\n */\nexport declare class LLMChainExtractor extends BaseDocumentCompressor {\n    llmChain: LLMChain;\n    getInput: (query: string, doc: DocumentInterface) => Record<string, unknown>;\n    constructor({ llmChain, getInput }: LLMChainExtractorArgs);\n    /**\n     * Compresses a list of documents based on the output of an LLM chain.\n     * @param documents The list of documents to be compressed.\n     * @param query The query to be used for document compression.\n     * @returns A list of compressed documents.\n     */\n    compressDocuments(documents: DocumentInterface[], query: string): Promise<DocumentInterface[]>;\n    /**\n     * Creates a new instance of LLMChainExtractor from a given LLM, prompt\n     * template, and getInput function.\n     * @param llm The BaseLanguageModel instance used for document extraction.\n     * @param prompt The PromptTemplate instance used for document extraction.\n     * @param getInput A function used for constructing the chain input from the query and a Document.\n     * @returns A new instance of LLMChainExtractor.\n     */\n    static fromLLM(llm: BaseLanguageModelInterface, prompt?: PromptTemplate, getInput?: (query: string, doc: DocumentInterface) => Record<string, unknown>): LLMChainExtractor;\n}\n"],"mappings":";;;;;;;;;;AASA;;AACcG,UADGE,qBAAAA,CACHF;EAAQ,QACaF,EADrBE,QACqBF;EAAiB,QAAKK,EAAAA,CAAAA,KAAAA,EAAAA,MAAAA,EAAAA,GAAAA,EAAtBL,iBAAsBK,EAAAA,GAAAA,MAAAA,CAAAA,MAAAA,EAAAA,OAAAA,CAAAA;AAAM;AAM/D;;;;AAEyDA,cAFpCC,iBAAAA,SAA0BH,sBAAAA,CAEUE;EAAM,QAC7CE,EAFJL,QAEIK;EAAQ,QAAEC,EAAAA,CAAAA,KAAAA,EAAAA,MAAAA,EAAAA,GAAAA,EADOR,iBACPQ,EAAAA,GAD6BH,MAC7BG,CAAAA,MAAAA,EAAAA,OAAAA,CAAAA;EAAQ,WAAIJ,CAAAA;IAAAA,QAAAA;IAAAA;EAAAA,CAAAA,EAAAA,qBAAAA;EAAqB;;;;;;EAgBiE,iBAAKC,CAAAA,SAAAA,EATlGL,iBASkGK,EAAAA,EAAAA,KAAAA,EAAAA,MAAAA,CAAAA,EAT7DI,OAS6DJ,CATrDL,iBASqDK,EAAAA,CAAAA;EAAM;;AAnBpE;;;;;;sBAmB7CN,qCAAqCE,gDAAgDD,sBAAsBK,0BAA0BC"}