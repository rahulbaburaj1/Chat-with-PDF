{"version":3,"file":"index.cjs","names":["name: string","type: string","description: string","z","AsymmetricStructuredOutputParser","fields: {\n    allowedComparators: Comparator[];\n    allowedOperators: Operator[];\n  }","QueryTransformer","StructuredQuery","allowedComparators: Comparator[]","allowedOperators: Operator[]","info: AttributeInfo[]","DEFAULT_EXAMPLES","documentContents: string","attributeInfo: AttributeInfo[]","allowedComparators?: Comparator[]","allowedOperators?: Operator[]","examples: InputValues[]","myAllowedComparators: Comparator[]","Comparators","myAllowedOperators: Operator[]","Operators","DEFAULT_SCHEMA","DEFAULT_PREFIX","DEFAULT_SUFFIX","FewShotPromptTemplate","EXAMPLE_PROMPT","opts: QueryConstructorRunnableOptions"],"sources":["../../../src/chains/query_constructor/index.ts"],"sourcesContent":["import { z } from \"zod/v3\";\nimport type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport {\n  Example,\n  interpolateFString,\n  FewShotPromptTemplate,\n} from \"@langchain/core/prompts\";\nimport {\n  InferInteropZodOutput,\n  InputValues,\n} from \"@langchain/core/utils/types\";\nimport {\n  Comparator,\n  Comparators,\n  Operator,\n  Operators,\n  StructuredQuery,\n} from \"@langchain/core/structured_query\";\nimport { Runnable, RunnableConfig } from \"@langchain/core/runnables\";\nimport { QueryTransformer, TraverseType } from \"./parser.js\";\nimport {\n  DEFAULT_EXAMPLES,\n  DEFAULT_PREFIX,\n  DEFAULT_SCHEMA,\n  DEFAULT_SUFFIX,\n  EXAMPLE_PROMPT,\n} from \"./prompt.js\";\nimport { AsymmetricStructuredOutputParser } from \"../../output_parsers/structured.js\";\n\n/**\n * A simple data structure that holds information about an attribute. It\n * is typically used to provide metadata about attributes in other classes\n * or data structures within the LangChain framework.\n */\nexport class AttributeInfo {\n  constructor(\n    public name: string,\n    public type: string,\n    public description: string\n  ) {}\n}\n\nexport { QueryTransformer, type TraverseType };\nexport {\n  DEFAULT_EXAMPLES,\n  DEFAULT_PREFIX,\n  DEFAULT_SCHEMA,\n  DEFAULT_SUFFIX,\n  EXAMPLE_PROMPT,\n};\n\nconst queryInputSchema = /* #__PURE__ */ z.object({\n  query: /* #__PURE__ */ z\n    .string()\n    .describe(\"text string to compare to document contents\"),\n  filter: /* #__PURE__ */ z\n    .string()\n    .optional()\n    .describe(\"logical condition statement for filtering documents\"),\n});\n\n/**\n * A class that extends AsymmetricStructuredOutputParser to parse\n * structured query output.\n */\nexport class StructuredQueryOutputParser extends AsymmetricStructuredOutputParser<\n  typeof queryInputSchema,\n  StructuredQuery\n> {\n  lc_namespace = [\"langchain\", \"chains\", \"query_constructor\"];\n\n  queryTransformer: QueryTransformer;\n\n  constructor(fields: {\n    allowedComparators: Comparator[];\n    allowedOperators: Operator[];\n  }) {\n    super({ ...fields, inputSchema: queryInputSchema });\n\n    const { allowedComparators, allowedOperators } = fields;\n    this.queryTransformer = new QueryTransformer(\n      allowedComparators,\n      allowedOperators\n    );\n  }\n\n  /**\n   * Processes the output of a structured query.\n   * @param query The query string.\n   * @param filter The filter condition.\n   * @returns A Promise that resolves to a StructuredQuery instance.\n   */\n  async outputProcessor({\n    query,\n    filter,\n  }: InferInteropZodOutput<typeof queryInputSchema>): Promise<StructuredQuery> {\n    let myQuery = query;\n    if (myQuery.length === 0) {\n      myQuery = \" \";\n    }\n    if (filter === \"NO_FILTER\" || filter === undefined) {\n      return new StructuredQuery(query);\n    } else {\n      const parsedFilter = await this.queryTransformer.parse(filter);\n      return new StructuredQuery(query, parsedFilter);\n    }\n  }\n\n  /**\n   * Creates a new StructuredQueryOutputParser instance from the provided\n   * components.\n   * @param allowedComparators An array of allowed Comparator instances.\n   * @param allowedOperators An array of allowed Operator instances.\n   * @returns A new StructuredQueryOutputParser instance.\n   */\n  static fromComponents(\n    allowedComparators: Comparator[] = [],\n    allowedOperators: Operator[] = []\n  ) {\n    return new StructuredQueryOutputParser({\n      allowedComparators,\n      allowedOperators,\n    });\n  }\n}\n\nexport function formatAttributeInfo(info: AttributeInfo[]) {\n  const infoObj = info.reduce((acc, attr) => {\n    acc[attr.name] = {\n      type: attr.type,\n      description: attr.description,\n    };\n    return acc;\n  }, {} as { [name: string]: { type: string; description: string } });\n\n  return JSON.stringify(infoObj, null, 2)\n    .replaceAll(\"{\", \"{{\")\n    .replaceAll(\"}\", \"}}\");\n}\n\nconst defaultExample = DEFAULT_EXAMPLES.map((EXAMPLE) => EXAMPLE as Example);\n\nfunction _getPrompt(\n  documentContents: string,\n  attributeInfo: AttributeInfo[],\n  allowedComparators?: Comparator[],\n  allowedOperators?: Operator[],\n  examples: InputValues[] = defaultExample\n) {\n  const myAllowedComparators: Comparator[] =\n    allowedComparators ?? Object.values(Comparators);\n  const myAllowedOperators: Operator[] =\n    allowedOperators ?? Object.values(Operators);\n  const attributeJSON = formatAttributeInfo(attributeInfo);\n  const schema = interpolateFString(DEFAULT_SCHEMA, {\n    allowed_comparators: myAllowedComparators.join(\" | \"),\n    allowed_operators: myAllowedOperators.join(\" | \"),\n  });\n  const prefix = interpolateFString(DEFAULT_PREFIX, {\n    schema,\n  });\n  const suffix = interpolateFString(DEFAULT_SUFFIX, {\n    i: examples.length + 1,\n    content: documentContents,\n    attributes: attributeJSON,\n  });\n\n  const outputParser = StructuredQueryOutputParser.fromComponents(\n    allowedComparators,\n    allowedOperators\n  );\n\n  return new FewShotPromptTemplate({\n    examples,\n    examplePrompt: EXAMPLE_PROMPT,\n    inputVariables: [\"query\"],\n    suffix,\n    prefix,\n    outputParser,\n  });\n}\n\n/**\n * A type that represents options for the query constructor chain.\n */\nexport type QueryConstructorRunnableOptions = {\n  llm: BaseLanguageModelInterface;\n  documentContents: string;\n  attributeInfo: AttributeInfo[];\n  examples?: InputValues[];\n  allowedComparators?: Comparator[];\n  allowedOperators?: Operator[];\n};\n\n/** @deprecated */\nexport type QueryConstructorChainOptions = QueryConstructorRunnableOptions;\n\nexport function loadQueryConstructorRunnable(\n  opts: QueryConstructorRunnableOptions\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): Runnable<any, StructuredQuery, RunnableConfig<Record<string, any>>> {\n  const prompt = _getPrompt(\n    opts.documentContents,\n    opts.attributeInfo,\n    opts.allowedComparators,\n    opts.allowedOperators,\n    opts.examples\n  );\n  const outputParser = StructuredQueryOutputParser.fromComponents(\n    opts.allowedComparators,\n    opts.allowedOperators\n  );\n  return prompt.pipe(opts.llm).pipe(outputParser);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,IAAa,gBAAb,MAA2B;CACzB,YACSA,MACAC,MACAC,aACP;EAHO;EACA;EACA;CACL;AACL;AAWD,MAAM,mCAAmCC,SAAE,OAAO;CAChD,uBAAuBA,SACpB,QAAQ,CACR,SAAS,8CAA8C;CAC1D,wBAAwBA,SACrB,QAAQ,CACR,UAAU,CACV,SAAS,sDAAsD;AACnE,EAAC;;;;;AAMF,IAAa,8BAAb,MAAa,oCAAoCC,oDAG/C;CACA,eAAe;EAAC;EAAa;EAAU;CAAoB;CAE3D;CAEA,YAAYC,QAGT;EACD,MAAM;GAAE,GAAG;GAAQ,aAAa;EAAkB,EAAC;EAEnD,MAAM,EAAE,oBAAoB,kBAAkB,GAAG;EACjD,KAAK,mBAAmB,IAAIC,gCAC1B,oBACA;CAEH;;;;;;;CAQD,MAAM,gBAAgB,EACpB,OACA,QAC+C,EAA4B;EAC3E,IAAI,UAAU;AACd,MAAI,QAAQ,WAAW,GACrB,UAAU;AAEZ,MAAI,WAAW,eAAe,WAAW,OACvC,QAAO,IAAIC,kDAAgB;OACtB;GACL,MAAM,eAAe,MAAM,KAAK,iBAAiB,MAAM,OAAO;AAC9D,UAAO,IAAIA,kDAAgB,OAAO;EACnC;CACF;;;;;;;;CASD,OAAO,eACLC,qBAAmC,CAAE,GACrCC,mBAA+B,CAAE,GACjC;AACA,SAAO,IAAI,4BAA4B;GACrC;GACA;EACD;CACF;AACF;AAED,SAAgB,oBAAoBC,MAAuB;CACzD,MAAM,UAAU,KAAK,OAAO,CAAC,KAAK,SAAS;EACzC,IAAI,KAAK,QAAQ;GACf,MAAM,KAAK;GACX,aAAa,KAAK;EACnB;AACD,SAAO;CACR,GAAE,CAAE,EAA8D;AAEnE,QAAO,KAAK,UAAU,SAAS,MAAM,EAAE,CACpC,WAAW,KAAK,KAAK,CACrB,WAAW,KAAK,KAAK;AACzB;AAED,MAAM,iBAAiBC,gCAAiB,IAAI,CAAC,YAAY,QAAmB;AAE5E,SAAS,WACPC,kBACAC,eACAC,oBACAC,kBACAC,WAA0B,gBAC1B;CACA,MAAMC,uBACJ,sBAAsB,OAAO,OAAOC,8CAAY;CAClD,MAAMC,qBACJ,oBAAoB,OAAO,OAAOC,4CAAU;CAC9C,MAAM,gBAAgB,oBAAoB,cAAc;CACxD,MAAM,0DAA4BC,+BAAgB;EAChD,qBAAqB,qBAAqB,KAAK,MAAM;EACrD,mBAAmB,mBAAmB,KAAK,MAAM;CAClD,EAAC;CACF,MAAM,0DAA4BC,+BAAgB,EAChD,OACD,EAAC;CACF,MAAM,0DAA4BC,+BAAgB;EAChD,GAAG,SAAS,SAAS;EACrB,SAAS;EACT,YAAY;CACb,EAAC;CAEF,MAAM,eAAe,4BAA4B,eAC/C,oBACA,iBACD;AAED,QAAO,IAAIC,+CAAsB;EAC/B;EACA,eAAeC;EACf,gBAAgB,CAAC,OAAQ;EACzB;EACA;EACA;CACD;AACF;AAiBD,SAAgB,6BACdC,MAEqE;CACrE,MAAM,SAAS,WACb,KAAK,kBACL,KAAK,eACL,KAAK,oBACL,KAAK,kBACL,KAAK,SACN;CACD,MAAM,eAAe,4BAA4B,eAC/C,KAAK,oBACL,KAAK,iBACN;AACD,QAAO,OAAO,KAAK,KAAK,IAAI,CAAC,KAAK,aAAa;AAChD"}