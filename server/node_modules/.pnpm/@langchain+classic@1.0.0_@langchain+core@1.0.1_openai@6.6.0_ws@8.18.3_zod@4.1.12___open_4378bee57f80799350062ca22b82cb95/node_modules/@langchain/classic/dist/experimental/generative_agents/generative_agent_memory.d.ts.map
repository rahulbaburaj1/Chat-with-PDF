{"version":3,"file":"generative_agent_memory.d.ts","names":["BaseLanguageModelInterface","PromptTemplate","Document","ChainValues","BaseMemory","InputValues","OutputValues","CallbackManagerForChainRun","Callbacks","TimeWeightedVectorStoreRetriever","BaseChain","LLMChain","GenerativeAgentMemoryConfig","GenerativeAgentMemoryChain","Omit","Promise","Date","GenerativeAgentMemory","Record"],"sources":["../../../src/experimental/generative_agents/generative_agent_memory.d.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport { PromptTemplate } from \"@langchain/core/prompts\";\nimport { Document } from \"@langchain/core/documents\";\nimport { ChainValues } from \"@langchain/core/utils/types\";\nimport { BaseMemory, InputValues, OutputValues } from \"@langchain/core/memory\";\nimport { CallbackManagerForChainRun, Callbacks } from \"@langchain/core/callbacks/manager\";\nimport { TimeWeightedVectorStoreRetriever } from \"../../retrievers/time_weighted.js\";\nimport { BaseChain } from \"../../chains/base.js\";\nimport { LLMChain } from \"../../chains/llm_chain.js\";\nexport type GenerativeAgentMemoryConfig = {\n    reflectionThreshold?: number;\n    importanceWeight?: number;\n    verbose?: boolean;\n    maxTokensLimit?: number;\n};\n/**\n * Class that manages the memory of a generative agent in LangChain. It\n * extends the `BaseChain` class and has methods for adding observations\n * or memories to the agent's memory, scoring the importance of a memory,\n * reflecting on recent events to add synthesized memories, and generating\n * insights on a topic of reflection based on pertinent memories.\n */\ndeclare class GenerativeAgentMemoryChain extends BaseChain {\n    static lc_name(): string;\n    reflecting: boolean;\n    reflectionThreshold?: number;\n    importanceWeight: number;\n    memoryRetriever: TimeWeightedVectorStoreRetriever;\n    llm: BaseLanguageModelInterface;\n    verbose: boolean;\n    private aggregateImportance;\n    constructor(llm: BaseLanguageModelInterface, memoryRetriever: TimeWeightedVectorStoreRetriever, config: Omit<GenerativeAgentMemoryConfig, \"maxTokensLimit\">);\n    _chainType(): string;\n    get inputKeys(): string[];\n    get outputKeys(): string[];\n    /**\n     * Method that creates a new LLMChain with the given prompt.\n     * @param prompt The PromptTemplate to use for the new LLMChain.\n     * @returns A new LLMChain instance.\n     */\n    chain(prompt: PromptTemplate): LLMChain;\n    _call(values: ChainValues, runManager?: CallbackManagerForChainRun): Promise<{\n        output: number;\n    }>;\n    /**\n     * Method that pauses the agent to reflect on recent events and generate\n     * new insights.\n     * @param now The current date.\n     * @param runManager The CallbackManagerForChainRun to use for the reflection.\n     * @returns An array of new insights as strings.\n     */\n    pauseToReflect(now?: Date, runManager?: CallbackManagerForChainRun): Promise<string[]>;\n    /**\n     * Method that scores the importance of a given memory.\n     * @param memoryContent The content of the memory to score.\n     * @param runManager The CallbackManagerForChainRun to use for scoring.\n     * @returns The importance score of the memory as a number.\n     */\n    scoreMemoryImportance(memoryContent: string, runManager?: CallbackManagerForChainRun): Promise<number>;\n    /**\n     * Method that retrieves the topics of reflection based on the last K\n     * memories.\n     * @param lastK The number of most recent memories to consider for generating topics.\n     * @param runManager The CallbackManagerForChainRun to use for retrieving topics.\n     * @returns An array of topics of reflection as strings.\n     */\n    getTopicsOfReflection(lastK: number, runManager?: CallbackManagerForChainRun): Promise<string[]>;\n    /**\n     * Method that generates insights on a given topic of reflection based on\n     * pertinent memories.\n     * @param topic The topic of reflection.\n     * @param now The current date.\n     * @param runManager The CallbackManagerForChainRun to use for generating insights.\n     * @returns An array of insights as strings.\n     */\n    getInsightsOnTopic(topic: string, now?: Date, runManager?: CallbackManagerForChainRun): Promise<string[]>;\n    /**\n     * Method that parses a newline-separated string into a list of strings.\n     * @param text The newline-separated string to parse.\n     * @returns An array of strings.\n     */\n    static parseList(text: string): string[];\n    // TODO: Mock \"now\" to simulate different times\n    /**\n     * Method that fetches memories related to a given observation.\n     * @param observation The observation to fetch memories for.\n     * @param _now The current date.\n     * @param runManager The CallbackManagerForChainRun to use for fetching memories.\n     * @returns An array of Document instances representing the fetched memories.\n     */\n    fetchMemories(observation: string, _now?: Date, runManager?: CallbackManagerForChainRun): Promise<Document[]>;\n}\n/**\n * Class that manages the memory of a generative agent in LangChain. It\n * extends the `BaseMemory` class and has methods for adding a memory,\n * formatting memories, getting memories until a token limit is reached,\n * loading memory variables, saving the context of a model run to memory,\n * and clearing memory contents.\n * @example\n * ```typescript\n * const createNewMemoryRetriever = async () => {\n *   const vectorStore = new MemoryVectorStore(new OpenAIEmbeddings());\n *   const retriever = new TimeWeightedVectorStoreRetriever({\n *     vectorStore,\n *     otherScoreKeys: [\"importance\"],\n *     k: 15,\n *   });\n *   return retriever;\n * };\n * const tommiesMemory = new GenerativeAgentMemory(\n *   llm,\n *   await createNewMemoryRetriever(),\n *   { reflectionThreshold: 8 },\n * );\n * const summary = await tommiesMemory.getSummary();\n * ```\n */\nexport declare class GenerativeAgentMemory extends BaseMemory {\n    llm: BaseLanguageModelInterface;\n    memoryRetriever: TimeWeightedVectorStoreRetriever;\n    verbose: boolean;\n    reflectionThreshold?: number;\n    private maxTokensLimit;\n    queriesKey: string;\n    mostRecentMemoriesTokenKey: string;\n    addMemoryKey: string;\n    relevantMemoriesKey: string;\n    relevantMemoriesSimpleKey: string;\n    mostRecentMemoriesKey: string;\n    nowKey: string;\n    memoryChain: GenerativeAgentMemoryChain;\n    constructor(llm: BaseLanguageModelInterface, memoryRetriever: TimeWeightedVectorStoreRetriever, config?: GenerativeAgentMemoryConfig);\n    /**\n     * Method that returns the key for relevant memories.\n     * @returns The key for relevant memories as a string.\n     */\n    getRelevantMemoriesKey(): string;\n    /**\n     * Method that returns the key for the most recent memories token.\n     * @returns The key for the most recent memories token as a string.\n     */\n    getMostRecentMemoriesTokenKey(): string;\n    /**\n     * Method that returns the key for adding a memory.\n     * @returns The key for adding a memory as a string.\n     */\n    getAddMemoryKey(): string;\n    /**\n     * Method that returns the key for the current time.\n     * @returns The key for the current time as a string.\n     */\n    getCurrentTimeKey(): string;\n    get memoryKeys(): string[];\n    /**\n     * Method that adds a memory to the agent's memory.\n     * @param memoryContent The content of the memory to add.\n     * @param now The current date.\n     * @param metadata The metadata for the memory.\n     * @param callbacks The Callbacks to use for adding the memory.\n     * @returns The result of the memory addition.\n     */\n    addMemory(memoryContent: string, now?: Date, metadata?: Record<string, unknown>, callbacks?: Callbacks): Promise<ChainValues>;\n    /**\n     * Method that formats the given relevant memories in detail.\n     * @param relevantMemories The relevant memories to format.\n     * @returns The formatted memories as a string.\n     */\n    formatMemoriesDetail(relevantMemories: Document[]): string;\n    /**\n     * Method that formats the given relevant memories in a simple manner.\n     * @param relevantMemories The relevant memories to format.\n     * @returns The formatted memories as a string.\n     */\n    formatMemoriesSimple(relevantMemories: Document[]): string;\n    /**\n     * Method that retrieves memories until a token limit is reached.\n     * @param consumedTokens The number of tokens consumed so far.\n     * @returns The memories as a string.\n     */\n    getMemoriesUntilLimit(consumedTokens: number): Promise<string>;\n    get memoryVariables(): string[];\n    /**\n     * Method that loads memory variables based on the given inputs.\n     * @param inputs The inputs to use for loading memory variables.\n     * @returns An object containing the loaded memory variables.\n     */\n    loadMemoryVariables(inputs: InputValues): Promise<Record<string, string>>;\n    /**\n     * Method that saves the context of a model run to memory.\n     * @param _inputs The inputs of the model run.\n     * @param outputs The outputs of the model run.\n     * @returns Nothing.\n     */\n    saveContext(_inputs: InputValues, outputs: OutputValues): Promise<void>;\n    /**\n     * Method that clears the memory contents.\n     * @returns Nothing.\n     */\n    clear(): void;\n}\nexport {};\n"],"mappings":";;;;;;;;;;;KASYY,2BAAAA;;EAAAA,gBAAAA,CAAAA,EAAAA,MAAAA;EAaEC,OAAAA,CAAAA,EAAAA,OAAAA;EAA0B,cAAA,CAAA,EAAA,MAAA;CAAA;;;;;;;;cAA1BA,0BAAAA,SAAmCH,SAAAA,CAmB/BP;EAAW,OAAeI,OAAAA,CAAAA,CAAAA,EAAAA,MAAAA;EAA0B,UAAGQ,EAAAA,OAAAA;EAAO,mBAUvDC,CAAAA,EAAAA,MAAAA;EAAI,gBAAeT,EAAAA,MAAAA;EAA0B,eAAGQ,EAxBpDN,gCAwBoDM;EAAO,GAOlBR,EA9BrDP,0BA8BqDO;EAA0B,OAAGQ,EAAAA,OAAAA;EAAO,QAQ5CR,mBAAAA;EAA0B,WAAGQ,CAAAA,GAAAA,EAnC9Df,0BAmC8De,EAAAA,eAAAA,EAnCjBN,gCAmCiBM,EAAAA,MAAAA,EAnCyBD,IAmCzBC,CAnC8BH,2BAmC9BG,EAAAA,gBAAAA,CAAAA;EAAO,UAS9CC,CAAAA,CAAAA,EAAAA,MAAAA;EAAI,IAAeT,SAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA;EAA0B,IAAGQ,UAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA;EAAO;;;;;EArDzC,KAAA,CAAA,MAAA,EAkBxCd,cAlBwC,CAAA,EAkBvBU,QAlBuB;EA+FrCM,KAAAA,CAAAA,MAAAA,EA5EHd,WA4EwB,EAAA,UAAA,CAAA,EA5EEI,0BA4EF,CAAA,EA5E+BQ,OA4E/B,CAAA;IAAA,MAAA,EAAA,MAAA;EAAA,CAAA,CAAA;EACP;;;;;;;EA2C+B,cAA+BP,CAAAA,GAAAA,CAAAA,EA9GxEQ,IA8GwER,EAAAA,UAAAA,CAAAA,EA9GrDD,0BA8GqDC,CAAAA,EA9GxBO,OA8GwBP,CAAAA,MAAAA,EAAAA,CAAAA;EAAS;;;;;;EAyB/D,qBAAWU,CAAAA,aAAAA,EAAAA,MAAAA,EAAAA,UAAAA,CAAAA,EAhIQX,0BAgIRW,CAAAA,EAhIqCH,OAgIrCG,CAAAA,MAAAA,CAAAA;EAAM;;;;;AArEC;;oDAnDPX,6BAA6BQ;;;;;;;;;0CASvCC,mBAAmBT,6BAA6BQ;;;;;;;;;;;;;;;4CAe9CC,mBAAmBT,6BAA6BQ,QAAQb;;;;;;;;;;;;;;;;;;;;;;;;;;;cA2BjFe,qBAAAA,SAA8Bb,UAAAA;OAC1CJ;mBACYS;;;;;;;;;;;eAWJI;mBACIb,6CAA6CS,2CAA2CG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yCA8BlEI,iBAAiBE,qCAAqCV,YAAYO,QAAQZ;;;;;;yCAM1ED;;;;;;yCAMAA;;;;;;iDAMQa;;;;;;;8BAOnBV,cAAcU,QAAQG;;;;;;;uBAO7Bb,sBAAsBC,eAAeS"}