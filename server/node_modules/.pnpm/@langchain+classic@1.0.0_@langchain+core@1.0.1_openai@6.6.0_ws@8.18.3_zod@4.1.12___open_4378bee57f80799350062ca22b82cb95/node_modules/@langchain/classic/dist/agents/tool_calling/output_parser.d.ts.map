{"version":3,"file":"output_parser.d.ts","names":["AgentAction","AgentFinish","AgentStep","AIMessage","BaseMessage","ChatGeneration","AgentMultiActionOutputParser","ToolsAgentAction","ToolsAgentStep","parseAIMessageToToolAction","ToolCallingAgentOutputParser","Promise"],"sources":["../../../src/agents/tool_calling/output_parser.d.ts"],"sourcesContent":["import { AgentAction, AgentFinish, AgentStep } from \"@langchain/core/agents\";\nimport { AIMessage, BaseMessage } from \"@langchain/core/messages\";\nimport { ChatGeneration } from \"@langchain/core/outputs\";\nimport { AgentMultiActionOutputParser } from \"../types.js\";\n/**\n * Type that represents an agent action with an optional message log.\n */\nexport type ToolsAgentAction = AgentAction & {\n    toolCallId: string;\n    messageLog?: BaseMessage[];\n};\nexport type ToolsAgentStep = AgentStep & {\n    action: ToolsAgentAction;\n};\nexport declare function parseAIMessageToToolAction(message: AIMessage): ToolsAgentAction[] | AgentFinish;\nexport declare class ToolCallingAgentOutputParser extends AgentMultiActionOutputParser {\n    lc_namespace: string[];\n    static lc_name(): string;\n    parse(text: string): Promise<AgentAction[] | AgentFinish>;\n    parseResult(generations: ChatGeneration[]): Promise<AgentFinish | ToolsAgentAction[]>;\n    getFormatInstructions(): string;\n}\n"],"mappings":";;;;;;;AAOA;;AAA+BA,KAAnBO,gBAAAA,GAAmBP,WAAAA,GAAAA;EAAW,UAEzBI,EAAAA,MAAAA;EAAW,UAAA,CAAA,EAAXA,WAAW,EAAA;AAE5B,CAAA;AAA0B,KAAdI,cAAAA,GAAiBN,SAAH,GAAA;EAAA,MAAGA,EACjBK,gBADiBL;CAAS"}