{"version":3,"file":"coerce.cjs","names":[],"sources":["../../../../../../../../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/coerce.js"],"sourcesContent":["'use strict'\n\nconst SemVer = require('../classes/semver')\nconst parse = require('./parse')\nconst { safeRe: re, t } = require('../internal/re')\n\nconst coerce = (version, options) => {\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version === 'number') {\n    version = String(version)\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  options = options || {}\n\n  let match = null\n  if (!options.rtl) {\n    match = version.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE])\n  } else {\n    // Find the right-most coercible string that does not share\n    // a terminus with a more left-ward coercible string.\n    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'\n    // With includePrerelease option set, '1.2.3.4-rc' wants to coerce '2.3.4-rc', not '2.3.4'\n    //\n    // Walk through the string checking with a /g regexp\n    // Manually set the index so as to pick up overlapping matches.\n    // Stop when we get a match that ends at the string end, since no\n    // coercible string can be more right-ward without the same terminus.\n    const coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL]\n    let next\n    while ((next = coerceRtlRegex.exec(version)) &&\n        (!match || match.index + match[0].length !== version.length)\n    ) {\n      if (!match ||\n            next.index + next[0].length !== match.index + match[0].length) {\n        match = next\n      }\n      coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length\n    }\n    // leave it in a clean state\n    coerceRtlRegex.lastIndex = -1\n  }\n\n  if (match === null) {\n    return null\n  }\n\n  const major = match[2]\n  const minor = match[3] || '0'\n  const patch = match[4] || '0'\n  const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : ''\n  const build = options.includePrerelease && match[6] ? `+${match[6]}` : ''\n\n  return parse(`${major}.${minor}.${patch}${prerelease}${build}`, options)\n}\nmodule.exports = coerce\n"],"x_google_ignoreList":[0],"mappings":";;;;;;;;;;CAEA,MAAM;CACN,MAAM;CACN,MAAM,EAAE,QAAQ,IAAI,GAAG;CAEvB,MAAM,SAAS,CAAC,SAAS,YAAY;AACnC,MAAI,mBAAmB,OACrB,QAAO;AAGT,MAAI,OAAO,YAAY,UACrB,UAAU,OAAO,QAAQ;AAG3B,MAAI,OAAO,YAAY,SACrB,QAAO;EAGT,UAAU,WAAW,CAAE;EAEvB,IAAI,QAAQ;AACZ,MAAI,CAAC,QAAQ,KACX,QAAQ,QAAQ,MAAM,QAAQ,oBAAoB,GAAG,EAAE,cAAc,GAAG,EAAE,QAAQ;OAC7E;GAUL,MAAM,iBAAiB,QAAQ,oBAAoB,GAAG,EAAE,iBAAiB,GAAG,EAAE;GAC9E,IAAI;AACJ,WAAQ,OAAO,eAAe,KAAK,QAAQ,MACtC,CAAC,SAAS,MAAM,QAAQ,MAAM,GAAG,WAAW,QAAQ,SACvD;AACA,QAAI,CAAC,SACC,KAAK,QAAQ,KAAK,GAAG,WAAW,MAAM,QAAQ,MAAM,GAAG,QAC3D,QAAQ;IAEV,eAAe,YAAY,KAAK,QAAQ,KAAK,GAAG,SAAS,KAAK,GAAG;GAClE;GAED,eAAe,YAAY;EAC5B;AAED,MAAI,UAAU,KACZ,QAAO;EAGT,MAAM,QAAQ,MAAM;EACpB,MAAM,QAAQ,MAAM,MAAM;EAC1B,MAAM,QAAQ,MAAM,MAAM;EAC1B,MAAM,aAAa,QAAQ,qBAAqB,MAAM,KAAK,CAAC,CAAC,EAAE,MAAM,IAAI,GAAG;EAC5E,MAAM,QAAQ,QAAQ,qBAAqB,MAAM,KAAK,CAAC,CAAC,EAAE,MAAM,IAAI,GAAG;AAEvE,SAAO,MAAM,GAAG,MAAM,CAAC,EAAE,MAAM,CAAC,EAAE,QAAQ,aAAa,OAAO,EAAE,QAAQ;CACzE;CACD,OAAO,UAAU"}