{"version":3,"file":"base.d.ts","names":["BaseLanguageModelInterface","AgentStep","ChainValues","BaseCallbackConfig","Callbacks","BaseChain","LLMChain","LLMChainInput","LLMEvalChainInput","EvalOutputType","T","L","ExtractLLMCallOptions","LanguageModelInterface","CallOptions","eqSet","Set","Record","LLMEvalChain","EvalChain","RunInput","RunOutput","StringEvaluatorArgs","PairwiseStringEvaluatorArgs","LLMPairwiseStringEvaluatorArgs","LLMTrajectoryEvaluatorArgs","LLMStringEvaluator","Promise","StringEvaluator","PairwiseStringEvaluator","LLMPairwiseStringEvaluator","AgentTrajectoryEvaluator"],"sources":["../../src/evaluation/base.d.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport { AgentStep } from \"@langchain/core/agents\";\nimport { ChainValues } from \"@langchain/core/utils/types\";\nimport { BaseCallbackConfig, Callbacks } from \"@langchain/core/callbacks/manager\";\nimport { BaseChain, LLMChain, LLMChainInput } from \"../chains/index.js\";\n/**\n * Base input for evaluators.\n */\nexport interface LLMEvalChainInput<T extends EvalOutputType = EvalOutputType, L extends BaseLanguageModelInterface = BaseLanguageModelInterface> extends LLMChainInput<T, L> {\n}\nexport type ExtractLLMCallOptions<LanguageModelInterface> = LanguageModelInterface extends BaseLanguageModelInterface<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nany, infer CallOptions> ? CallOptions : never;\n/**\n * Compare two sets for equality\n *\n * @param xs\n * @param ys\n */\nexport declare const eqSet: (xs: Set<string>, ys: Set<string>) => boolean;\n/**\n * The type of the output of an evaluation evaluator.\n */\nexport type EvalOutputType = Record<string, string | number | boolean>;\n/**\n * Base llm chain class for evaluators.\n */\nexport declare abstract class LLMEvalChain<T extends EvalOutputType = EvalOutputType, L extends BaseLanguageModelInterface = BaseLanguageModelInterface> extends LLMChain<T, L> {\n    requiresInput?: boolean;\n    requiresReference?: boolean;\n    skipInputWarning?: string;\n    skipReferenceWarning?: string;\n    /**\n     * Check if the evaluation arguments are valid.\n     * @param reference  The reference label.\n     * @param input The input string.\n     * @throws {Error} If the evaluator requires an input string but none is provided, or if the evaluator requires a reference label but none is provided.\n     */\n    checkEvaluationArgs(reference?: string, input?: string): void;\n}\n/**\n * Base chain class for evaluators.\n */\nexport declare abstract class EvalChain<RunInput extends ChainValues = ChainValues, RunOutput extends ChainValues = ChainValues> extends BaseChain<RunInput, RunOutput> {\n    requiresInput?: boolean;\n    requiresReference?: boolean;\n    skipInputWarning?: string;\n    skipReferenceWarning?: string;\n    /**\n     * Check if the evaluation arguments are valid.\n     * @param reference  The reference label.\n     * @param input The input string.\n     * @throws {Error} If the evaluator requires an input string but none is provided, or if the evaluator requires a reference label but none is provided.\n     */\n    checkEvaluationArgs(reference?: string, input?: string): void;\n}\n/**\n * @field prediction The output string from the  model.\n * @field reference The expected output / reference string.\n * @field input The input string.\n */\nexport interface StringEvaluatorArgs {\n    prediction: string;\n    reference?: string;\n    input?: string;\n}\n/**\n * @field prediction The output string from the first model.\n * @field predictionB The output string from the second model.\n */\nexport interface PairwiseStringEvaluatorArgs {\n    prediction: string;\n    predictionB: string;\n}\n/**\n * @field The input string.\n * @field prediction The output string from the first model.\n * @field predictionB The output string from the second model.\n * @field reference The expected output / reference string.\n */\nexport interface LLMPairwiseStringEvaluatorArgs {\n    input: string;\n    prediction: string;\n    predictionB: string;\n    reference?: string;\n}\n/**\n * Args for AgentTrajectoryEvaluator\n * @field input The input to the agent.\n * @field prediction The final predicted response.\n * @field reference The reference answer.\n * @field agentTrajectory  The intermediate steps forming the agent trajectory.\n */\nexport interface LLMTrajectoryEvaluatorArgs {\n    input: string;\n    prediction: string;\n    reference?: string;\n    agentTrajectory: AgentStep[];\n}\n/**\n * Grade, tag, or otherwise evaluate predictions relative to their inputs\n * and/or reference labels\n */\nexport declare abstract class LLMStringEvaluator<T extends EvalOutputType = EvalOutputType, L extends BaseLanguageModelInterface = BaseLanguageModelInterface> extends LLMEvalChain<T, L> {\n    /**\n     * The name of the evaluation.\n     */\n    evaluationName?: string;\n    /**\n     * Evaluate Chain or LLM output, based on optional input and label.\n     * @returns The evaluation results containing the score or value. It is recommended that the dictionary contain the following keys:\n     * - score: the score of the evaluation, if applicable.\n     * - value: the string value of the evaluation, if applicable.\n     * - reasoning: the reasoning for the evaluation, if applicable.\n     * @param args\n     * @param callOptions\n     * @param config\n     */\n    abstract _evaluateStrings(args: StringEvaluatorArgs & ExtractLLMCallOptions<this[\"llm\"]>, config?: Callbacks | BaseCallbackConfig): Promise<ChainValues>;\n    /**\n     * Evaluate Chain or LLM output, based on optional input and label.\n     * @returns The evaluation results containing the score or value. It is recommended that the dictionary contain the following keys:\n     * - score: the score of the evaluation, if applicable.\n     * - value: the string value of the evaluation, if applicable.\n     * - reasoning: the reasoning for the evaluation, if applicable.\n     * @param args\n     * @param callOptions\n     * @param config\n     */\n    evaluateStrings(args: StringEvaluatorArgs & ExtractLLMCallOptions<this[\"llm\"]>, config?: Callbacks | BaseCallbackConfig): Promise<ChainValues>;\n}\n/**\n * Grade, tag, or otherwise evaluate predictions relative to their inputs\n * and/or reference labels\n */\nexport declare abstract class StringEvaluator extends EvalChain {\n    /**\n     * The name of the evaluation.\n     */\n    evaluationName?: string;\n    /**\n     * Evaluate Chain or LLM output, based on optional input and label.\n     * @returns The evaluation results containing the score or value. It is recommended that the dictionary contain the following keys:\n     * - score: the score of the evaluation, if applicable.\n     * - value: the string value of the evaluation, if applicable.\n     * - reasoning: the reasoning for the evaluation, if applicable.\n     * @param args\n     * @param config\n     */\n    abstract _evaluateStrings(args: StringEvaluatorArgs, config?: Callbacks | BaseCallbackConfig): Promise<ChainValues>;\n    /**\n     * Evaluate Chain or LLM output, based on optional input and label.\n     * @returns The evaluation results containing the score or value. It is recommended that the dictionary contain the following keys:\n     * - score: the score of the evaluation, if applicable.\n     * - value: the string value of the evaluation, if applicable.\n     * - reasoning: the reasoning for the evaluation, if applicable.\n     * @param args\n     * @param config\n     */\n    evaluateStrings(args: StringEvaluatorArgs, config?: Callbacks | BaseCallbackConfig): Promise<ChainValues>;\n}\n/**\n * Compare the output of two models (or two outputs of the same model).\n */\nexport declare abstract class PairwiseStringEvaluator extends EvalChain {\n    /**\n     * The name of the evaluation.\n     */\n    evaluationName?: string;\n    /**\n     * Evaluate the output string pairs.\n     * @param args\n     * @param config\n     * @return A dictionary containing the preference, scores, and/or other information.\n     */\n    abstract _evaluateStringPairs(args: PairwiseStringEvaluatorArgs, config?: Callbacks | BaseCallbackConfig): Promise<ChainValues>;\n    /**\n     * Evaluate the output string pairs.\n     * @param args\n     * @param config\n     * @return A dictionary containing the preference, scores, and/or other information.\n     */\n    evaluateStringPairs(args: PairwiseStringEvaluatorArgs, config?: Callbacks | BaseCallbackConfig): Promise<ChainValues>;\n}\n/**\n * Compare the output of two models (or two outputs of the same model).\n */\nexport declare abstract class LLMPairwiseStringEvaluator extends LLMEvalChain {\n    /**\n     * The name of the evaluation.\n     */\n    evaluationName?: string;\n    /**\n     * Evaluate the output string pairs.\n     * @param args\n     * @param callOptions\n     * @param config\n     * @return A dictionary containing the preference, scores, and/or other information.\n     */\n    abstract _evaluateStringPairs(args: LLMPairwiseStringEvaluatorArgs, callOptions?: ExtractLLMCallOptions<this[\"llm\"]>, config?: Callbacks | BaseCallbackConfig): Promise<ChainValues>;\n    /**\n     * Evaluate the output string pairs.\n     * @param args\n     * @param callOptions\n     * @param config\n     * @return A dictionary containing the preference, scores, and/or other information.\n     */\n    evaluateStringPairs(args: LLMPairwiseStringEvaluatorArgs, callOptions?: ExtractLLMCallOptions<this[\"llm\"]>, config?: Callbacks | BaseCallbackConfig): Promise<ChainValues>;\n}\n/**\n * Interface for evaluating agent trajectories.\n */\nexport declare abstract class AgentTrajectoryEvaluator extends LLMEvalChain {\n    requiresInput: boolean;\n    /**\n     * The name of the evaluation.\n     */\n    evaluationName?: string;\n    /**\n     * Evaluate a trajectory.\n     * @return The evaluation result.\n     * @param args\n     * @param callOptions\n     * @param config\n     */\n    abstract _evaluateAgentTrajectory(args: LLMTrajectoryEvaluatorArgs, callOptions?: ExtractLLMCallOptions<this[\"llm\"]>, config?: Callbacks | BaseCallbackConfig): Promise<ChainValues>;\n    /**\n     * Evaluate a trajectory.\n     * @return The evaluation result.\n     * @param args\n     * @param callOptions\n     * @param config\n     */\n    evaluateAgentTrajectory(args: LLMTrajectoryEvaluatorArgs, callOptions?: ExtractLLMCallOptions<this[\"llm\"]>, config?: Callbacks | BaseCallbackConfig): Promise<ChainValues>;\n}\n"],"mappings":"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"}