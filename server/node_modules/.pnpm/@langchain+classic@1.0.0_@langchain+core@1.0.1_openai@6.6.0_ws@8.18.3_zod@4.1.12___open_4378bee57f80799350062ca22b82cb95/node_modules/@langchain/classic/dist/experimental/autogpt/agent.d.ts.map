{"version":3,"file":"agent.d.ts","names":["VectorStoreRetrieverInterface","Tool","BaseMessage","BaseChatModel","LLMChain","AutoGPTOutputParser","ObjectTool","TokenTextSplitter","AutoGPTInput","AutoGPT","aiName","memory","chain","outputParser","tools","feedbackTool","maxIterations","Required","Omit","aiRole","Promise"],"sources":["../../../src/experimental/autogpt/agent.d.ts"],"sourcesContent":["import type { VectorStoreRetrieverInterface } from \"@langchain/core/vectorstores\";\nimport { Tool } from \"@langchain/core/tools\";\nimport { BaseMessage } from \"@langchain/core/messages\";\nimport { BaseChatModel } from \"@langchain/core/language_models/chat_models\";\nimport { LLMChain } from \"../../chains/llm_chain.js\";\nimport { AutoGPTOutputParser } from \"./output_parser.js\";\n// import { HumanInputRun } from \"./tools/human/tool\"; // TODO\nimport { ObjectTool } from \"./schema.js\";\nimport { TokenTextSplitter } from \"../../text_splitter.js\";\n/**\n * Interface for the input parameters of the AutoGPT class.\n */\nexport interface AutoGPTInput {\n    aiName: string;\n    aiRole: string;\n    memory: VectorStoreRetrieverInterface;\n    humanInTheLoop?: boolean;\n    outputParser?: AutoGPTOutputParser;\n    maxIterations?: number;\n}\n/**\n * Class representing the AutoGPT concept with LangChain primitives. It is\n * designed to be used with a set of tools such as a search tool,\n * write-file tool, and a read-file tool.\n * @example\n * ```typescript\n * const autogpt = AutoGPT.fromLLMAndTools(\n *   new ChatOpenAI({ model: \"gpt-4o-mini\", temperature: 0 }),\n *   [\n *     new ReadFileTool({ store: new InMemoryFileStore() }),\n *     new WriteFileTool({ store: new InMemoryFileStore() }),\n *     new SerpAPI(\"YOUR_SERPAPI_API_KEY\", {\n *       location: \"San Francisco,California,United States\",\n *       hl: \"en\",\n *       gl: \"us\",\n *     }),\n *   ],\n *   {\n *     memory: new MemoryVectorStore(new OpenAIEmbeddings()).asRetriever(),\n *     aiName: \"Tom\",\n *     aiRole: \"Assistant\",\n *   },\n * );\n * const result = await autogpt.run([\"write a weather report for SF today\"]);\n * ```\n */\nexport declare class AutoGPT {\n    aiName: string;\n    memory: VectorStoreRetrieverInterface;\n    fullMessageHistory: BaseMessage[];\n    nextActionCount: number;\n    chain: LLMChain;\n    outputParser: AutoGPTOutputParser;\n    tools: ObjectTool[];\n    feedbackTool?: Tool;\n    maxIterations: number;\n    // Currently not generic enough to support any text splitter.\n    textSplitter: TokenTextSplitter;\n    constructor({ aiName, memory, chain, outputParser, tools, feedbackTool, maxIterations }: Omit<Required<AutoGPTInput>, \"aiRole\" | \"humanInTheLoop\"> & {\n        chain: LLMChain;\n        tools: ObjectTool[];\n        feedbackTool?: Tool;\n    });\n    /**\n     * Creates a new AutoGPT instance from a given LLM and a set of tools.\n     * @param llm A BaseChatModel object.\n     * @param tools An array of ObjectTool objects.\n     * @param options.aiName The name of the AI.\n     * @param options.aiRole The role of the AI.\n     * @param options.memory A VectorStoreRetriever object that represents the memory of the AI.\n     * @param options.maxIterations The maximum number of iterations the AI can perform.\n     * @param options.outputParser An AutoGPTOutputParser object that parses the output of the AI.\n     * @returns A new instance of the AutoGPT class.\n     */\n    static fromLLMAndTools(llm: BaseChatModel, tools: ObjectTool[], { aiName, aiRole, memory, maxIterations, \n    // humanInTheLoop = false,\n    outputParser }: AutoGPTInput): AutoGPT;\n    /**\n     * Runs the AI with a given set of goals.\n     * @param goals An array of strings representing the goals.\n     * @returns A string representing the result of the run or undefined if the maximum number of iterations is reached without a result.\n     */\n    run(goals: string[]): Promise<string | undefined>;\n}\n"],"mappings":";;;;;;;;;;;;AAYA;;AAGYA,UAHKQ,YAAAA,CAGLR;EAA6B,MAEtBK,EAAAA,MAAAA;EAAmB,MAAA,EAAA,MAAA;EA6BjBI,MAAAA,EA/BTT,6BA+BgB;EAAA,cAAA,CAAA,EAAA,OAAA;EAAA,YAEhBA,CAAAA,EA/BOK,mBA+BPL;EAA6B,aACjBE,CAAAA,EAAAA,MAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCEkB,cApCLX,OAAAA,CAoCKW;EAAO,MAAA,EAAA,MAAA;UAlCrBpB;sBACYE;;SAEbE;gBACOC;SACPC;iBACQL;;;gBAGDM,uBAAAA,CAAAA;;;;;;;;;KAC2EW,KAAKD,SAAST;WAC5FJ;WACAE;mBACQL;;;;;;;;;;;;;8BAaSE,sBAAsBG;;;;;;;KAElCE,eAAeC;;;;;;wBAMTW"}