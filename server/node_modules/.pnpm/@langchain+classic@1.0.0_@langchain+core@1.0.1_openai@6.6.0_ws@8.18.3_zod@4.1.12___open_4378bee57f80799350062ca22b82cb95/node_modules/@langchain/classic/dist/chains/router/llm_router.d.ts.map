{"version":3,"file":"llm_router.d.ts","names":["BaseLanguageModelInterface","ChainValues","BasePromptTemplate","CallbackManagerForChainRun","LLMChain","RouterChain","ChainInputs","RouterOutputSchema","LLMRouterChainInput","LLMRouterChain","Promise","Omit"],"sources":["../../../src/chains/router/llm_router.d.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport { ChainValues } from \"@langchain/core/utils/types\";\nimport { BasePromptTemplate } from \"@langchain/core/prompts\";\nimport { CallbackManagerForChainRun } from \"@langchain/core/callbacks/manager\";\nimport { LLMChain } from \"../../chains/llm_chain.js\";\nimport { RouterChain } from \"./multi_route.js\";\nimport { ChainInputs } from \"../../chains/base.js\";\n/**\n * A type that represents the output schema of a router chain. It defines\n * the structure of the output data returned by the router chain.\n */\nexport type RouterOutputSchema = {\n    destination: string;\n    next_inputs: {\n        [key: string]: string;\n    };\n};\n/**\n * An interface that extends the default ChainInputs interface and adds an\n * additional \"llmChain\" property.\n */\nexport interface LLMRouterChainInput extends ChainInputs {\n    llmChain: LLMChain<RouterOutputSchema>;\n}\n/**\n * A class that represents an LLM router chain in the LangChain framework.\n * It extends the RouterChain class and implements the LLMRouterChainInput\n * interface. It provides additional functionality specific to LLMs and\n * routing based on LLM predictions.\n */\nexport declare class LLMRouterChain extends RouterChain implements LLMRouterChainInput {\n    llmChain: LLMChain<RouterOutputSchema>;\n    constructor(fields: LLMRouterChainInput);\n    get inputKeys(): string[];\n    _call(values: ChainValues, runManager?: CallbackManagerForChainRun | undefined): Promise<RouterOutputSchema>;\n    _chainType(): string;\n    /**\n     * A static method that creates an instance of LLMRouterChain from a\n     * BaseLanguageModel and a BasePromptTemplate. It takes in an optional\n     * options object and returns an instance of LLMRouterChain with the\n     * specified LLMChain.\n     * @param llm A BaseLanguageModel instance.\n     * @param prompt A BasePromptTemplate instance.\n     * @param options Optional LLMRouterChainInput object, excluding \"llmChain\".\n     * @returns An instance of LLMRouterChain.\n     */\n    static fromLLM(llm: BaseLanguageModelInterface, prompt: BasePromptTemplate, options?: Omit<LLMRouterChainInput, \"llmChain\">): LLMRouterChain;\n}\n"],"mappings":";;;;;;;;;;;;AAWA;AAUA;AAAoC,KAVxBO,kBAAAA,GAUwB;EAAA,WACbA,EAAAA,MAAAA;EAAkB,WAA3BH,EAAAA;IAD+BE,CAAAA,GAAAA,EAAAA,MAAAA,CAAAA,EAAAA,MAAAA;EAAW,CAAA;AASxD,CAAA;;;;;AAIkBL,UAbDO,mBAAAA,SAA4BF,WAa3BL,CAAAA;EAAW,QAAeE,EAZ9BC,QAY8BD,CAZrBI,kBAYqBJ,CAAAA;;;;;;;;AAJAE,cAAvBI,cAAAA,SAAuBJ,WAAAA,YAAuBG,mBAAvBH,CAAAA;EAAW,QAAYG,EACrDJ,QADqDI,CAC5CD,kBAD4CC,CAAAA;EAAmB,WAAA,CAAA,MAAA,EAE9DA,mBAF8D;;gBAIpEP,0BAA0BE,yCAAyCO,QAAQH;;;;;;;;;;;;sBAYrEP,oCAAoCE,8BAA8BS,KAAKH,mCAAmCC"}