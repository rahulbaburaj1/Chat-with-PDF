{"version":3,"file":"analyze_documents_chain.d.ts","names":["ChainValues","CallbackManagerForChainRun","TextSplitter","BaseChain","ChainInputs","SerializedAnalyzeDocumentChain","LoadValues","Record","AnalyzeDocumentChainInput","Omit","AnalyzeDocumentChain","Promise"],"sources":["../../src/chains/analyze_documents_chain.d.ts"],"sourcesContent":["import { ChainValues } from \"@langchain/core/utils/types\";\nimport { CallbackManagerForChainRun } from \"@langchain/core/callbacks/manager\";\nimport { TextSplitter } from \"@langchain/textsplitters\";\nimport { BaseChain, ChainInputs } from \"./base.js\";\nimport { SerializedAnalyzeDocumentChain } from \"./serde.js\";\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type LoadValues = Record<string, any>;\n/**\n * Interface for the input parameters required by the AnalyzeDocumentChain\n * class.\n */\nexport interface AnalyzeDocumentChainInput extends Omit<ChainInputs, \"memory\"> {\n    combineDocumentsChain: BaseChain;\n    textSplitter?: TextSplitter;\n    inputKey?: string;\n}\n/**\n * Chain that combines documents by stuffing into context.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n * @example\n * ```typescript\n * const model = new ChatOpenAI({ model: \"gpt-4o-mini\", temperature: 0 });\n * const combineDocsChain = loadSummarizationChain(model);\n * const chain = new AnalyzeDocumentChain({\n *   combineDocumentsChain: combineDocsChain,\n * });\n *\n * // Read the text from a file (this is a placeholder for actual file reading)\n * const text = readTextFromFile(\"state_of_the_union.txt\");\n *\n * // Invoke the chain to analyze the document\n * const res = await chain.call({\n *   input_document: text,\n * });\n *\n * console.log({ res });\n * ```\n */\nexport declare class AnalyzeDocumentChain extends BaseChain implements AnalyzeDocumentChainInput {\n    static lc_name(): string;\n    inputKey: string;\n    combineDocumentsChain: BaseChain;\n    textSplitter: TextSplitter;\n    constructor(fields: AnalyzeDocumentChainInput);\n    get inputKeys(): string[];\n    get outputKeys(): string[];\n    /** @ignore */\n    _call(values: ChainValues, runManager?: CallbackManagerForChainRun): Promise<ChainValues>;\n    _chainType(): \"analyze_document_chain\";\n    static deserialize(data: SerializedAnalyzeDocumentChain, values: LoadValues): Promise<AnalyzeDocumentChain>;\n    serialize(): SerializedAnalyzeDocumentChain;\n}\n"],"mappings":";;;;;;;;KAMYM,UAAAA,GAAaC;AAAzB;AAKA;;;AAC2BJ,UADVK,yBAAAA,SAAkCC,IACxBN,CAD6BC,WAC7BD,EAAAA,QAAAA,CAAAA,CAAAA;EAAS,qBACjBD,EADQC,SACRD;EAAY,YAFoBO,CAAAA,EAEhCP,YAFgCO;EAAI,QAAA,CAAA,EAAA,MAAA;AA4BvD;;;;;;;;;;;;;;;;AAAgG;;;;;;;;cAA3EC,oBAAAA,SAA6BP,SAAAA,YAAqBK;;;yBAG5CL;gBACTD;sBACMM;;;;gBAINR,0BAA0BC,6BAA6BU,QAAQX;;2BAEpDK,wCAAwCC,aAAaK,QAAQD;eACzEL"}