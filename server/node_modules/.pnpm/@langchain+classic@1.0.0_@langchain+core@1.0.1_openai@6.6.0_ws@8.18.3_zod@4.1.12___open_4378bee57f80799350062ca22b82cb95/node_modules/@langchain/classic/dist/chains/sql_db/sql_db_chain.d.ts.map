{"version":3,"file":"sql_db_chain.d.ts","names":["BaseLanguageModel","BaseLanguageModelInterface","ChainValues","BasePromptTemplate","PromptTemplate","CallbackManagerForChainRun","RunnableSequence","SqlDialect","BaseChain","ChainInputs","SqlDatabase","SqlDatabaseChainInput","SqlDatabaseChain","Promise","CreateSqlQueryChainFields","createSqlQueryChain","llm","db","prompt","k","dialect","Record"],"sources":["../../../src/chains/sql_db/sql_db_chain.d.ts"],"sourcesContent":["import type { BaseLanguageModel, BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport { ChainValues } from \"@langchain/core/utils/types\";\nimport { BasePromptTemplate, PromptTemplate } from \"@langchain/core/prompts\";\nimport { CallbackManagerForChainRun } from \"@langchain/core/callbacks/manager\";\nimport { RunnableSequence } from \"@langchain/core/runnables\";\nimport { SqlDialect } from \"./sql_db_prompt.js\";\nimport { BaseChain, ChainInputs } from \"../base.js\";\nimport type { SqlDatabase } from \"../../sql_db.js\";\n/**\n * Interface that extends the ChainInputs interface and defines additional\n * fields specific to a SQL database chain. It represents the input fields\n * for a SQL database chain.\n */\nexport interface SqlDatabaseChainInput extends ChainInputs {\n    llm: BaseLanguageModelInterface;\n    database: SqlDatabase;\n    topK?: number;\n    inputKey?: string;\n    outputKey?: string;\n    sqlOutputKey?: string;\n    prompt?: PromptTemplate;\n}\n/**\n * Class that represents a SQL database chain in the LangChain framework.\n * It extends the BaseChain class and implements the functionality\n * specific to a SQL database chain.\n *\n * @security **Security Notice**\n * This chain generates SQL queries for the given database.\n * The SQLDatabase class provides a getTableInfo method that can be used\n * to get column information as well as sample data from the table.\n * To mitigate risk of leaking sensitive data, limit permissions\n * to read and scope to the tables that are needed.\n * Optionally, use the includesTables or ignoreTables class parameters\n * to limit which tables can/cannot be accessed.\n *\n * @link See https://js.langchain.com/docs/security for more information.\n * @example\n * ```typescript\n * const chain = new SqlDatabaseChain({\n *   llm: new OpenAI({ temperature: 0 }),\n *   database: new SqlDatabase({ ...config }),\n * });\n *\n * const result = await chain.run(\"How many tracks are there?\");\n * ```\n */\nexport declare class SqlDatabaseChain extends BaseChain {\n    static lc_name(): string;\n    // LLM wrapper to use\n    llm: BaseLanguageModelInterface;\n    // SQL Database to connect to.\n    database: SqlDatabase;\n    // Prompt to use to translate natural language to SQL.\n    prompt: PromptTemplate<{\n        dialect: any;\n        input: any;\n        table_info: any;\n        top_k: any;\n    }, any>;\n    // Number of results to return from the query\n    topK: number;\n    inputKey: string;\n    outputKey: string;\n    sqlOutputKey: string | undefined;\n    // Whether to return the result of querying the SQL table directly.\n    returnDirect: boolean;\n    constructor(fields: SqlDatabaseChainInput);\n    /** @ignore */\n    _call(values: ChainValues, runManager?: CallbackManagerForChainRun): Promise<ChainValues>;\n    _chainType(): \"sql_database_chain\";\n    get inputKeys(): string[];\n    get outputKeys(): string[];\n    private verifyNumberOfTokens;\n}\nexport interface CreateSqlQueryChainFields {\n    llm: BaseLanguageModel;\n    db: SqlDatabase;\n    prompt?: BasePromptTemplate;\n    /**\n     * @default 5\n     */\n    k?: number;\n    dialect: SqlDialect;\n}\n/**\n * Create a SQL query chain that can create SQL queries for the given database.\n * Returns a Runnable.\n *\n * @param {BaseLanguageModel} llm The language model to use in the chain.\n * @param {SqlDatabase} db The database to use in the chain.\n * @param {BasePromptTemplate | undefined} prompt The prompt to use in the chain.\n * @param {BaseLanguageModel | undefined} k The amount of docs/results to return. Passed through the prompt input value `top_k`.\n * @param {SqlDialect} dialect The SQL dialect to use in the chain.\n * @returns {Promise<RunnableSequence<Record<string, unknown>, string>>} A runnable sequence representing the chain.\n * @example ```typescript\n * const datasource = new DataSource({\n *   type: \"sqlite\",\n *   database: \"../../../../Chinook.db\",\n * });\n * const db = await SqlDatabase.fromDataSourceParams({\n *   appDataSource: datasource,\n * });\n * const llm = new ChatOpenAI({ model: \"gpt-4o-mini\", temperature: 0 });\n * const chain = await createSqlQueryChain({\n *   llm,\n *   db,\n *   dialect: \"sqlite\",\n * });\n * ```\n */\nexport declare function createSqlQueryChain({ llm, db, prompt, k, dialect }: CreateSqlQueryChainFields): Promise<RunnableSequence<Record<string, unknown>, string>>;\n"],"mappings":";;;;;;;;;;;;;AAaA;;;AAEcU,UAFGC,qBAAAA,SAA8BF,WAEjCC,CAAAA;EAAW,GAKZN,EANJH,0BAMIG;EAAc,QAPoBK,EAEjCC,WAFiCD;EAAW,IAAA,CAAA,EAAA,MAAA;EAkCrCG,QAAAA,CAAAA,EAAAA,MAAAA;EAAgB,SAAA,CAAA,EAAA,MAAA;EAAA,YAG5BX,CAAAA,EAAAA,MAAAA;EAA0B,MAErBS,CAAAA,EAhCDN,cAgCCM;;;;;;;;AALyC;AA4BvD;;;;;;AAQuB;AA4BvB;;;;;;;;;;;AAAgH,cAhE3FE,gBAAAA,SAAyBJ,SAAAA,CAgEkE;;;OA7DvGP;;YAEKS;;UAEFN;;;;;;;;;;;;;sBAaYO;;gBAENT,0BAA0BG,6BAA6BQ,QAAQX;;;;;;UAMhEY,yBAAAA;OACRd;MACDU;WACKP;;;;;WAKAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;iBA4BWQ,mBAAAA;;;;;;GAAqDD,4BAA4BD,QAAQP,iBAAiBe"}