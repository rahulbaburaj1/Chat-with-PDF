{"version":3,"file":"contextual_compression.d.ts","names":["BaseRetriever","BaseRetrieverInput","BaseRetrieverInterface","DocumentInterface","CallbackManagerForRetrieverRun","BaseDocumentCompressor","ContextualCompressionRetrieverArgs","ContextualCompressionRetriever","Promise"],"sources":["../../src/retrievers/contextual_compression.d.ts"],"sourcesContent":["import { BaseRetriever, type BaseRetrieverInput, type BaseRetrieverInterface } from \"@langchain/core/retrievers\";\nimport type { DocumentInterface } from \"@langchain/core/documents\";\nimport { CallbackManagerForRetrieverRun } from \"@langchain/core/callbacks/manager\";\nimport { BaseDocumentCompressor } from \"./document_compressors/index.js\";\n/**\n * Interface for the arguments required to construct a\n * ContextualCompressionRetriever. It extends the BaseRetrieverInput\n * interface with two additional fields: baseCompressor and baseRetriever.\n */\nexport interface ContextualCompressionRetrieverArgs extends BaseRetrieverInput {\n    baseCompressor: BaseDocumentCompressor;\n    baseRetriever: BaseRetrieverInterface;\n}\n/**\n * A retriever that wraps a base retriever and compresses the results. It\n * retrieves relevant documents based on a given query and then compresses\n * these documents using a specified document compressor.\n * @example\n * ```typescript\n * const retriever = new ContextualCompressionRetriever({\n *   baseCompressor: new LLMChainExtractor(),\n *   baseRetriever: new HNSWLib().asRetriever(),\n * });\n * const retrievedDocs = await retriever.invoke(\n *   \"What did the speaker say about Justice Breyer?\",\n * );\n * ```\n */\nexport declare class ContextualCompressionRetriever extends BaseRetriever {\n    static lc_name(): string;\n    lc_namespace: string[];\n    baseCompressor: BaseDocumentCompressor;\n    baseRetriever: BaseRetrieverInterface;\n    constructor(fields: ContextualCompressionRetrieverArgs);\n    _getRelevantDocuments(query: string, runManager?: CallbackManagerForRetrieverRun): Promise<DocumentInterface[]>;\n}\n"],"mappings":";;;;;;;;;AASA;;;AAEmBE,UAFFI,kCAAAA,SAA2CL,kBAEzCC,CAAAA;EAAsB,cAFmBD,EACxCI,sBADwCJ;EAAkB,aAAA,EAE3DC,sBAF2D;AAmB9E;;;;;;;;;AAAyE;;;;;;;cAApDK,8BAAAA,SAAuCP,aAAAA;;;kBAGxCK;iBACDH;sBACKI;oDAC8BF,iCAAiCI,QAAQL"}