{"version":3,"file":"load.cjs","names":["loadAgentFromFile: FileLoader<Agent>","file: string","path: string","llmAndTools?: { llm?: BaseLanguageModelInterface; tools?: ToolInterface[] }","parseFileConfig","Agent","uri: string","loadFromHub","loadFromFile"],"sources":["../../src/agents/load.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport type { ToolInterface } from \"@langchain/core/tools\";\nimport { Agent } from \"./agent.js\";\nimport { loadFromHub } from \"../util/hub.js\";\nimport { FileLoader, loadFromFile } from \"../util/load.js\";\nimport { parseFileConfig } from \"../util/parse.js\";\n\nconst loadAgentFromFile: FileLoader<Agent> = async (\n  file: string,\n  path: string,\n  llmAndTools?: { llm?: BaseLanguageModelInterface; tools?: ToolInterface[] }\n) => {\n  const serialized = parseFileConfig(file, path);\n  return Agent.deserialize({ ...serialized, ...llmAndTools });\n};\n\nexport const loadAgent = async (\n  uri: string,\n  llmAndTools?: { llm?: BaseLanguageModelInterface; tools?: ToolInterface[] }\n): Promise<Agent> => {\n  const hubResult = await loadFromHub(\n    uri,\n    loadAgentFromFile,\n    \"agents\",\n    new Set([\"json\", \"yaml\"]),\n    llmAndTools\n  );\n  if (hubResult) {\n    return hubResult;\n  }\n\n  return loadFromFile(uri, loadAgentFromFile, llmAndTools);\n};\n"],"mappings":";;;;;;;;;AAOA,MAAMA,oBAAuC,OAC3CC,MACAC,MACAC,gBACG;CACH,MAAM,aAAaC,8BAAgB,MAAM,KAAK;AAC9C,QAAOC,oBAAM,YAAY;EAAE,GAAG;EAAY,GAAG;CAAa,EAAC;AAC5D;AAED,MAAa,YAAY,OACvBC,KACAH,gBACmB;CACnB,MAAM,YAAY,MAAMI,wBACtB,KACA,mBACA,UACA,IAAI,IAAI,CAAC,QAAQ,MAAO,IACxB,YACD;AACD,KAAI,UACF,QAAO;AAGT,QAAOC,0BAAa,KAAK,mBAAmB,YAAY;AACzD"}