{"version":3,"file":"agent.d.cts","names":["BaseLanguageModelInterface","VectorStoreInterface","ChainValues","CallbackManagerForChainRun","BaseChain","ChainInputs","SerializedBaseChain","Optional","Task","BabyAGIInputs","Omit","BabyAGI","creationChain","prioritizationChain","executionChain","vectorstore","maxIterations","verbose","callbacks","Promise","objective","firstTask","llm"],"sources":["../../../src/experimental/babyagi/agent.d.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport type { VectorStoreInterface } from \"@langchain/core/vectorstores\";\nimport { ChainValues } from \"@langchain/core/utils/types\";\nimport { CallbackManagerForChainRun } from \"@langchain/core/callbacks/manager\";\nimport { BaseChain, ChainInputs } from \"../../chains/base.js\";\nimport { SerializedBaseChain } from \"../../chains/serde.js\";\nimport { Optional } from \"../../types/type-utils.js\";\n/**\n * Interface defining the structure of a task. A task has a `taskID` and a\n * `taskName`.\n */\nexport interface Task {\n    taskID: string;\n    taskName: string;\n}\n/**\n * Interface defining the structure of the inputs for the `BabyAGI` class.\n * It extends the `ChainInputs` interface, omitting the 'memory' and\n * 'callbackManager' properties, and adds properties specific to\n * `BabyAGI`.\n */\nexport interface BabyAGIInputs extends Omit<ChainInputs, \"memory\" | \"callbackManager\"> {\n    creationChain: BaseChain;\n    prioritizationChain: BaseChain;\n    executionChain: BaseChain;\n    vectorstore: VectorStoreInterface;\n    maxIterations?: number;\n}\n/**\n * Class responsible for managing tasks, including their creation,\n * prioritization, and execution. It uses three chains for these\n * operations: `creationChain`, `prioritizationChain`, and\n * `executionChain`.\n * @example\n * ```typescript\n * const babyAGI = BabyAGI.fromLLM({\n *   llm: new OpenAI({ temperature: 0 }),\n *   vectorstore: new MemoryVectorStore(new OpenAIEmbeddings()),\n *   maxIterations: 3,\n * });\n *\n * const result = await babyAGI.call({\n *   objective: \"Write a weather report for SF today\",\n * });\n * ```\n */\nexport declare class BabyAGI extends BaseChain implements BabyAGIInputs {\n    static lc_name(): string;\n    taskList: Task[];\n    creationChain: BaseChain;\n    prioritizationChain: BaseChain;\n    executionChain: BaseChain;\n    taskIDCounter: number;\n    vectorstore: VectorStoreInterface;\n    maxIterations: number;\n    constructor({ creationChain, prioritizationChain, executionChain, vectorstore, maxIterations, verbose, callbacks }: BabyAGIInputs);\n    _chainType(): \"BabyAGI\";\n    get inputKeys(): string[];\n    get outputKeys(): never[];\n    /**\n     * Adds a task to the task list.\n     * @param task The task to be added.\n     * @returns Promise resolving to void.\n     */\n    addTask(task: Task): Promise<void>;\n    /**\n     * Prints the current task list to the console.\n     * @returns void\n     */\n    printTaskList(): void;\n    /**\n     * Prints the next task to the console.\n     * @param task The next task to be printed.\n     * @returns void\n     */\n    printNextTask(task: Task): void;\n    /**\n     * Prints the result of a task to the console.\n     * @param result The result of the task.\n     * @returns void\n     */\n    printTaskResult(result: string): void;\n    /**\n     * Generates the next tasks based on the result of the previous task, the\n     * task description, and the objective.\n     * @param result The result of the previous task.\n     * @param task_description The description of the task.\n     * @param objective The objective of the task.\n     * @param runManager Optional CallbackManagerForChainRun instance.\n     * @returns Promise resolving to an array of tasks without taskID.\n     */\n    getNextTasks(result: string, task_description: string, objective: string, runManager?: CallbackManagerForChainRun): Promise<Optional<Task, \"taskID\">[]>;\n    /**\n     * Prioritizes the tasks based on the current task ID and the objective.\n     * @param thisTaskID The ID of the current task.\n     * @param objective The objective of the task.\n     * @param runManager Optional CallbackManagerForChainRun instance.\n     * @returns Promise resolving to an array of prioritized tasks.\n     */\n    prioritizeTasks(thisTaskID: number, objective: string, runManager?: CallbackManagerForChainRun): Promise<{\n        taskID: string;\n        taskName: string;\n    }[]>;\n    /**\n     * Retrieves the top tasks that are most similar to the given query.\n     * @param query The query to search for.\n     * @param k The number of top tasks to retrieve.\n     * @returns Promise resolving to an array of top tasks.\n     */\n    getTopTasks(query: string, k?: number): Promise<string[]>;\n    /**\n     * Executes a task based on the objective and the task description.\n     * @param objective The objective of the task.\n     * @param task The task to be executed.\n     * @param runManager Optional CallbackManagerForChainRun instance.\n     * @returns Promise resolving to the result of the task execution as a string.\n     */\n    executeTask(objective: string, task: string, runManager?: CallbackManagerForChainRun): Promise<string>;\n    _call({ objective, firstTask }: ChainValues, runManager?: CallbackManagerForChainRun): Promise<{}>;\n    serialize(): SerializedBaseChain;\n    /**\n     * Static method to create a new BabyAGI instance from a\n     * BaseLanguageModel.\n     * @param llm BaseLanguageModel instance used to generate a new BabyAGI instance.\n     * @param vectorstore VectorStore instance used to store and retrieve vectors.\n     * @param executionChain Optional BaseChain instance used to execute tasks.\n     * @param verbose Optional boolean indicating whether to log verbose output.\n     * @param callbacks Optional callbacks to be used during the execution of tasks.\n     * @param rest Optional additional parameters.\n     * @returns A new instance of BabyAGI.\n     */\n    static fromLLM({ llm, vectorstore, executionChain, verbose, callbacks, ...rest }: Optional<BabyAGIInputs, \"executionChain\" | \"creationChain\" | \"prioritizationChain\"> & {\n        llm: BaseLanguageModelInterface;\n    }): BabyAGI;\n}\n"],"mappings":";;;;;;;;;;;;AAWA;AAUA;AAA8B,UAVbQ,IAAAA,CAUa;EAAA,MAAcH,EAAAA,MAAAA;EAAW,QACpCD,EAAAA,MAAAA;;;;;AADwB;AAyB3C;;AAEcI,UA3BGC,aAAAA,SAAsBC,IA2BzBF,CA3B8BH,WA2B9BG,EAAAA,QAAAA,GAAAA,iBAAAA,CAAAA,CAAAA;EAAI,aACCJ,EA3BAA,SA2BAA;EAAS,mBACHA,EA3BAA,SA2BAA;EAAS,cACdA,EA3BAA,SA2BAA;EAAS,WAEZH,EA5BAA,oBA4BAA;EAAoB,aAEnBW,CAAAA,EAAAA,MAAAA;;;;;;;;;;;;;;;;;;;;AA+DNQ,cAxEST,OAAAA,SAAgBP,SAAAA,YAAqBK,aAwE9CW,CAAAA;EAAS,OAAEC,OAAAA,CAAAA,CAAAA,EAAAA,MAAAA;EAAS,QAAInB,EAtEtBM,IAsEsBN,EAAAA;EAAW,aAAeC,EArE3CC,SAqE2CD;EAA0B,mBAAGgB,EApElEf,SAoEkEe;EAAO,cACjFb,EApEGF,SAoEHE;EAAmB,aAYfgB,EAAAA,MAAAA;EAAG,WAAEP,EA9ETd,oBA8ESc;EAAW,aAAED,EAAAA,MAAAA;EAAc,WAAEG,CAAAA;IAAAA,aAAAA;IAAAA,mBAAAA;IAAAA,cAAAA;IAAAA,WAAAA;IAAAA,aAAAA;IAAAA,OAAAA;IAAAA;EAAAA,CAAAA,EA5EiER,aA4EjEQ;EAAO,UAAEC,CAAAA,CAAAA,EAAAA,SAAAA;EAAS,IAAsBT,SAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA;EAAa,IAAtBF,UAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA;EAAQ;;;;AArFvB;gBAkBrDC,OAAOW;;;;;;;;;;;sBAWDX;;;;;;;;;;;;;;;;yFAgBmEL,6BAA6BgB,QAAQZ,SAASC;;;;;;;;sEAQjEL,6BAA6BgB;;;;;;;;;;0CAUzDA;;;;;;;;4DAQkBhB,6BAA6BgB;;;;KACvDjB,0BAA0BC,6BAA6BgB;eAC1Eb;;;;;;;;;;;;;;;;;;;KAYqEC,SAASE;SAClFT;MACLW"}