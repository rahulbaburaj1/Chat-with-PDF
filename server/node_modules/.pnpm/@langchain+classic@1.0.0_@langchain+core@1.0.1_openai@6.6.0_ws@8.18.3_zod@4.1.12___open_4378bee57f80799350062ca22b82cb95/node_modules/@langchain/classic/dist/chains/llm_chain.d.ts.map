{"version":3,"file":"llm_chain.d.ts","names":["BaseLanguageModelInterface","BaseLanguageModelInput","ChainValues","Generation","BaseMessage","BasePromptValueInterface","BasePromptTemplate","BaseLLMOutputParser","CallbackManager","BaseCallbackConfig","CallbackManagerForChainRun","Callbacks","Runnable","BaseChain","ChainInputs","SerializedLLMChain","LLMType","CallOptionsIfAvailable","T","CO","LLMChainInput","Model","LLMChain","Promise"],"sources":["../../src/chains/llm_chain.d.ts"],"sourcesContent":["import { BaseLanguageModelInterface, BaseLanguageModelInput } from \"@langchain/core/language_models/base\";\nimport type { ChainValues } from \"@langchain/core/utils/types\";\nimport type { Generation } from \"@langchain/core/outputs\";\nimport type { BaseMessage } from \"@langchain/core/messages\";\nimport type { BasePromptValueInterface } from \"@langchain/core/prompt_values\";\nimport { BasePromptTemplate } from \"@langchain/core/prompts\";\nimport { BaseLLMOutputParser } from \"@langchain/core/output_parsers\";\nimport { CallbackManager, BaseCallbackConfig, CallbackManagerForChainRun, Callbacks } from \"@langchain/core/callbacks/manager\";\nimport { Runnable } from \"@langchain/core/runnables\";\nimport { BaseChain, ChainInputs } from \"./base.js\";\nimport { SerializedLLMChain } from \"./serde.js\";\ntype LLMType = BaseLanguageModelInterface | Runnable<BaseLanguageModelInput, string> | Runnable<BaseLanguageModelInput, BaseMessage>;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype CallOptionsIfAvailable<T> = T extends {\n    CallOptions: infer CO;\n} ? CO : any;\n/**\n * Interface for the input parameters of the LLMChain class.\n */\nexport interface LLMChainInput<T extends string | object = string, Model extends LLMType = LLMType> extends ChainInputs {\n    /** Prompt object to use */\n    prompt: BasePromptTemplate;\n    /** LLM Wrapper to use */\n    llm: Model;\n    /** Kwargs to pass to LLM */\n    llmKwargs?: CallOptionsIfAvailable<Model>;\n    /** OutputParser to use */\n    outputParser?: BaseLLMOutputParser<T>;\n    /** Key to use for output, defaults to `text` */\n    outputKey?: string;\n}\n/**\n * Chain to run queries against LLMs.\n *\n * @example\n * ```ts\n * import { ChatPromptTemplate } from \"@langchain/core/prompts\";\n * import { ChatOpenAI } from \"@langchain/openai\";\n *\n * const prompt = ChatPromptTemplate.fromTemplate(\"Tell me a {adjective} joke\");\n * const llm = new ChatOpenAI({ model: \"gpt-4o-mini\" });\n * const chain = prompt.pipe(llm);\n *\n * const response = await chain.invoke({ adjective: \"funny\" });\n * ```\n */\nexport declare class LLMChain<T extends string | object = string, Model extends LLMType = LLMType> extends BaseChain implements LLMChainInput<T> {\n    static lc_name(): string;\n    lc_serializable: boolean;\n    prompt: BasePromptTemplate;\n    llm: Model;\n    llmKwargs?: CallOptionsIfAvailable<Model>;\n    outputKey: string;\n    outputParser?: BaseLLMOutputParser<T>;\n    get inputKeys(): string[];\n    get outputKeys(): string[];\n    constructor(fields: LLMChainInput<T, Model>);\n    private getCallKeys;\n    /** @ignore */\n    _selectMemoryInputs(values: ChainValues): ChainValues;\n    /** @ignore */\n    _getFinalOutput(generations: Generation[], promptValue: BasePromptValueInterface, runManager?: CallbackManagerForChainRun): Promise<unknown>;\n    /**\n     * Run the core logic of this chain and add to output if desired.\n     *\n     * Wraps _call and handles memory.\n     */\n    call(values: ChainValues & CallOptionsIfAvailable<Model>, config?: Callbacks | BaseCallbackConfig): Promise<ChainValues>;\n    /** @ignore */\n    _call(values: ChainValues & CallOptionsIfAvailable<Model>, runManager?: CallbackManagerForChainRun): Promise<ChainValues>;\n    /**\n     * Format prompt with values and pass to LLM\n     *\n     * @param values - keys to pass to prompt template\n     * @param callbackManager - CallbackManager to use\n     * @returns Completion from LLM.\n     *\n     * @example\n     * ```ts\n     * llm.predict({ adjective: \"funny\" })\n     * ```\n     */\n    predict(values: ChainValues & CallOptionsIfAvailable<Model>, callbackManager?: CallbackManager): Promise<T>;\n    _chainType(): \"llm\";\n    static deserialize(data: SerializedLLMChain): Promise<LLMChain>;\n    /** @deprecated */\n    serialize(): SerializedLLMChain;\n    _getNumTokens(text: string): Promise<number>;\n}\nexport {};\n"],"mappings":";;;;;;;;;;;;;KAWKgB,OAAAA,GAAUhB,6BAA6BY,SAASX,kCAAkCW,SAASX,wBAAwBG;;AADxE,KAG3Ca,sBAFO,CAAA,CAAA,CAAA,GAEqBC,CAFrB,SAAA;EAAA,WAAA,EAAA,KAAA,GAAA;CAAA,GAIRC,EAJQ,GAAGnB,GAAAA;;;;AAAyGI,UAQvGgB,aARuGhB,CAAAA,UAAAA,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,EAAAA,cAQvCY,OARuCZ,GAQ7BY,OAR6BZ,CAAAA,SAQZU,WARYV,CAAAA;EAAW;EAApC,MAAA,EAUnFE,kBAVmF;EAE1FW;EAAsB,GAAA,EAUlBI,KAVkB;EAAA;EAAO,SAE9BF,CAAAA,EAUYF,sBAVZE,CAUmCE,KAVnCF,CAAAA;EAAE;EAIWC,YAAAA,CAAAA,EAQEb,mBARW,CAQSW,CART,CAAA;EAAA;EAAA,SAAmDF,CAAAA,EAAAA,MAAAA;;;;;;;;;AAAsC;AA2BvH;;;;;;;AAKuCK,cALlBC,QAKkBD,CAAAA,UAAAA,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,EAAAA,cALyCL,OAKzCK,GALmDL,OAKnDK,CAAAA,SALoER,SAAAA,YAAqBO,aAKzFC,CALuGH,CAKvGG,CAAAA,CAAAA;EAAK,OAA5BJ,OAAAA,CAAAA,CAAAA,EAAAA,MAAAA;EAAsB,eAECC,EAAAA,OAAAA;EAAC,MAArBX,EAJPD,kBAIOC;EAAmB,GAGAW,EAN7BG,KAM6BH;EAAC,SAAEG,CAAAA,EALzBJ,sBAKyBI,CALFA,KAKEA,CAAAA;EAAK,SAAtBD,EAAAA,MAAAA;EAAa,YAGLlB,CAAAA,EANbK,mBAMaL,CANOgB,CAMPhB,CAAAA;EAAW,IAAGA,SAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA;EAAW,IAExBC,UAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA;EAAU,WAAiBE,CAAAA,MAAAA,EALpCe,aAKoCf,CALtBa,CAKsBb,EALnBgB,KAKmBhB,CAAAA;EAAwB,QAAeK,WAAAA;EAA0B;EAAU,mBAMtHR,CAAAA,MAAAA,EAReA,WAQfA,CAAAA,EAR6BA,WAQ7BA;EAAW;EAA+B,eAA5Be,CAAAA,WAAAA,EANEd,UAMFc,EAAAA,EAAAA,WAAAA,EAN6BZ,wBAM7BY,EAAAA,UAAAA,CAAAA,EANoEP,0BAMpEO,CAAAA,EANiGM,OAMjGN,CAAAA,OAAAA,CAAAA;EAAsB;;;;;EAExB,IAA0BI,CAAAA,MAAAA,EAFtCnB,WAEsCmB,GAFxBJ,sBAEwBI,CAFDA,KAECA,CAAAA,EAAAA,MAAAA,CAAAA,EAFgBV,SAEhBU,GAF4BZ,kBAE5BY,CAAAA,EAFiDE,OAEjDF,CAFyDnB,WAEzDmB,CAAAA;EAAK;EAAN,KAAsBX,CAAAA,MAAAA,EAA1DR,WAA0DQ,GAA5CO,sBAA4CP,CAArBW,KAAqBX,CAAAA,EAAAA,UAAAA,CAAAA,EAAAA,0BAAAA,CAAAA,EAA6Ba,OAA7Bb,CAAqCR,WAArCQ,CAAAA;EAA0B;;;;;;;;;;;;EAiBnE,OACFa,CAAAA,MAAAA,EALbrB,WAKaqB,GALCN,sBAKDM,CALwBF,KAKxBE,CAAAA,EAAAA,eAAAA,CAAAA,EALkDf,eAKlDe,CAAAA,EALoEA,OAKpEA,CAL4EL,CAK5EK,CAAAA;EAAO,UAzCmEV,CAAAA,CAAAA,EAAAA,KAAAA;EAAS,OAAYO,WAAAA,CAAAA,IAAAA,EAsCnGL,kBAtCmGK,CAAAA,EAsC9EG,OAtC8EH,CAsCtEE,QAtCsEF,CAAAA;EAAa;eAwC5HL;+BACgBQ"}