{"version":3,"file":"chain_extract.js","names":["query: string","doc: DocumentInterface","text: string","documents: DocumentInterface[]","llm: BaseLanguageModelInterface","prompt?: PromptTemplate","getInput?: (\n      query: string,\n      doc: DocumentInterface\n    ) => Record<string, unknown>"],"sources":["../../../src/retrievers/document_compressors/chain_extract.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport { type DocumentInterface, Document } from \"@langchain/core/documents\";\nimport { PromptTemplate } from \"@langchain/core/prompts\";\nimport { BaseOutputParser } from \"@langchain/core/output_parsers\";\nimport { LLMChain } from \"../../chains/llm_chain.js\";\nimport { BaseDocumentCompressor } from \"./index.js\";\nimport { PROMPT_TEMPLATE } from \"./chain_extract_prompt.js\";\n\nfunction defaultGetInput(\n  query: string,\n  doc: DocumentInterface\n): Record<string, unknown> {\n  return { question: query, context: doc.pageContent };\n}\n\nclass NoOutputParser extends BaseOutputParser<string> {\n  lc_namespace = [\n    \"langchain\",\n    \"retrievers\",\n    \"document_compressors\",\n    \"chain_extract\",\n  ];\n\n  noOutputStr = \"NO_OUTPUT\";\n\n  parse(text: string): Promise<string> {\n    const cleanedText = text.trim();\n    if (cleanedText === this.noOutputStr) {\n      return Promise.resolve(\"\");\n    }\n    return Promise.resolve(cleanedText);\n  }\n\n  getFormatInstructions(): string {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n\nfunction getDefaultChainPrompt(): PromptTemplate {\n  const outputParser = new NoOutputParser();\n  const template = PROMPT_TEMPLATE(outputParser.noOutputStr);\n  return new PromptTemplate({\n    template,\n    inputVariables: [\"question\", \"context\"],\n    outputParser,\n  });\n}\n\n/**\n * Interface for the arguments required to create an instance of\n * LLMChainExtractor.\n */\nexport interface LLMChainExtractorArgs {\n  llmChain: LLMChain;\n  getInput: (query: string, doc: DocumentInterface) => Record<string, unknown>;\n}\n\n/**\n * A class that uses an LLM chain to extract relevant parts of documents.\n * It extends the BaseDocumentCompressor class.\n */\nexport class LLMChainExtractor extends BaseDocumentCompressor {\n  llmChain: LLMChain;\n\n  getInput: (query: string, doc: DocumentInterface) => Record<string, unknown> =\n    defaultGetInput;\n\n  constructor({ llmChain, getInput }: LLMChainExtractorArgs) {\n    super();\n    this.llmChain = llmChain;\n    this.getInput = getInput;\n  }\n\n  /**\n   * Compresses a list of documents based on the output of an LLM chain.\n   * @param documents The list of documents to be compressed.\n   * @param query The query to be used for document compression.\n   * @returns A list of compressed documents.\n   */\n  async compressDocuments(\n    documents: DocumentInterface[],\n    query: string\n  ): Promise<DocumentInterface[]> {\n    const compressedDocs = await Promise.all(\n      documents.map(async (doc) => {\n        const input = this.getInput(query, doc);\n        const output = await this.llmChain.predict(input);\n        return output.length > 0\n          ? new Document({\n              pageContent: output,\n              metadata: doc.metadata,\n            })\n          : undefined;\n      })\n    );\n    return compressedDocs.filter((doc): doc is Document => doc !== undefined);\n  }\n\n  /**\n   * Creates a new instance of LLMChainExtractor from a given LLM, prompt\n   * template, and getInput function.\n   * @param llm The BaseLanguageModel instance used for document extraction.\n   * @param prompt The PromptTemplate instance used for document extraction.\n   * @param getInput A function used for constructing the chain input from the query and a Document.\n   * @returns A new instance of LLMChainExtractor.\n   */\n  static fromLLM(\n    llm: BaseLanguageModelInterface,\n    prompt?: PromptTemplate,\n    getInput?: (\n      query: string,\n      doc: DocumentInterface\n    ) => Record<string, unknown>\n  ): LLMChainExtractor {\n    const _prompt = prompt || getDefaultChainPrompt();\n    const _getInput = getInput || defaultGetInput;\n    const llmChain = new LLMChain({ llm, prompt: _prompt });\n    return new LLMChainExtractor({ llmChain, getInput: _getInput });\n  }\n}\n"],"mappings":";;;;;;;;;;;AAQA,SAAS,gBACPA,OACAC,KACyB;AACzB,QAAO;EAAE,UAAU;EAAO,SAAS,IAAI;CAAa;AACrD;AAED,IAAM,iBAAN,cAA6B,iBAAyB;CACpD,eAAe;EACb;EACA;EACA;EACA;CACD;CAED,cAAc;CAEd,MAAMC,MAA+B;EACnC,MAAM,cAAc,KAAK,MAAM;AAC/B,MAAI,gBAAgB,KAAK,YACvB,QAAO,QAAQ,QAAQ,GAAG;AAE5B,SAAO,QAAQ,QAAQ,YAAY;CACpC;CAED,wBAAgC;AAC9B,QAAM,IAAI,MAAM;CACjB;AACF;AAED,SAAS,wBAAwC;CAC/C,MAAM,eAAe,IAAI;CACzB,MAAM,WAAW,gBAAgB,aAAa,YAAY;AAC1D,QAAO,IAAI,eAAe;EACxB;EACA,gBAAgB,CAAC,YAAY,SAAU;EACvC;CACD;AACF;;;;;AAeD,IAAa,oBAAb,MAAa,0BAA0B,uBAAuB;CAC5D;CAEA,WACE;CAEF,YAAY,EAAE,UAAU,UAAiC,EAAE;EACzD,OAAO;EACP,KAAK,WAAW;EAChB,KAAK,WAAW;CACjB;;;;;;;CAQD,MAAM,kBACJC,WACAH,OAC8B;EAC9B,MAAM,iBAAiB,MAAM,QAAQ,IACnC,UAAU,IAAI,OAAO,QAAQ;GAC3B,MAAM,QAAQ,KAAK,SAAS,OAAO,IAAI;GACvC,MAAM,SAAS,MAAM,KAAK,SAAS,QAAQ,MAAM;AACjD,UAAO,OAAO,SAAS,IACnB,IAAI,SAAS;IACX,aAAa;IACb,UAAU,IAAI;GACf,KACD;EACL,EAAC,CACH;AACD,SAAO,eAAe,OAAO,CAAC,QAAyB,QAAQ,OAAU;CAC1E;;;;;;;;;CAUD,OAAO,QACLI,KACAC,QACAC,UAImB;EACnB,MAAM,UAAU,UAAU,uBAAuB;EACjD,MAAM,YAAY,YAAY;EAC9B,MAAM,WAAW,IAAI,SAAS;GAAE;GAAK,QAAQ;EAAS;AACtD,SAAO,IAAI,kBAAkB;GAAE;GAAU,UAAU;EAAW;CAC/D;AACF"}