{"version":3,"file":"json.d.cts","names":["Serializable","Tool","ToolParams","Json","JsonObject","JsonSpec","JsonToolFields","JsonListKeysTool","Promise","JsonGetValueTool"],"sources":["../../src/tools/json.d.ts"],"sourcesContent":["import { Serializable } from \"@langchain/core/load/serializable\";\nimport { Tool, ToolParams } from \"@langchain/core/tools\";\nexport type Json = string | number | boolean | null | {\n    [key: string]: Json;\n} | Json[];\nexport type JsonObject = {\n    [key: string]: Json;\n};\n/**\n * Represents a JSON object in the LangChain framework. Provides methods\n * to get keys and values from the JSON object.\n */\nexport declare class JsonSpec extends Serializable {\n    lc_namespace: string[];\n    obj: JsonObject;\n    maxValueLength: number;\n    constructor(obj: JsonObject, max_value_length?: number);\n    /**\n     * Retrieves all keys at a given path in the JSON object.\n     * @param input The path to the keys in the JSON object, provided as a string in JSON pointer syntax.\n     * @returns A string containing all keys at the given path, separated by commas.\n     */\n    getKeys(input: string): string;\n    /**\n     * Retrieves the value at a given path in the JSON object.\n     * @param input The path to the value in the JSON object, provided as a string in JSON pointer syntax.\n     * @returns The value at the given path in the JSON object, as a string. If the value is a large dictionary or exceeds the maximum length, a message is returned instead.\n     */\n    getValue(input: string): string;\n}\nexport interface JsonToolFields extends ToolParams {\n    jsonSpec: JsonSpec;\n}\n/**\n * A tool in the LangChain framework that lists all keys at a given path\n * in a JSON object.\n */\nexport declare class JsonListKeysTool extends Tool {\n    static lc_name(): string;\n    name: string;\n    jsonSpec: JsonSpec;\n    constructor(jsonSpec: JsonSpec);\n    constructor(fields: JsonToolFields);\n    /** @ignore */\n    _call(input: string): Promise<string>;\n    description: string;\n}\n/**\n * A tool in the LangChain framework that retrieves the value at a given\n * path in a JSON object.\n */\nexport declare class JsonGetValueTool extends Tool {\n    jsonSpec: JsonSpec;\n    static lc_name(): string;\n    name: string;\n    constructor(jsonSpec: JsonSpec);\n    /** @ignore */\n    _call(input: string): Promise<string>;\n    description: string;\n}\n"],"mappings":";;;;KAEYG,IAAAA;iBACOA;AADnB,CAAA,GAEIA,IAFQA,EAAAA;AAAI,KAGJC,UAAAA,GAHI;EAAA,CAAA,GACGD,EAAAA,MAAAA,CAAAA,EAGAA,IAHAA;CAAI;AACf;AACR;AAOA;;AAESC,cAFYC,QAAAA,SAAiBL,YAAAA,CAE7BI;EAAU,YAEEA,EAAAA,MAAAA,EAAAA;EAAU,GAJOJ,EAE7BI,UAF6BJ;EAAY,cAAA,EAAA,MAAA;EAkBjCM,WAAAA,CAAAA,GAAAA,EAdIF,UAcU,EAAA,gBAAA,CAAA,EAAA,MAAA;EAAA;;;AAAmB;AAOlD;EAAqC,OAAA,CAAA,KAAA,EAAA,MAAA,CAAA,EAAA,MAAA;EAAA;;;;;EAAa,QAAA,CAAA,KAAA,EAAA,MAAA,CAAA,EAAA,MAAA;AAclD;AAAqC,UArBpBE,cAAAA,SAAuBJ,UAqBH,CAAA;EAAA,QACvBG,EArBAA,QAqBAA;;;;AADoC;;cAd7BE,gBAAAA,SAAyBN,IAAAA;;;YAGhCI;wBACYA;sBACFC;;wBAEEE;;;;;;;cAOLC,gBAAAA,SAAyBR,IAAAA;YAChCI;;;wBAGYA;;wBAEAG"}