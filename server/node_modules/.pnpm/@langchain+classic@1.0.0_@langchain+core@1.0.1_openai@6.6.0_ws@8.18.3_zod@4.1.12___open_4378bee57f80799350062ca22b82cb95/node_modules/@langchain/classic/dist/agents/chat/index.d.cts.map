{"version":3,"file":"index.d.cts","names":["BaseLanguageModelInterface","ToolInterface","ChatPromptTemplate","AgentStep","Optional","Agent","AgentArgs","OutputParserArgs","AgentInput","ChatAgentOutputParser","ChatCreatePromptArgs","ChatAgentInput","ChatAgent","Promise"],"sources":["../../../src/agents/chat/index.d.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport type { ToolInterface } from \"@langchain/core/tools\";\nimport { ChatPromptTemplate } from \"@langchain/core/prompts\";\nimport type { AgentStep } from \"@langchain/core/agents\";\nimport { Optional } from \"../../types/type-utils.js\";\nimport { Agent, AgentArgs, OutputParserArgs } from \"../agent.js\";\nimport { AgentInput } from \"../types.js\";\nimport { ChatAgentOutputParser } from \"./outputParser.js\";\n/**\n * Interface for arguments used to create a chat prompt.\n */\nexport interface ChatCreatePromptArgs {\n    /** String to put after the list of tools. */\n    suffix?: string;\n    /** String to put before the list of tools. */\n    prefix?: string;\n    /** String to use directly as the human message template. */\n    humanMessageTemplate?: string;\n    /** Formattable string to use as the instructions template. */\n    formatInstructions?: string;\n    /** List of input variables the final prompt will expect. */\n    inputVariables?: string[];\n}\n/**\n * Type for input data for creating a ChatAgent, extending AgentInput with\n * optional 'outputParser'.\n */\nexport type ChatAgentInput = Optional<AgentInput, \"outputParser\">;\n/**\n * Agent for the MRKL chain.\n * @augments Agent\n */\nexport declare class ChatAgent extends Agent {\n    static lc_name(): string;\n    lc_namespace: string[];\n    ToolType: ToolInterface;\n    constructor(input: ChatAgentInput);\n    _agentType(): \"chat-zero-shot-react-description\";\n    observationPrefix(): string;\n    llmPrefix(): string;\n    _stop(): string[];\n    /**\n     * Validates that all tools have descriptions. Throws an error if a tool\n     * without a description is found.\n     * @param tools Array of Tool instances to validate.\n     * @returns void\n     */\n    static validateTools(tools: ToolInterface[]): void;\n    /**\n     * Returns a default output parser for the ChatAgent.\n     * @param _fields Optional OutputParserArgs to customize the output parser.\n     * @returns ChatAgentOutputParser instance\n     */\n    static getDefaultOutputParser(_fields?: OutputParserArgs): ChatAgentOutputParser;\n    /**\n     * Constructs the agent's scratchpad, which is a string representation of\n     * the agent's previous steps.\n     * @param steps Array of AgentStep instances representing the agent's previous steps.\n     * @returns Promise resolving to a string representing the agent's scratchpad.\n     */\n    constructScratchPad(steps: AgentStep[]): Promise<string>;\n    /**\n     * Create prompt in the style of the zero shot agent.\n     *\n     * @param tools - List of tools the agent will have access to, used to format the prompt.\n     * @param args - Arguments to create the prompt with.\n     * @param args.suffix - String to put after the list of tools.\n     * @param args.prefix - String to put before the list of tools.\n     * @param args.humanMessageTemplate - String to use directly as the human message template\n     * @param args.formatInstructions - Formattable string to use as the instructions template\n     */\n    static createPrompt(tools: ToolInterface[], args?: ChatCreatePromptArgs): ChatPromptTemplate<any, any>;\n    /**\n     * Creates a ChatAgent instance using a language model, tools, and\n     * optional arguments.\n     * @param llm BaseLanguageModelInterface instance to use in the agent.\n     * @param tools Array of Tool instances to include in the agent.\n     * @param args Optional arguments to customize the agent and prompt.\n     * @returns ChatAgent instance\n     */\n    static fromLLMAndTools(llm: BaseLanguageModelInterface, tools: ToolInterface[], args?: ChatCreatePromptArgs & AgentArgs): ChatAgent;\n}\n"],"mappings":";;;;;;;;;;;;;AAWA;AAgBYW,UAhBKD,oBAAAA,CAgBS;EAAA;EAAA,MAAYF,CAAAA,EAAAA,MAAAA;EAAU;EAAX,MAAA,CAAA,EAAA,MAAA;EAKhBI;EAAS,oBAAA,CAAA,EAAA,MAAA;EAAA;EAGH,kBACJD,CAAAA,EAAAA,MAAAA;EAAc;EAWQ,cAMDJ,CAAAA,EAAAA,MAAAA,EAAAA;;;;;;AAkBkCL,KA5ClES,cAAAA,GAAiBP,QA4CiDF,CA5CxCM,UA4CwCN,EAAAA,cAAAA,CAAAA;;;;;AASgDU,cAhDzGA,SAAAA,SAAkBP,KAAAA,CAgDuFO;EAAS,OAhDhGP,OAAAA,CAAAA,CAAAA,EAAAA,MAAAA;EAAK,YAAA,EAAA,MAAA,EAAA;YAG9BJ;qBACSU;;;;;;;;;;;8BAWSV;;;;;;0CAMYM,mBAAmBE;;;;;;;6BAOhCN,cAAcU;;;;;;;;;;;6BAWdZ,wBAAwBS,uBAAuBR;;;;;;;;;8BAS9CF,mCAAmCC,wBAAwBS,uBAAuBJ,YAAYM"}