{"version":3,"file":"base.d.ts","names":["BaseMemory","ChainValues","CallbackManagerForChainRun","CallbackManager","Callbacks","RunnableConfig","BaseLangChain","BaseLangChainParams","SerializedBaseChain","LoadValues","Record","ChainInputs","BaseChain","RunInput","RunOutput","Promise","AbortSignal"],"sources":["../../src/chains/base.d.ts"],"sourcesContent":["import { BaseMemory } from \"@langchain/core/memory\";\nimport { ChainValues } from \"@langchain/core/utils/types\";\nimport { CallbackManagerForChainRun, CallbackManager, Callbacks } from \"@langchain/core/callbacks/manager\";\nimport { type RunnableConfig } from \"@langchain/core/runnables\";\nimport { BaseLangChain, BaseLangChainParams } from \"@langchain/core/language_models/base\";\nimport { SerializedBaseChain } from \"./serde.js\";\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type LoadValues = Record<string, any>;\nexport interface ChainInputs extends BaseLangChainParams {\n    memory?: BaseMemory;\n    /**\n     * @deprecated Use `callbacks` instead\n     */\n    callbackManager?: CallbackManager;\n}\n/**\n * Base interface that all chains must implement.\n */\nexport declare abstract class BaseChain<RunInput extends ChainValues = ChainValues, RunOutput extends ChainValues = ChainValues> extends BaseLangChain<RunInput, RunOutput> implements ChainInputs {\n    memory?: BaseMemory;\n    get lc_namespace(): string[];\n    constructor(fields?: BaseMemory | ChainInputs, \n    /** @deprecated */\n    verbose?: boolean, \n    /** @deprecated */\n    callbacks?: Callbacks);\n    /** @ignore */\n    _selectMemoryInputs(values: ChainValues): ChainValues;\n    /**\n     * Invoke the chain with the provided input and returns the output.\n     * @param input Input values for the chain run.\n     * @param config Optional configuration for the Runnable.\n     * @returns Promise that resolves with the output of the chain run.\n     */\n    invoke(input: RunInput, options?: RunnableConfig): Promise<RunOutput>;\n    private _validateOutputs;\n    prepOutputs(inputs: Record<string, unknown>, outputs: Record<string, unknown>, returnOnlyOutputs?: boolean): Promise<Record<string, unknown>>;\n    /**\n     * Run the core logic of this chain and return the output\n     */\n    abstract _call(values: RunInput, runManager?: CallbackManagerForChainRun, config?: RunnableConfig): Promise<RunOutput>;\n    /**\n     * Return the string type key uniquely identifying this class of chain.\n     */\n    abstract _chainType(): string;\n    /**\n     * Return a json-like object representing this chain.\n     */\n    serialize(): SerializedBaseChain;\n    abstract get inputKeys(): string[];\n    abstract get outputKeys(): string[];\n    /** @deprecated Use .invoke() instead. Will be removed in 0.2.0. */\n    run(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    input: any, config?: Callbacks | RunnableConfig): Promise<string>;\n    protected _formatValues(values: ChainValues & {\n        signal?: AbortSignal;\n        timeout?: number;\n    }): Promise<ChainValues & {\n        signal?: AbortSignal | undefined;\n        timeout?: number | undefined;\n    }>;\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Run the core logic of this chain and add to output if desired.\n     *\n     * Wraps _call and handles memory.\n     */\n    call(values: ChainValues & {\n        signal?: AbortSignal;\n        timeout?: number;\n    }, config?: Callbacks | RunnableConfig, \n    /** @deprecated */\n    tags?: string[]): Promise<RunOutput>;\n    /**\n     * @deprecated Use .batch() instead. Will be removed in 0.2.0.\n     *\n     * Call the chain on all inputs in the list\n     */\n    apply(inputs: RunInput[], config?: (Callbacks | RunnableConfig)[]): Promise<RunOutput[]>;\n    /**\n     * Load a chain from a json-like object describing it.\n     */\n    static deserialize(data: SerializedBaseChain, values?: LoadValues): Promise<BaseChain>;\n}\n"],"mappings":";;;;;;;;;KAOYS,UAAAA,GAAaC;AAAbD,UACKE,WAAAA,SAAoBJ,mBADN,CAAA;EACdI,MAAAA,CAAAA,EACJX,UADe;EAAA;;;EAKS,eALAO,CAAAA,EAKfJ,eALeI;AAAmB;AAUxD;;;AAAuEN,uBAAzCW,SAAyCX,CAAAA,iBAAdA,WAAcA,GAAAA,WAAAA,EAAAA,kBAA+BA,WAA/BA,GAA6CA,WAA7CA,CAAAA,SAAkEK,aAAlEL,CAAgFY,QAAhFZ,EAA0Fa,SAA1Fb,CAAAA,YAAgHU,WAAhHV,CAAAA;EAAW,MAAoBA,CAAAA,EACzFD,UADyFC;EAAW,IAAGA,YAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA;EAAW,WAAwBY,CAAAA,MAAAA,CAAAA,EAG9Hb,UAH8Ha,GAGjHF,WAHiHE,EAAQ;EAAW,OAC7Jb,CAAAA,EAAAA,OAAAA,EAAU;EAEY,SAAGW,CAAAA,EAItBP,SAJsBO;EAAW;EAIxB,mBAEOV,CAAAA,MAAAA,EAAAA,WAAAA,CAAAA,EAAcA,WAAdA;EAAW;;;;;;EASb,MAA4BS,CAAAA,KAAAA,EAFxCG,QAEwCH,EAAAA,OAAAA,CAAAA,EAFpBL,cAEoBK,CAAAA,EAFHK,OAEGL,CAFKI,SAELJ,CAAAA;EAAM,QAAyDA,gBAAAA;EAAM,WAAdK,CAAAA,MAAAA,EAAzFL,MAAyFK,CAAAA,MAAAA,EAAAA,OAAAA,CAAAA,EAAAA,OAAAA,EAAvDL,MAAuDK,CAAAA,MAAAA,EAAAA,OAAAA,CAAAA,EAAAA,iBAAAA,CAAAA,EAAAA,OAAAA,CAAAA,EAAAA,OAAAA,CAAQL,MAARK,CAAAA,MAAAA,EAAAA,OAAAA,CAAAA,CAAAA;EAAO;;;EAInB,SAAWD,KAAAA,CAAAA,MAAAA,EAArFD,QAAqFC,EAAAA,UAAAA,CAAAA,EAA9DZ,0BAA8DY,EAAAA,MAAAA,CAAAA,EAAzBT,cAAyBS,CAAAA,EAARC,OAAQD,CAAAA,SAAAA,CAAAA;EAAS;;;EAcvF,SAAGT,UAAAA,CAAAA,CAAAA,EAAAA,MAAAA;EAAc;;;EAEvB,SAEZJ,CAAAA,CAAAA,EAVCO,mBAUDP;EAAW,aACVe,SAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA;EAAW,aADpBD,UAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA;EAAO;EAWa,GACXC;EAAW;EAEH,KAAGX,EAAAA,GAAAA,EAAAA,MAAAA,CAAAA,EAlBHD,SAkBGC,GAlBSA,cAkBTA,CAAAA,EAlB0BU,OAkB1BV,CAAAA,MAAAA,CAAAA;EAAc,UAEZS,aAAAA,CAAAA,MAAAA,EAnBMb,WAmBNa,GAAAA;IAARC,MAAAA,CAAAA,EAlBLC,WAkBKD;IAMJF,OAAAA,CAAAA,EAAAA,MAAAA;EAAQ,CAAA,CAAA,EAtBlBE,OAsBgCX,CAtBxBH,WAsBwBG,GAAAA;IAAYC,MAAAA,CAAAA,EArBnCW,WAqBmCX,GAAAA,SAAAA;IAA4BS,OAAAA,CAAAA,EAAAA,MAAAA,GAAAA,SAAAA;EAAS,CAAA,CAAA;EAAV;;;;;;AA9DmH;eAmDjLb;aACAe;;cAEDZ,YAAYC;oBAENU,QAAQD;;;;;;gBAMZD,sBAAsBT,YAAYC,oBAAoBU,QAAQD;;;;2BAInDN,8BAA8BC,aAAaM,QAAQH"}