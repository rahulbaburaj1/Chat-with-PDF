{"version":3,"file":"output_parser.d.ts","names":["AgentAction","AgentFinish","BaseMessage","ChatGeneration","AgentMultiActionOutputParser","ToolsAgentAction","ToolsAgentStep","OpenAIToolsAgentOutputParser","Promise"],"sources":["../../../src/agents/openai_tools/output_parser.d.ts"],"sourcesContent":["import { AgentAction, AgentFinish } from \"@langchain/core/agents\";\nimport { BaseMessage } from \"@langchain/core/messages\";\nimport { ChatGeneration } from \"@langchain/core/outputs\";\nimport { AgentMultiActionOutputParser } from \"../types.js\";\nimport { ToolsAgentAction, ToolsAgentStep } from \"../tool_calling/output_parser.js\";\nexport type { ToolsAgentAction, ToolsAgentStep };\n/**\n * @example\n * ```typescript\n * const prompt = ChatPromptTemplate.fromMessages([\n *   [\"ai\", \"You are a helpful assistant\"],\n *   [\"human\", \"{input}\"],\n *   new MessagesPlaceholder(\"agent_scratchpad\"),\n * ]);\n *\n * const runnableAgent = RunnableSequence.from([\n *   {\n *     input: (i: { input: string; steps: ToolsAgentStep[] }) => i.input,\n *     agent_scratchpad: (i: { input: string; steps: ToolsAgentStep[] }) =>\n *       formatToOpenAIToolMessages(i.steps),\n *   },\n *   prompt,\n *   new ChatOpenAI({\n *     model: \"gpt-3.5-turbo-1106\",\n *     temperature: 0,\n *   }).bindTools(tools),\n *   new OpenAIToolsAgentOutputParser(),\n * ]).withConfig({ runName: \"OpenAIToolsAgent\" });\n *\n * const result = await runnableAgent.invoke({\n *   input:\n *     \"What is the sum of the current temperature in San Francisco, New York, and Tokyo?\",\n * });\n * ```\n */\nexport declare class OpenAIToolsAgentOutputParser extends AgentMultiActionOutputParser {\n    lc_namespace: string[];\n    static lc_name(): string;\n    parse(text: string): Promise<AgentAction[] | AgentFinish>;\n    parseResult(generations: ChatGeneration[]): Promise<AgentFinish | ToolsAgentAction[]>;\n    /**\n     * Parses the output message into a ToolsAgentAction[] or AgentFinish\n     * object.\n     * @param message The BaseMessage to parse.\n     * @returns A ToolsAgentAction[] or AgentFinish object.\n     */\n    parseAIMessage(message: BaseMessage): ToolsAgentAction[] | AgentFinish;\n    getFormatInstructions(): string;\n}\n"],"mappings":";;;;;;;;;AAmCA;;;;;;;;;;;;;AAAsF;;;;;;;;;;;;;;;cAAjEO,4BAAAA,SAAqCH,4BAAAA;;;uBAGjCI,QAAQR,gBAAgBC;2BACpBE,mBAAmBK,QAAQP,cAAcI;;;;;;;0BAO1CH,cAAcG,qBAAqBJ"}