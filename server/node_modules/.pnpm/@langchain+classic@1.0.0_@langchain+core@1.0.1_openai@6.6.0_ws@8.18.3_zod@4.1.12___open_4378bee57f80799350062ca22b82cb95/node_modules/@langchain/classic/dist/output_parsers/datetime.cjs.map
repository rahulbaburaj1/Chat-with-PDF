{"version":3,"file":"datetime.cjs","names":["BaseOutputParser","text: string","OutputParserException"],"sources":["../../src/output_parsers/datetime.ts"],"sourcesContent":["import {\n  BaseOutputParser,\n  OutputParserException,\n} from \"@langchain/core/output_parsers\";\n\n/**\n * Class to parse the output of an LLM call to a date.\n * @augments BaseOutputParser\n */\nexport class DatetimeOutputParser extends BaseOutputParser<Date> {\n  static lc_name() {\n    return \"DatetimeOutputParser\";\n  }\n\n  lc_namespace = [\"langchain\", \"output_parsers\"];\n\n  lc_serializable = true;\n\n  /**\n   * ISO 8601 date time standard.\n   */\n  format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n  /**\n   * Parses the given text into a Date.\n   * If the parsing fails, throws an OutputParserException.\n   * @param text The text to parse.\n   * @returns A date object.\n   */\n  async parse(text: string): Promise<Date> {\n    const parsedDate = new Date(text.trim());\n    if (Number.isNaN(parsedDate.getTime())) {\n      throw new OutputParserException(`Could not parse output: ${text}`, text);\n    }\n    return parsedDate;\n  }\n\n  /**\n   * Provides instructions on the expected format of the response for the\n   * CommaSeparatedListOutputParser.\n   * @returns A string containing instructions on the expected format of the response.\n   */\n  getFormatInstructions(): string {\n    return [\n      `Your response should be a datetime string that matches the following pattern: \"${this.format}\".`,\n      `Examples: 2011-10-05T14:48:00Z, 2019-01-01T00:00:00Z, 1932-04-21T04:42:23Z`,\n      `Return ONLY this string, no other words!`,\n    ].join(\"\\n\\n\");\n  }\n}\n"],"mappings":";;;;;;;;AASA,IAAa,uBAAb,cAA0CA,iDAAuB;CAC/D,OAAO,UAAU;AACf,SAAO;CACR;CAED,eAAe,CAAC,aAAa,gBAAiB;CAE9C,kBAAkB;;;;CAKlB,SAAS;;;;;;;CAQT,MAAM,MAAMC,MAA6B;EACvC,MAAM,aAAa,IAAI,KAAK,KAAK,MAAM;AACvC,MAAI,OAAO,MAAM,WAAW,SAAS,CAAC,CACpC,OAAM,IAAIC,sDAAsB,CAAC,wBAAwB,EAAE,MAAM,EAAE;AAErE,SAAO;CACR;;;;;;CAOD,wBAAgC;AAC9B,SAAO;GACL,CAAC,+EAA+E,EAAE,KAAK,OAAO,EAAE,CAAC;GACjG,CAAC,0EAA0E,CAAC;GAC5E,CAAC,wCAAwC,CAAC;EAC3C,EAAC,KAAK,OAAO;CACf;AACF"}