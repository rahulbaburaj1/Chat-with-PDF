{"version":3,"file":"http_response.d.cts","names":["BaseMessage","BaseTransformOutputParser","HttpResponseOutputParserInput","HttpResponseOutputParser","Uint8Array","AsyncGenerator","Promise"],"sources":["../../src/output_parsers/http_response.d.ts"],"sourcesContent":["import { BaseMessage } from \"@langchain/core/messages\";\nimport { BaseTransformOutputParser } from \"@langchain/core/output_parsers\";\nexport type HttpResponseOutputParserInput = {\n    outputParser?: BaseTransformOutputParser;\n    contentType?: \"text/plain\" | \"text/event-stream\";\n};\n/**\n * OutputParser that formats chunks emitted from an LLM for different HTTP content types.\n */\nexport declare class HttpResponseOutputParser extends BaseTransformOutputParser<Uint8Array> {\n    static lc_name(): string;\n    lc_namespace: string[];\n    lc_serializable: boolean;\n    outputParser: BaseTransformOutputParser;\n    contentType: \"text/plain\" | \"text/event-stream\";\n    constructor(fields?: HttpResponseOutputParserInput);\n    _transform(inputGenerator: AsyncGenerator<string | BaseMessage>): AsyncGenerator<Uint8Array>;\n    /**\n     * Parses a string output from an LLM call. This method is meant to be\n     * implemented by subclasses to define how a string output from an LLM\n     * should be parsed.\n     * @param text The string output from an LLM call.\n     * @param callbacks Optional callbacks.\n     * @returns A promise of the parsed output.\n     */\n    parse(text: string): Promise<Uint8Array>;\n    getFormatInstructions(): string;\n}\n"],"mappings":";;;;KAEYE,6BAAAA;iBACOD;EADPC,WAAAA,CAAAA,EAAAA,YAAAA,GAAAA,mBACOD;AAMnB,CAAA;;;;AAMyBC,cANJC,wBAAAA,SAAiCF,yBAM7BC,CANuDE,UAMvDF,CAAAA,CAAAA;EAA6B,OACCF,OAAAA,CAAAA,CAAAA,EAAAA,MAAAA;EAAW,YAAnCK,EAAAA,MAAAA,EAAAA;EAAc,eAAwCD,EAAAA,OAAAA;EAAU,YAAzBC,EAHpDJ,yBAGoDI;EAAc,WASnDD,EAAAA,YAAAA,GAAAA,mBAAAA;EAAU,WAAlBE,CAAAA,MAAAA,CAAAA,EAVAJ,6BAUAI;EAAO,UAhBsBL,CAAAA,cAAAA,EAOvBI,cAPuBJ,CAAAA,MAAAA,GAOCD,WAPDC,CAAAA,CAAAA,EAOgBI,cAPhBJ,CAO+BG,UAP/BH,CAAAA;EAAyB;;;;;;;;uBAgBtDK,QAAQF"}