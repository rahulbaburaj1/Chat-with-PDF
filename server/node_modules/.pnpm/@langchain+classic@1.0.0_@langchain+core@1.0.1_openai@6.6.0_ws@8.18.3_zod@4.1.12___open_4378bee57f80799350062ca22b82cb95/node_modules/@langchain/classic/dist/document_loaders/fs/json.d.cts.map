{"version":3,"file":"json.d.cts","names":["TextLoader","JSONLoader","Blob","Promise","JSONLinesLoader"],"sources":["../../../src/document_loaders/fs/json.d.ts"],"sourcesContent":["import { TextLoader } from \"./text.js\";\n/**\n * Class that extends the `TextLoader` class. It represents a document\n * loader that loads documents from JSON files. It has a constructor that\n * takes a `filePathOrBlob` parameter representing the path to the JSON\n * file or a `Blob` object, and an optional `pointers` parameter that\n * specifies the JSON pointers to extract.\n */\nexport declare class JSONLoader extends TextLoader {\n    pointers: string[];\n    constructor(filePathOrBlob: string | Blob, pointers?: string | string[]);\n    /**\n     * Method that takes a `raw` string as a parameter and returns a promise\n     * that resolves to an array of strings. It parses the raw JSON string and\n     * extracts the values based on the specified JSON pointers. If no JSON\n     * pointers are specified, it extracts all the strings from the JSON\n     * object.\n     * @param raw The raw JSON string to parse.\n     * @returns A promise that resolves to an array of strings.\n     */\n    protected parse(raw: string): Promise<string[]>;\n    /**\n     * If JSON pointers are specified, return all strings below any of them\n     * and exclude all other nodes expect if they match a JSON pointer (to allow to extract strings from different levels)\n     *\n     * If no JSON pointer is specified then return all string in the object\n     */\n    private extractArrayStringsFromObject;\n    /**\n     * Method that takes a `json` object and an array of `pointers` as\n     * parameters and returns an array of targeted entries. It iterates over\n     * the JSON pointers and uses the `jsonpointer.get()` function to get the\n     * targeted entries from the JSON object.\n     * @param json The JSON object to get targeted entries from.\n     * @param pointers The JSON pointers to get targeted entries.\n     * @returns An array of targeted entries.\n     */\n    private getTargetedEntries;\n}\n/**\n * Class that extends the `TextLoader` class. It represents a document\n * loader that loads documents from JSON Lines files. It has a constructor\n * that takes a `filePathOrBlob` parameter representing the path to the\n * JSON Lines file or a `Blob` object, and a `pointer` parameter that\n * specifies the JSON pointer to extract.\n */\nexport declare class JSONLinesLoader extends TextLoader {\n    pointer: string;\n    constructor(filePathOrBlob: string | Blob, pointer: string);\n    /**\n     * Method that takes a `raw` string as a parameter and returns a promise\n     * that resolves to an array of strings. It parses the raw JSON Lines\n     * string, splits it into lines, parses each line as JSON, and extracts\n     * the values based on the specified JSON pointer.\n     * @param raw The raw JSON Lines string to parse.\n     * @returns A promise that resolves to an array of strings.\n     */\n    protected parse(raw: string): Promise<string[]>;\n}\n"],"mappings":";;;;;;AAQA;;;;;AAAkD,cAA7BC,UAAAA,SAAmBD,UAAAA,CAAU;EAsC7BI,QAAAA,EAAAA,MAAAA,EAAe;EAAA,WAAA,CAAA,cAAA,EAAA,MAAA,GApCKF,IAoCL,EAAA,QAAA,CAAA,EAAA,MAAA,GAAA,MAAA,EAAA;EAAA;;;AAAmB;;;;;;gCA1BrBC;;;;;;;;;;;;;;;;;;;;;;;;;;cA0BbC,eAAAA,SAAwBJ,UAAAA;;uCAEJE;;;;;;;;;gCASPC"}