{"version":3,"file":"parser.d.cts","names":["Comparator","Comparison","Operation","Operator","TraverseType","QueryTransformer","Promise"],"sources":["../../../src/chains/query_constructor/parser.d.ts"],"sourcesContent":["import { Comparator, Comparison, Operation, Operator } from \"@langchain/core/structured_query\";\n/**\n * A type representing the possible types that can be traversed in an\n * expression.\n */\nexport type TraverseType = boolean | Operation | Comparison | string | number | {\n    [key: string]: TraverseType;\n} | TraverseType[];\n/**\n * A class for transforming and parsing query expressions.\n */\nexport declare class QueryTransformer {\n    allowedComparators: Comparator[];\n    allowedOperators: Operator[];\n    constructor(allowedComparators?: Comparator[], allowedOperators?: Operator[]);\n    /**\n     * Matches a function name to a comparator or operator. Throws an error if\n     * the function name is unknown or not allowed.\n     * @param funcName The function name to match.\n     * @returns The matched function name.\n     */\n    private matchFunctionName;\n    /**\n     * Transforms a parsed expression into an operation or comparison. Throws\n     * an error if the parsed expression is not supported.\n     * @param parsed The parsed expression to transform.\n     * @returns The transformed operation or comparison.\n     */\n    private transform;\n    /**\n     * Parses an expression and returns the transformed operation or\n     * comparison. Throws an error if the expression cannot be parsed.\n     * @param expression The expression to parse.\n     * @returns A Promise that resolves to the transformed operation or comparison.\n     */\n    parse(expression: string): Promise<Operation | Comparison>;\n}\n"],"mappings":";;;;;;AAKA;;AAAqCE,KAAzBE,YAAAA,GAAyBF,OAAAA,GAAAA,SAAAA,GAAYD,UAAZC,GAAAA,MAAAA,GAAAA,MAAAA,GAAAA;EAAS,CAAA,GAAGD,EAAAA,MAAAA,CAAAA,EAC9BG,YAD8BH;CAAU,GAEvDG,YADeA,EAAAA;;AACH;AAIhB;AAAqC,cAAhBC,gBAAAA,CAAgB;EAAA,kBACbL,EAAAA,UAAAA,EAAAA;EAAU,gBACZG,EAAAA,QAAAA,EAAAA;EAAQ,WACOH,CAAAA,kBAAAA,CAAAA,EAAAA,UAAAA,EAAAA,EAAAA,gBAAAA,CAAAA,EAAiCG,QAAjCH,EAAAA;EAAU;;;;AAqBT;;;;;;;;;;;;;;;;6BAAPM,QAAQJ,YAAYD"}