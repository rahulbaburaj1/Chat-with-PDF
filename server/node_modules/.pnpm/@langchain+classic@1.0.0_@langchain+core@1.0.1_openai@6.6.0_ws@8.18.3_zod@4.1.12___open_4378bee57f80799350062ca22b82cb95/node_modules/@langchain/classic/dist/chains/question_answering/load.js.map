{"version":3,"file":"load.js","names":["llm: BaseLanguageModelInterface","params: QAChainParams","params: StuffQAChainParams","params: MapReduceQAChainParams","params: RefineQAChainParams"],"sources":["../../../src/chains/question_answering/load.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport { BasePromptTemplate } from \"@langchain/core/prompts\";\nimport { LLMChain } from \"../llm_chain.js\";\nimport {\n  StuffDocumentsChain,\n  MapReduceDocumentsChain,\n  RefineDocumentsChain,\n  MapReduceDocumentsChainInput,\n} from \"../combine_docs_chain.js\";\nimport { QA_PROMPT_SELECTOR } from \"./stuff_prompts.js\";\nimport {\n  COMBINE_PROMPT_SELECTOR,\n  COMBINE_QA_PROMPT_SELECTOR,\n} from \"./map_reduce_prompts.js\";\nimport {\n  QUESTION_PROMPT_SELECTOR,\n  REFINE_PROMPT_SELECTOR,\n} from \"./refine_prompts.js\";\n\n/**\n * Represents the parameters for creating a QAChain. It can be of three\n * types: \"stuff\", \"map_reduce\", or \"refine\".\n */\nexport type QAChainParams =\n  | ({\n      type?: \"stuff\";\n    } & StuffQAChainParams)\n  | ({\n      type?: \"map_reduce\";\n    } & MapReduceQAChainParams)\n  | ({\n      type?: \"refine\";\n    } & RefineQAChainParams);\n\nexport const loadQAChain = (\n  llm: BaseLanguageModelInterface,\n  params: QAChainParams = { type: \"stuff\" }\n) => {\n  const { type } = params;\n  if (type === \"stuff\") {\n    return loadQAStuffChain(llm, params);\n  }\n  if (type === \"map_reduce\") {\n    return loadQAMapReduceChain(llm, params);\n  }\n  if (type === \"refine\") {\n    return loadQARefineChain(llm, params);\n  }\n  throw new Error(`Invalid _type: ${type}`);\n};\n\n/**\n * Represents the parameters for creating a StuffQAChain.\n */\nexport interface StuffQAChainParams {\n  prompt?: BasePromptTemplate;\n  verbose?: boolean;\n}\n\n/**\n * Loads a StuffQAChain based on the provided parameters. It takes an LLM\n * instance and StuffQAChainParams as parameters.\n * @param llm An instance of BaseLanguageModel.\n * @param params Parameters for creating a StuffQAChain.\n * @returns A StuffQAChain instance.\n */\nexport function loadQAStuffChain(\n  llm: BaseLanguageModelInterface,\n  params: StuffQAChainParams = {}\n) {\n  const { prompt = QA_PROMPT_SELECTOR.getPrompt(llm), verbose } = params;\n  const llmChain = new LLMChain({ prompt, llm, verbose });\n  const chain = new StuffDocumentsChain({ llmChain, verbose });\n  return chain;\n}\n\n/**\n * Represents the parameters for creating a MapReduceQAChain.\n */\nexport interface MapReduceQAChainParams {\n  returnIntermediateSteps?: MapReduceDocumentsChainInput[\"returnIntermediateSteps\"];\n  combineMapPrompt?: BasePromptTemplate;\n  combinePrompt?: BasePromptTemplate;\n  combineLLM?: BaseLanguageModelInterface;\n  verbose?: boolean;\n}\n\n/**\n * Loads a MapReduceQAChain based on the provided parameters. It takes an\n * LLM instance and MapReduceQAChainParams as parameters.\n * @param llm An instance of BaseLanguageModel.\n * @param params Parameters for creating a MapReduceQAChain.\n * @returns A MapReduceQAChain instance.\n */\nexport function loadQAMapReduceChain(\n  llm: BaseLanguageModelInterface,\n  params: MapReduceQAChainParams = {}\n) {\n  const {\n    combineMapPrompt = COMBINE_QA_PROMPT_SELECTOR.getPrompt(llm),\n    combinePrompt = COMBINE_PROMPT_SELECTOR.getPrompt(llm),\n    verbose,\n    combineLLM,\n    returnIntermediateSteps,\n  } = params;\n  const llmChain = new LLMChain({ prompt: combineMapPrompt, llm, verbose });\n  const combineLLMChain = new LLMChain({\n    prompt: combinePrompt,\n    llm: combineLLM ?? llm,\n    verbose,\n  });\n  const combineDocumentChain = new StuffDocumentsChain({\n    llmChain: combineLLMChain,\n    documentVariableName: \"summaries\",\n    verbose,\n  });\n  const chain = new MapReduceDocumentsChain({\n    llmChain,\n    combineDocumentChain,\n    returnIntermediateSteps,\n    verbose,\n  });\n  return chain;\n}\n\n/**\n * Represents the parameters for creating a RefineQAChain.\n */\nexport interface RefineQAChainParams {\n  questionPrompt?: BasePromptTemplate;\n  refinePrompt?: BasePromptTemplate;\n  refineLLM?: BaseLanguageModelInterface;\n  verbose?: boolean;\n}\n\n/**\n * Loads a RefineQAChain based on the provided parameters. It takes an LLM\n * instance and RefineQAChainParams as parameters.\n * @param llm An instance of BaseLanguageModel.\n * @param params Parameters for creating a RefineQAChain.\n * @returns A RefineQAChain instance.\n */\nexport function loadQARefineChain(\n  llm: BaseLanguageModelInterface,\n  params: RefineQAChainParams = {}\n) {\n  const {\n    questionPrompt = QUESTION_PROMPT_SELECTOR.getPrompt(llm),\n    refinePrompt = REFINE_PROMPT_SELECTOR.getPrompt(llm),\n    refineLLM,\n    verbose,\n  } = params;\n  const llmChain = new LLMChain({ prompt: questionPrompt, llm, verbose });\n  const refineLLMChain = new LLMChain({\n    prompt: refinePrompt,\n    llm: refineLLM ?? llm,\n    verbose,\n  });\n\n  const chain = new RefineDocumentsChain({\n    llmChain,\n    refineLLMChain,\n    verbose,\n  });\n  return chain;\n}\n"],"mappings":";;;;;;;AAkCA,MAAa,cAAc,CACzBA,KACAC,SAAwB,EAAE,MAAM,QAAS,MACtC;CACH,MAAM,EAAE,MAAM,GAAG;AACjB,KAAI,SAAS,QACX,QAAO,iBAAiB,KAAK,OAAO;AAEtC,KAAI,SAAS,aACX,QAAO,qBAAqB,KAAK,OAAO;AAE1C,KAAI,SAAS,SACX,QAAO,kBAAkB,KAAK,OAAO;AAEvC,OAAM,IAAI,MAAM,CAAC,eAAe,EAAE,MAAM;AACzC;;;;;;;;AAiBD,SAAgB,iBACdD,KACAE,SAA6B,CAAE,GAC/B;CACA,MAAM,EAAE,SAAS,mBAAmB,UAAU,IAAI,EAAE,SAAS,GAAG;CAChE,MAAM,WAAW,IAAI,SAAS;EAAE;EAAQ;EAAK;CAAS;CACtD,MAAM,QAAQ,IAAI,oBAAoB;EAAE;EAAU;CAAS;AAC3D,QAAO;AACR;;;;;;;;AAoBD,SAAgB,qBACdF,KACAG,SAAiC,CAAE,GACnC;CACA,MAAM,EACJ,mBAAmB,2BAA2B,UAAU,IAAI,EAC5D,gBAAgB,wBAAwB,UAAU,IAAI,EACtD,SACA,YACA,yBACD,GAAG;CACJ,MAAM,WAAW,IAAI,SAAS;EAAE,QAAQ;EAAkB;EAAK;CAAS;CACxE,MAAM,kBAAkB,IAAI,SAAS;EACnC,QAAQ;EACR,KAAK,cAAc;EACnB;CACD;CACD,MAAM,uBAAuB,IAAI,oBAAoB;EACnD,UAAU;EACV,sBAAsB;EACtB;CACD;CACD,MAAM,QAAQ,IAAI,wBAAwB;EACxC;EACA;EACA;EACA;CACD;AACD,QAAO;AACR;;;;;;;;AAmBD,SAAgB,kBACdH,KACAI,SAA8B,CAAE,GAChC;CACA,MAAM,EACJ,iBAAiB,yBAAyB,UAAU,IAAI,EACxD,eAAe,uBAAuB,UAAU,IAAI,EACpD,WACA,SACD,GAAG;CACJ,MAAM,WAAW,IAAI,SAAS;EAAE,QAAQ;EAAgB;EAAK;CAAS;CACtE,MAAM,iBAAiB,IAAI,SAAS;EAClC,QAAQ;EACR,KAAK,aAAa;EAClB;CACD;CAED,MAAM,QAAQ,IAAI,qBAAqB;EACrC;EACA;EACA;CACD;AACD,QAAO;AACR"}