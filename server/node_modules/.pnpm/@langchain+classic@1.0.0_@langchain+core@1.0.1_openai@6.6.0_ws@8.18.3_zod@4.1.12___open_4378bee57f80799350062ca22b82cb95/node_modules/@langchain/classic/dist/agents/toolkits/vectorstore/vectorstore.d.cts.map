{"version":3,"file":"vectorstore.d.cts","names":["BaseLanguageModelInterface","VectorStoreInterface","ToolInterface","BaseToolkit","ZeroShotCreatePromptArgs","AgentExecutor","VectorStoreInfo","VectorStoreToolkit","VectorStoreRouterToolkit","createVectorStoreAgent","createVectorStoreRouterAgent"],"sources":["../../../../src/agents/toolkits/vectorstore/vectorstore.d.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport type { VectorStoreInterface } from \"@langchain/core/vectorstores\";\nimport { ToolInterface, BaseToolkit } from \"@langchain/core/tools\";\nimport { ZeroShotCreatePromptArgs } from \"../../mrkl/index.js\";\nimport { AgentExecutor } from \"../../executor.js\";\n/**\n * Interface that defines the information about a vector store, including\n * the vector store itself, its name, and description.\n */\nexport interface VectorStoreInfo {\n    vectorStore: VectorStoreInterface;\n    name: string;\n    description: string;\n}\n/**\n * Class representing a toolkit for working with a single vector store. It\n * initializes the vector store QA tool based on the provided vector store\n * information and language model.\n * @example\n * ```typescript\n * const toolkit = new VectorStoreToolkit(\n *   {\n *     name: \"state_of_union_address\",\n *     description: \"the most recent state of the Union address\",\n *     vectorStore: new HNSWLib(),\n *   },\n *   new ChatOpenAI({ model: \"gpt-4o-mini\", temperature: 0 }),\n * );\n * const result = await toolkit.invoke({\n *   input:\n *     \"What did biden say about Ketanji Brown Jackson in the state of the union address?\",\n * });\n * console.log(`Got output ${result.output}`);\n * ```\n */\nexport declare class VectorStoreToolkit extends BaseToolkit {\n    tools: ToolInterface[];\n    llm: BaseLanguageModelInterface;\n    constructor(vectorStoreInfo: VectorStoreInfo, llm: BaseLanguageModelInterface);\n}\n/**\n * Class representing a toolkit for working with multiple vector stores.\n * It initializes multiple vector store QA tools based on the provided\n * vector store information and language model.\n */\nexport declare class VectorStoreRouterToolkit extends BaseToolkit {\n    tools: ToolInterface[];\n    vectorStoreInfos: VectorStoreInfo[];\n    llm: BaseLanguageModelInterface;\n    constructor(vectorStoreInfos: VectorStoreInfo[], llm: BaseLanguageModelInterface);\n}\nexport declare function createVectorStoreAgent(llm: BaseLanguageModelInterface, toolkit: VectorStoreToolkit, args?: ZeroShotCreatePromptArgs): AgentExecutor;\nexport declare function createVectorStoreRouterAgent(llm: BaseLanguageModelInterface, toolkit: VectorStoreRouterToolkit, args?: ZeroShotCreatePromptArgs): AgentExecutor;\n"],"mappings":";;;;;;;;;;AASA;AA0BA;AAAuC,UA1BtBM,eAAAA,CA0BsB;EAAA,WAC5BJ,EA1BMD,oBA0BNC;EAAa,IACfF,EAAAA,MAAAA;EAA0B,WACFM,EAAAA,MAAAA;;;AAH0B;AAU3D;;;;;;;;AAAiE;AAMjE;;;;;;AAA4J;AAC5J;;;AAA+FE,cAjB1ED,kBAAAA,SAA2BJ,WAAAA,CAiB+CK;EAAwB,KAASJ,EAhBrHF,aAgBqHE,EAAAA;EAAwB,GAAGC,EAflJL,0BAekJK;EAAa,WAAA,CAAA,eAAA,EAdvIC,eAcuI,EAAA,GAAA,EAdjHN,0BAciH;;;;;;;cAPnJQ,wBAAAA,SAAiCL,WAAAA;SAC3CD;oBACWI;OACbN;gCACyBM,wBAAwBN;;iBAElCS,sBAAAA,MAA4BT,qCAAqCO,2BAA2BH,2BAA2BC;iBACvHK,4BAAAA,MAAkCV,qCAAqCQ,iCAAiCJ,2BAA2BC"}