{"version":3,"file":"file_system.d.ts","names":["BaseCache","Generation","LocalFileCache","Promise"],"sources":["../../src/cache/file_system.d.ts"],"sourcesContent":["import { BaseCache } from \"@langchain/core/caches\";\nimport { Generation } from \"@langchain/core/outputs\";\n/**\n * A cache that uses the local filesystem as the backing store.\n * This is useful for local development and testing. But it is not recommended for production use.\n */\nexport declare class LocalFileCache extends BaseCache {\n    private cacheDir;\n    private constructor();\n    /**\n     * Create a new cache backed by the local filesystem.\n     * It ensures that the cache directory exists before returning.\n     * @param cacheDir\n     */\n    static create(cacheDir?: string): Promise<LocalFileCache>;\n    /**\n     * Retrieves data from the cache. It constructs a cache key from the given\n     * `prompt` and `llmKey`, and retrieves the corresponding value from the\n     * cache files.\n     * @param prompt The prompt used to construct the cache key.\n     * @param llmKey The LLM key used to construct the cache key.\n     * @returns An array of Generations if found, null otherwise.\n     */\n    lookup(prompt: string, llmKey: string): Promise<any>;\n    /**\n     * Updates the cache with new data. It constructs a cache key from the\n     * given `prompt` and `llmKey`, and stores the `value` in a specific\n     * file in the cache directory.\n     * @param prompt The prompt used to construct the cache key.\n     * @param llmKey The LLM key used to construct the cache key.\n     * @param generations The value to be stored in the cache.\n     */\n    update(prompt: string, llmKey: string, generations: Generation[]): Promise<void>;\n}\n"],"mappings":";;;;;;;AAMA;;AAQ8CE,cARzBA,cAAAA,SAAuBF,SAAAA,CAQEE;EAAc,QAAtBC,QAAAA;EAAO,QASDA,WAAAA,CAAAA;EAAO;;;AAjBE;;oCAQfA,QAAQD;;;;;;;;;0CASFC;;;;;;;;;sDASYF,eAAeE"}