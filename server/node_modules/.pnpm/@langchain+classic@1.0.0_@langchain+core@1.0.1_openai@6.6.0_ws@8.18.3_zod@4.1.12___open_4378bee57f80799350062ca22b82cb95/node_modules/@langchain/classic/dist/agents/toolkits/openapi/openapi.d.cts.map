{"version":3,"file":"openapi.d.cts","names":["BaseLanguageModelInterface","ToolInterface","BaseToolkit","JsonSpec","AgentExecutor","ZeroShotCreatePromptArgs","Headers","RequestsToolkit","OpenApiToolkit","createOpenApiAgent"],"sources":["../../../../src/agents/toolkits/openapi/openapi.d.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport type { ToolInterface } from \"@langchain/core/tools\";\nimport { BaseToolkit } from \"@langchain/core/tools\";\nimport { JsonSpec } from \"../../../tools/json.js\";\nimport { AgentExecutor } from \"../../executor.js\";\nimport { ZeroShotCreatePromptArgs } from \"../../mrkl/index.js\";\nimport { Headers } from \"../../../tools/requests.js\";\n/**\n * Represents a toolkit for making HTTP requests. It initializes the\n * request tools based on the provided headers.\n */\nexport declare class RequestsToolkit extends BaseToolkit {\n    tools: ToolInterface[];\n    constructor(headers?: Headers);\n}\n/**\n * Extends the `RequestsToolkit` class and adds a dynamic tool for\n * exploring JSON data. It creates a JSON agent using the `JsonToolkit`\n * and the provided language model, and adds the JSON explorer tool to the\n * toolkit.\n * @example\n * ```typescript\n * const toolkit = new OpenApiToolkit(\n *   new JsonSpec({\n *   }),\n *   new ChatOpenAI({ model: \"gpt-4o-mini\", temperature: 0 }),\n *   {\n *     \"Content-Type\": \"application/json\",\n *     Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,\n *   },\n * );\n *\n * const result = await toolkit.invoke({\n *   input:\n *     \"Make a POST request to openai /completions. The prompt should be 'tell me a joke.'\",\n * });\n * console.log(`Got output ${result.output}`);\n * ```\n */\nexport declare class OpenApiToolkit extends RequestsToolkit {\n    constructor(jsonSpec: JsonSpec, llm: BaseLanguageModelInterface, headers?: Headers);\n}\n/**\n * Creates an OpenAPI agent using a language model, an OpenAPI toolkit,\n * and optional prompt arguments. It creates a prompt for the agent using\n * the OpenAPI tools and the provided prefix and suffix. It then creates a\n * ZeroShotAgent with the prompt and the OpenAPI tools, and returns an\n * AgentExecutor for executing the agent with the tools.\n * @param llm The language model to use.\n * @param openApiToolkit The OpenAPI toolkit to use.\n * @param args Optional arguments for creating the prompt.\n * @returns An AgentExecutor for executing the agent with the tools.\n *\n * @security **Security Notice** This agent provides access to external APIs.\n * Use with caution as this agent can make API calls with arbitrary headers.\n * Exposing this agent to users could lead to security vulnerabilities. Consider\n * limiting access to what endpoints it can hit, what actions can be taken, and\n * more.\n *\n * @link See https://js.langchain.com/docs/security for more information.\n */\nexport declare function createOpenApiAgent(llm: BaseLanguageModelInterface, openApiToolkit: OpenApiToolkit, args?: ZeroShotCreatePromptArgs): AgentExecutor;\n"],"mappings":";;;;;;;;;;AAWA;;;AAE0BM,cAFLC,eAAAA,SAAwBL,WAAAA,CAEnBI;EAAO,KAFYJ,EAClCD,aADkCC,EAAAA;EAAW,WAAA,CAAA,OAAA,CAAA,EAE9BI,OAF8B;AA4BxD;;;;;;AAA2D;AAsB3D;;;;;;AAA2J;;;;;;;;;;;;cAtBtIE,cAAAA,SAAuBD,eAAAA;wBAClBJ,eAAeH,sCAAsCM;;;;;;;;;;;;;;;;;;;;;iBAqBvDG,kBAAAA,MAAwBT,4CAA4CQ,uBAAuBH,2BAA2BD"}