{"version":3,"file":"index.d.ts","names":["BaseLanguageModelInterface","BaseFunctionCallOptions","StructuredToolInterface","BaseChatModel","AgentAction","AgentFinish","AgentStep","BaseMessage","SystemMessage","ChainValues","ChatPromptTemplate","BasePromptTemplate","CallbackManager","Agent","AgentArgs","AgentRunnableSequence","AgentInput","OpenAIFunctionsAgentOutputParser","_formatIntermediateSteps","OpenAIAgentInput","OpenAIAgentCreatePromptArgs","OpenAIAgent","Omit","Pick","Promise","Array","CreateOpenAIFunctionsAgentParams","createOpenAIFunctionsAgent","llm","tools","prompt","streamRunnable"],"sources":["../../../src/agents/openai_functions/index.d.ts"],"sourcesContent":["import type { BaseLanguageModelInterface, BaseFunctionCallOptions } from \"@langchain/core/language_models/base\";\nimport type { StructuredToolInterface } from \"@langchain/core/tools\";\nimport type { BaseChatModel } from \"@langchain/core/language_models/chat_models\";\nimport type { AgentAction, AgentFinish, AgentStep } from \"@langchain/core/agents\";\nimport { BaseMessage, SystemMessage } from \"@langchain/core/messages\";\nimport { ChainValues } from \"@langchain/core/utils/types\";\nimport { ChatPromptTemplate, BasePromptTemplate } from \"@langchain/core/prompts\";\nimport { CallbackManager } from \"@langchain/core/callbacks/manager\";\nimport { Agent, AgentArgs, AgentRunnableSequence } from \"../agent.js\";\nimport { AgentInput } from \"../types.js\";\nimport { OpenAIFunctionsAgentOutputParser } from \"../openai/output_parser.js\";\nexport declare function _formatIntermediateSteps(intermediateSteps: AgentStep[]): BaseMessage[];\n/**\n * Interface for the input data required to create an OpenAIAgent.\n */\nexport interface OpenAIAgentInput extends AgentInput {\n    tools: StructuredToolInterface[];\n}\n/**\n * Interface for the arguments required to create a prompt for an\n * OpenAIAgent.\n */\nexport interface OpenAIAgentCreatePromptArgs {\n    prefix?: string;\n    systemMessage?: SystemMessage;\n}\n/**\n * Class representing an agent for the OpenAI chat model in LangChain. It\n * extends the Agent class and provides additional functionality specific\n * to the OpenAIAgent type.\n */\nexport declare class OpenAIAgent extends Agent {\n    static lc_name(): string;\n    lc_namespace: string[];\n    _agentType(): \"openai-functions\";\n    observationPrefix(): string;\n    llmPrefix(): string;\n    _stop(): string[];\n    tools: StructuredToolInterface[];\n    outputParser: OpenAIFunctionsAgentOutputParser;\n    constructor(input: Omit<OpenAIAgentInput, \"outputParser\">);\n    /**\n     * Creates a prompt for the OpenAIAgent using the provided tools and\n     * fields.\n     * @param _tools The tools to be used in the prompt.\n     * @param fields Optional fields for creating the prompt.\n     * @returns A BasePromptTemplate object representing the created prompt.\n     */\n    static createPrompt(_tools: StructuredToolInterface[], fields?: OpenAIAgentCreatePromptArgs): BasePromptTemplate;\n    /**\n     * Creates an OpenAIAgent from a BaseLanguageModel and a list of tools.\n     * @param llm The BaseLanguageModel to use.\n     * @param tools The tools to be used by the agent.\n     * @param args Optional arguments for creating the agent.\n     * @returns An instance of OpenAIAgent.\n     */\n    static fromLLMAndTools(llm: BaseLanguageModelInterface, tools: StructuredToolInterface[], args?: OpenAIAgentCreatePromptArgs & Pick<AgentArgs, \"callbacks\">): OpenAIAgent;\n    /**\n     * Constructs a scratch pad from a list of agent steps.\n     * @param steps The steps to include in the scratch pad.\n     * @returns A string or a list of BaseMessages representing the constructed scratch pad.\n     */\n    constructScratchPad(steps: AgentStep[]): Promise<string | BaseMessage[]>;\n    /**\n     * Plans the next action or finish state of the agent based on the\n     * provided steps, inputs, and optional callback manager.\n     * @param steps The steps to consider in planning.\n     * @param inputs The inputs to consider in planning.\n     * @param callbackManager Optional CallbackManager to use in planning.\n     * @returns A Promise that resolves to an AgentAction or AgentFinish object representing the planned action or finish state.\n     */\n    plan(steps: Array<AgentStep>, inputs: ChainValues, callbackManager?: CallbackManager): Promise<AgentAction | AgentFinish>;\n}\n/**\n * Params used by the createOpenAIFunctionsAgent function.\n */\nexport type CreateOpenAIFunctionsAgentParams = {\n    /**\n     * LLM to use as the agent. Should work with OpenAI function calling,\n     * so must either be an OpenAI model that supports that or a wrapper of\n     * a different model that adds in equivalent support.\n     */\n    llm: BaseChatModel<BaseFunctionCallOptions>;\n    /** Tools this agent has access to. */\n    tools: StructuredToolInterface[];\n    /** The prompt to use, must have an input key for `agent_scratchpad`. */\n    prompt: ChatPromptTemplate;\n    /**\n     * Whether to invoke the underlying model in streaming mode,\n     * allowing streaming of intermediate steps. Defaults to true.\n     */\n    streamRunnable?: boolean;\n};\n/**\n * Create an agent that uses OpenAI-style function calling.\n * @param params Params required to create the agent. Includes an LLM, tools, and prompt.\n * @returns A runnable sequence representing an agent. It takes as input all the same input\n *     variables as the prompt passed in does. It returns as output either an\n *     AgentAction or AgentFinish.\n *\n * @example\n * ```typescript\n * import { AgentExecutor, createOpenAIFunctionsAgent } from \"langchain/agents\";\n * import { pull } from \"langchain/hub\";\n * import type { ChatPromptTemplate } from \"@langchain/core/prompts\";\n * import { AIMessage, HumanMessage } from \"@langchain/core/messages\";\n *\n * import { ChatOpenAI } from \"@langchain/openai\";\n *\n * // Define the tools the agent will have access to.\n * const tools = [...];\n *\n * // Get the prompt to use - you can modify this!\n * // If you want to see the prompt in full, you can at:\n * // https://smith.langchain.com/hub/hwchase17/openai-functions-agent\n * const prompt = await pull<ChatPromptTemplate>(\n *   \"hwchase17/openai-functions-agent\"\n * );\n *\n * const llm = new ChatOpenAI({\n *   model: \"gpt-4o-mini\",\n *   temperature: 0,\n * });\n *\n * const agent = await createOpenAIFunctionsAgent({\n *   llm,\n *   tools,\n *   prompt,\n * });\n *\n * const agentExecutor = new AgentExecutor({\n *   agent,\n *   tools,\n * });\n *\n * const result = await agentExecutor.invoke({\n *   input: \"what is LangChain?\",\n * });\n *\n * // With chat history\n * const result2 = await agentExecutor.invoke({\n *   input: \"what's my name?\",\n *   chat_history: [\n *     new HumanMessage(\"hi! my name is cob\"),\n *     new AIMessage(\"Hello Cob! How can I assist you today?\"),\n *   ],\n * });\n * ```\n */\nexport declare function createOpenAIFunctionsAgent({ llm, tools, prompt, streamRunnable }: CreateOpenAIFunctionsAgentParams): Promise<AgentRunnableSequence<{\n    steps: AgentStep[];\n}, AgentAction | AgentFinish>>;\n"],"mappings":";;;;;;;;;;;;;;;AAeA;;AACWE,UADMiB,gBAAAA,SAAyBH,UAC/Bd,CAAAA;EAAuB,KADQc,EAC/Bd,uBAD+Bc,EAAAA;AAAU;AAOpD;AASA;;;AAQkBC,UAjBDG,2BAAAA,CAiBCH;EAAgC,MACtBE,CAAAA,EAAAA,MAAAA;EAAgB,aAArBG,CAAAA,EAhBHd,aAgBGc;;;;;;;AAgBiHR,cAzBnHO,WAAAA,SAAoBR,KAAAA,CAyB+FC;EAAS,OAAdS,OAAAA,CAAAA,CAAAA,EAAAA,MAAAA;EAAI,YAA2BF,EAAAA,MAAAA,EAAAA;EAAW,UAM9If,CAAAA,CAAAA,EAAAA,kBAAAA;EAAS,iBAAsBC,CAAAA,CAAAA,EAAAA,MAAAA;EAAW,SAA5BiB,CAAAA,CAAAA,EAAAA,MAAAA;EAAO,KAS9BlB,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA;EAAS,KAAfmB,EAjCLvB,uBAiCKuB,EAAAA;EAAK,YAAqBhB,EAhCxBQ,gCAgCwBR;EAAW,WAAoBG,CAAAA,KAAAA,EA/BlDU,IA+BkDV,CA/B7CO,gBA+B6CP,EAAAA,cAAAA,CAAAA;EAAe;;;;AAxC1C;AA6C9C;;EAA4C,OAMrBX,YAAAA,CAAAA,MAAAA,EAlCSC,uBAkCTD,EAAAA,EAAAA,MAAAA,CAAAA,EAlC6CmB,2BAkC7CnB,CAAAA,EAlC2EU,kBAkC3EV;EAAuB;;;AAIhB;AA+D9B;;;EAAwD,OAAE4B,eAAAA,CAAAA,GAAAA,EA7F1B7B,0BA6F0B6B,EAAAA,KAAAA,EA7FS3B,uBA6FT2B,EAAAA,EAAAA,IAAAA,CAAAA,EA7F2CT,2BA6F3CS,GA7FyEN,IA6FzEM,CA7F8Ef,SA6F9Ee,EAAAA,WAAAA,CAAAA,CAAAA,EA7FwGR,WA6FxGQ;EAAK;;;;;EAEjD,mBAAGxB,CAAAA,KAAAA,EAzFcC,SAyFdD,EAAAA,CAAAA,EAzF4BmB,OAyF5BnB,CAAAA,MAAAA,GAzF6CE,WAyF7CF,EAAAA,CAAAA;EAAW;;AAFyG;;;;;;cA9ErHoB,MAAMnB,oBAAoBG,+BAA+BG,kBAAkBY,QAAQpB,cAAcC;;;;;KAKrGqB,gCAAAA;;;;;;OAMHvB,cAAcF;;SAEZC;;UAECQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iBA+DYiB,0BAAAA;;;;;GAAmED,mCAAmCF,QAAQT;SAC3HT;GACRF,cAAcC"}