{"version":3,"file":"regex_masking_transformer.d.ts","names":["MaskingTransformer","HashFunction","MaskingPattern","RegexMaskingTransformer","Map","Promise"],"sources":["../../../src/experimental/masking/regex_masking_transformer.d.ts"],"sourcesContent":["import { MaskingTransformer } from \"./transformer.js\";\nimport type { HashFunction, MaskingPattern } from \"./types.js\";\n/**\n * RegexMaskingTransformer class for masking and rehydrating messages with Regex.\n */\nexport declare class RegexMaskingTransformer extends MaskingTransformer {\n    private patterns;\n    private hashFunction;\n    /**\n     * Constructs a RegexMaskingTransformer with given patterns and an optional hash function.\n     * Validates the provided patterns to ensure they conform to the expected structure.\n     *\n     * @param patterns - An object containing masking patterns. Each pattern should include\n     *                   a regular expression (`regex`) and optionally a `replacement` string\n     *                   or a `mask` function.\n     * @param hashFunction - An optional custom hash function to be used for masking.\n     */\n    constructor(patterns: {\n        [key: string]: MaskingPattern;\n    }, hashFunction?: HashFunction);\n    /**\n     * Validates the given masking patterns to ensure each pattern has a valid regular expression.\n     * Throws an error if any pattern is found to be invalid.\n     *\n     * @param patterns - The patterns object to validate.\n     */\n    private validatePatterns;\n    /**\n     * Masks content in a message based on the defined patterns.\n     * @param message - The message to be masked.\n     * @param state - The current state containing original values.\n     * @returns A tuple of the masked message and the updated state.\n     */\n    transform(message: string, state: Map<string, string>): Promise<[string, Map<string, string>]>;\n    /**\n     * Rehydrates a masked message back to its original form using the provided state.\n     * @param message - The masked message to be rehydrated.\n     * @param state - The state map containing mappings of masked values to their original values.\n     * @returns The rehydrated (original) message.\n     */\n    rehydrate(message: string, state: Map<string, string>): Promise<string>;\n    /**\n     * Default hash function for creating unique hash values.\n     * @param input - The input string to hash.\n     * @returns The resulting hash as a string.\n     */\n    private defaultHashFunction;\n}\n"],"mappings":";;;;;;;AAKA;AAA4C,cAAvBG,uBAAAA,SAAgCH,kBAAAA,CAAT;EAAA,QAarBE,QAAAA;EAAc,QACfD,YAAAA;EAAY;;;;;;AAdqC;;;;mBAahDC;oBACDD;;;;;;;;;;;;;;oCAcgBG,sBAAsBC,iBAAiBD;;;;;;;oCAOvCA,sBAAsBC"}