{"version":3,"file":"serializable.d.cts","names":["SerializedFields","BaseSerialized","T","Record","SerializedConstructor","SerializedSecret","SerializedNotImplemented","Serialized","get_lc_unique_name","Serializable","SerializableInterface"],"sources":["../../../../../langchain-core/dist/load/serializable.d.ts"],"sourcesContent":["import { SerializedFields } from \"./map_keys.js\";\n\n//#region src/load/serializable.d.ts\ninterface BaseSerialized<T extends string> {\n  lc: number;\n  type: T;\n  id: string[];\n  name?: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  graph?: Record<string, any>;\n}\ninterface SerializedConstructor extends BaseSerialized<\"constructor\"> {\n  kwargs: SerializedFields;\n}\ninterface SerializedSecret extends BaseSerialized<\"secret\"> {}\ninterface SerializedNotImplemented extends BaseSerialized<\"not_implemented\"> {}\ntype Serialized = SerializedConstructor | SerializedSecret | SerializedNotImplemented;\n/**\n * Get a unique name for the module, rather than parent class implementations.\n * Should not be subclassed, subclass lc_name above instead.\n */\ndeclare function get_lc_unique_name(serializableClass: typeof Serializable): string;\ninterface SerializableInterface {\n  get lc_id(): string[];\n}\ndeclare abstract class Serializable implements SerializableInterface {\n  lc_serializable: boolean;\n  lc_kwargs: SerializedFields;\n  /**\n   * A path to the module that contains the class, eg. [\"langchain\", \"llms\"]\n   * Usually should be the same as the entrypoint the class is exported from.\n   */\n  abstract lc_namespace: string[];\n  /**\n   * The name of the serializable. Override to provide an alias or\n   * to preserve the serialized module name in minified environments.\n   *\n   * Implemented as a static method to support loading logic.\n   */\n  static lc_name(): string;\n  /**\n   * The final serialized identifier for the module.\n   */\n  get lc_id(): string[];\n  /**\n   * A map of secrets, which will be omitted from serialization.\n   * Keys are paths to the secret in constructor args, e.g. \"foo.bar.baz\".\n   * Values are the secret ids, which will be used when deserializing.\n   */\n  get lc_secrets(): {\n    [key: string]: string;\n  } | undefined;\n  /**\n   * A map of additional attributes to merge with constructor args.\n   * Keys are the attribute names, e.g. \"foo\".\n   * Values are the attribute values, which will be serialized.\n   * These attributes need to be accepted by the constructor as arguments.\n   */\n  get lc_attributes(): SerializedFields | undefined;\n  /**\n   * A map of aliases for constructor args.\n   * Keys are the attribute names, e.g. \"foo\".\n   * Values are the alias that will replace the key in serialization.\n   * This is used to eg. make argument names match Python.\n   */\n  get lc_aliases(): {\n    [key: string]: string;\n  } | undefined;\n  /**\n   * A manual list of keys that should be serialized.\n   * If not overridden, all fields passed into the constructor will be serialized.\n   */\n  get lc_serializable_keys(): string[] | undefined;\n  constructor(kwargs?: SerializedFields, ..._args: never[]);\n  toJSON(): Serialized;\n  toJSONNotImplemented(): SerializedNotImplemented;\n}\n//#endregion\nexport { BaseSerialized, Serializable, SerializableInterface, Serialized, SerializedConstructor, SerializedNotImplemented, SerializedSecret, get_lc_unique_name };\n//# sourceMappingURL=serializable.d.ts.map"],"mappings":";;;;AAAiD,UAGvCC,cAAc,CAAA,UAAA,MAAA,CAAA,CAAA;EAAA,EAAA,EAAA,MAAA;EAAA,IAAA,EAEhBC,CAAAA;EAAC,EAAA,EAAA,MAICC,EAAAA;EAAM,IAAA,CAAA,EAAA,MAAA;EAAA;EAEe,KAAA,CAAA,EAFrBA,MAEqB,CAAA,MAAA,EAAA,GAAA,CAAA;;UAArBC,qBAAAA,SAA8BH,cAAAA,CAAAA,aAAAA,CAAAA,CAAAA;EAAc,MAAA,EAC5CD,gBAD4C;AAAA;AAGL,UAAvCK,gBAAAA,SAAyBJ,cACQA,CAAAA,QAAc,CAAA,CAAA,CAAA;AAAA,UAA/CK,wBAAAA,SAAiCL,cAC5B,CAAA,iBAAA,CAAA,CAAA,CAAA;KAAVM,UAAAA,GAAaH,qBAAH,GAA2BC,gBAA3B,GAA8CC,wBAA9C;;;;AAAsE;;AAMtD,UAArBI,qBAAAA,CAGyB;EAAA,IAAA,KAAA,EAAA,EAAA,MAAA,EAAA;;uBAAZD,YAAAA,YAAwBC,qBAiCxBV,CAAAA;EAAgB,eAehBA,EAAAA,OAAAA;EAAgB,SAC3BO,EA/CCP,gBA+CDO;EAAU;;AAjD8C;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAiC7CP;;;;;;;;;;;;;;;uBAeAA;YACXO;0BACcD"}