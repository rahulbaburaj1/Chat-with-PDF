{"version":3,"file":"output_parser.d.ts","names":["AgentAction","AgentFinish","BaseMessage","ChatGeneration","AgentActionOutputParser","FunctionsAgentAction","OpenAIFunctionsAgentOutputParser","Promise"],"sources":["../../../src/agents/openai_functions/output_parser.d.ts"],"sourcesContent":["import { AgentAction, AgentFinish } from \"@langchain/core/agents\";\nimport { BaseMessage } from \"@langchain/core/messages\";\nimport { ChatGeneration } from \"@langchain/core/outputs\";\nimport { AgentActionOutputParser } from \"../types.js\";\n/**\n * Type that represents an agent action with an optional message log.\n */\nexport type FunctionsAgentAction = AgentAction & {\n    messageLog?: BaseMessage[];\n};\n/**\n * @example\n * ```typescript\n *\n * const prompt = ChatPromptTemplate.fromMessages([\n *   [\"ai\", \"You are a helpful assistant\"],\n *   [\"human\", \"{input}\"],\n *   new MessagesPlaceholder(\"agent_scratchpad\"),\n * ]);\n *\n * const modelWithFunctions = new ChatOpenAI({\n *   model: \"gpt-4\",\n *   temperature: 0,\n * }).bindTools(tools);\n *\n * const runnableAgent = RunnableSequence.from([\n *   {\n *     input: (i) => i.input,\n *     agent_scratchpad: (i) => formatAgentSteps(i.steps),\n *   },\n *   prompt,\n *   modelWithFunctions,\n *   new OpenAIFunctionsAgentOutputParser(),\n * ]);\n *\n * const result = await runnableAgent.invoke({\n *   input: \"What is the weather in New York?\",\n *   steps: agentSteps,\n * });\n *\n * ```\n */\nexport declare class OpenAIFunctionsAgentOutputParser extends AgentActionOutputParser {\n    lc_namespace: string[];\n    static lc_name(): string;\n    parse(text: string): Promise<AgentAction | AgentFinish>;\n    parseResult(generations: ChatGeneration[]): Promise<AgentFinish | FunctionsAgentAction>;\n    /**\n     * Parses the output message into a FunctionsAgentAction or AgentFinish\n     * object.\n     * @param message The BaseMessage to parse.\n     * @returns A FunctionsAgentAction or AgentFinish object.\n     */\n    parseAIMessage(message: BaseMessage): FunctionsAgentAction | AgentFinish;\n    getFormatInstructions(): string;\n}\n"],"mappings":";;;;;;;;;AAOA;AAAgC,KAApBK,oBAAAA,GAAuBL,WAAH,GAAA;EAAA,UAAGA,CAAAA,EAClBE,WADkBF,EAAAA;CAAW;AAClB;AAkC5B;;;;;;;;;;;;;AAAqF;;;;;;;;;;;;;;;;;;cAAhEM,gCAAAA,SAAyCF,uBAAAA;;;uBAGrCG,QAAQP,cAAcC;2BAClBE,mBAAmBI,QAAQN,cAAcI;;;;;;;0BAO1CH,cAAcG,uBAAuBJ"}