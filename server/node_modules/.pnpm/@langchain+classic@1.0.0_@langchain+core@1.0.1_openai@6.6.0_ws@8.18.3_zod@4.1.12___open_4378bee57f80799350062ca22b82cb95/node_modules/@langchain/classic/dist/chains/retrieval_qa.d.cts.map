{"version":3,"file":"retrieval_qa.d.cts","names":["BaseLanguageModelInterface","BaseRetrieverInterface","ChainValues","CallbackManagerForChainRun","BaseChain","ChainInputs","SerializedVectorDBQAChain","StuffQAChainParams","LoadValues","Record","RetrievalQAChainInput","Omit","RetrievalQAChain","Promise","Partial"],"sources":["../../src/chains/retrieval_qa.d.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport type { BaseRetrieverInterface } from \"@langchain/core/retrievers\";\nimport { ChainValues } from \"@langchain/core/utils/types\";\nimport { CallbackManagerForChainRun } from \"@langchain/core/callbacks/manager\";\nimport { BaseChain, ChainInputs } from \"./base.js\";\nimport { SerializedVectorDBQAChain } from \"./serde.js\";\nimport { StuffQAChainParams } from \"./question_answering/load.js\";\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type LoadValues = Record<string, any>;\n/**\n * Interface for the input parameters of the RetrievalQAChain class.\n */\nexport interface RetrievalQAChainInput extends Omit<ChainInputs, \"memory\"> {\n    retriever: BaseRetrieverInterface;\n    combineDocumentsChain: BaseChain;\n    inputKey?: string;\n    returnSourceDocuments?: boolean;\n}\n/**\n * Class representing a chain for performing question-answering tasks with\n * a retrieval component.\n * @example\n * ```typescript\n * import { createStuffDocumentsChain } from \"@langchain/classic/chains/combine_documents\";\n * import { ChatPromptTemplate } from \"@langchain/core/prompts\";\n * import { createRetrievalChain } from \"@langchain/classic/chains/retrieval\";\n * import { MemoryVectorStore } from \"@langchain/classic/vectorstores/memory\";\n *\n * const documents = [...your documents here];\n * const embeddings = ...your embeddings model;\n * const llm = ...your LLM model;\n *\n * const vectorstore = await MemoryVectorStore.fromDocuments(\n *   documents,\n *   embeddings\n * );\n * const prompt = ChatPromptTemplate.fromTemplate(`Answer the user's question: {input} based on the following context {context}`);\n *\n * const combineDocsChain = await createStuffDocumentsChain({\n *   llm,\n *   prompt,\n * });\n * const retriever = vectorstore.asRetriever();\n *\n * const retrievalChain = await createRetrievalChain({\n *   combineDocsChain,\n *   retriever,\n * });\n * ```\n */\nexport declare class RetrievalQAChain extends BaseChain implements RetrievalQAChainInput {\n    static lc_name(): string;\n    inputKey: string;\n    get inputKeys(): string[];\n    get outputKeys(): string[];\n    retriever: BaseRetrieverInterface;\n    combineDocumentsChain: BaseChain;\n    returnSourceDocuments: boolean;\n    constructor(fields: RetrievalQAChainInput);\n    /** @ignore */\n    _call(values: ChainValues, runManager?: CallbackManagerForChainRun): Promise<ChainValues>;\n    _chainType(): \"retrieval_qa\";\n    static deserialize(_data: SerializedVectorDBQAChain, _values: LoadValues): Promise<RetrievalQAChain>;\n    serialize(): SerializedVectorDBQAChain;\n    /**\n     * Creates a new instance of RetrievalQAChain using a BaseLanguageModel\n     * and a BaseRetriever.\n     * @param llm The BaseLanguageModel used to generate a new question.\n     * @param retriever The BaseRetriever used to retrieve relevant documents.\n     * @param options Optional parameters for the RetrievalQAChain.\n     * @returns A new instance of RetrievalQAChain.\n     */\n    static fromLLM(llm: BaseLanguageModelInterface, retriever: BaseRetrieverInterface, options?: Partial<Omit<RetrievalQAChainInput, \"retriever\" | \"combineDocumentsChain\" | \"index\">> & StuffQAChainParams): RetrievalQAChain;\n}\n"],"mappings":";;;;;;;;;;KAQYQ,UAAAA,GAAaC;AAAzB;AAIA;;AAAoDJ,UAAnCK,qBAAAA,SAA8BC,IAAKN,CAAAA,WAAAA,EAAAA,QAAAA,CAAAA,CAAAA;EAAW,SAChDJ,EAAAA,sBAAAA;EAAsB,qBACVG,EAAAA,SAAAA;EAAS,QAFWO,CAAAA,EAAAA,MAAAA;EAAI,qBAAA,CAAA,EAAA,OAAA;AAsCnD;;;;;;;;;;;;;;;;;;;;;;;AAAwF;;;;;;;;;;cAAnEC,gBAAAA,SAAyBR,SAAAA,YAAqBM;;;;;aAKpDT;yBACYG;;sBAEHM;;gBAENR,0BAA0BC,6BAA6BU,QAAQX;;4BAEnDI,oCAAoCE,aAAaK,QAAQD;eACtEN;;;;;;;;;sBASON,uCAAuCC,kCAAkCa,QAAQH,KAAKD,2EAA2EH,qBAAqBK"}