{"version":3,"file":"expression.d.cts","names":["BaseOutputParser","ParsedType","ASTParser","ParseFunction","importASTParser","ReturnType","Awaited","ExpressionParser","Promise","MasterHandler"],"sources":["../../src/output_parsers/expression.d.ts"],"sourcesContent":["import { BaseOutputParser } from \"@langchain/core/output_parsers\";\nimport { ParsedType } from \"./expression_type_handlers/types.js\";\nimport { ASTParser } from \"./expression_type_handlers/base.js\";\nexport type ParseFunction = Awaited<ReturnType<typeof ASTParser.importASTParser>>;\n/**\n * We need to be able to handle the following cases:\n * ExpressionStatement\n *  CallExpression\n *      Identifier | MemberExpression\n *      ExpressionLiterals: [\n *          CallExpression\n *          StringLiteral\n *          NumericLiteral\n *          ArrayLiteralExpression\n *              ExpressionLiterals\n *          ObjectLiteralExpression\n *              PropertyAssignment\n *                  Identifier\n *                  ExpressionLiterals\n *      ]\n */\nexport declare class ExpressionParser extends BaseOutputParser<ParsedType> {\n    lc_namespace: string[];\n    parser: ParseFunction;\n    /**\n     * We should separate loading the parser into its own function\n     * because loading the grammar takes some time. If there are\n     * multiple concurrent parse calls, it's faster to just wait\n     * for building the parser once and then use it for all\n     * subsequent calls. See expression.test.ts for an example.\n     */\n    ensureParser(): Promise<void>;\n    /**\n     * Parses the given text. It first ensures the parser is loaded, then\n     * tries to parse the text. If the parsing fails, it throws an error. If\n     * the parsing is successful, it returns the parsed expression.\n     * @param text The text to be parsed.\n     * @returns The parsed expression\n     */\n    parse(text: string): Promise<ParsedType>;\n    /**\n     * This method is currently empty, but it could be used to provide\n     * instructions on the format of the input text.\n     * @returns string\n     */\n    getFormatInstructions(): string;\n}\nexport * from \"./expression_type_handlers/types.js\";\nexport { MasterHandler } from \"./expression_type_handlers/factory.js\";\n"],"mappings":";;;;;;KAGYG,aAAAA,GAAgBG,QAAQD,kBAAkBH,SAAAA,CAAUE;;;AAAhE;;;;;AAAmC;AAkBnC;;;;;;;;AAA8D;cAAzCG,gBAAAA,SAAyBP,iBAAiBC;;UAEnDE;;;;;;;;kBAQQK;;;;;;;;uBAQKA,QAAQP"}