{"version":3,"file":"chat_memory.d.cts","names":["BaseChatMessageHistory","BaseMemory","InputValues","OutputValues","BaseChatMemoryInput","BaseChatMemory","Promise"],"sources":["../../src/memory/chat_memory.d.ts"],"sourcesContent":["import { BaseChatMessageHistory } from \"@langchain/core/chat_history\";\nimport { BaseMemory, InputValues, OutputValues } from \"@langchain/core/memory\";\n/**\n * Interface for the input parameters of the BaseChatMemory class.\n */\nexport interface BaseChatMemoryInput {\n    chatHistory?: BaseChatMessageHistory;\n    returnMessages?: boolean;\n    inputKey?: string;\n    outputKey?: string;\n}\n/**\n * Abstract class that provides a base for implementing different types of\n * memory systems. It is designed to maintain the state of an application,\n * specifically the history of a conversation. This class is typically\n * extended by other classes to create specific types of memory systems.\n */\nexport declare abstract class BaseChatMemory extends BaseMemory {\n    chatHistory: BaseChatMessageHistory;\n    returnMessages: boolean;\n    inputKey?: string;\n    outputKey?: string;\n    constructor(fields?: BaseChatMemoryInput);\n    /**\n     * Method to add user and AI messages to the chat history in sequence.\n     * @param inputValues The input values from the user.\n     * @param outputValues The output values from the AI.\n     * @returns Promise that resolves when the context has been saved.\n     */\n    saveContext(inputValues: InputValues, outputValues: OutputValues): Promise<void>;\n    /**\n     * Method to clear the chat history.\n     * @returns Promise that resolves when the chat history has been cleared.\n     */\n    clear(): Promise<void>;\n}\n"],"mappings":";;;;;;;AAKA;AAY8BK,UAZbD,mBAAAA,CAY2B;EAAA,WAAA,CAAA,EAX1BJ,sBAW0B;EAAA,cAC3BA,CAAAA,EAAAA,OAAAA;EAAsB,QAIdI,CAAAA,EAAAA,MAAAA;EAAmB,SAOfF,CAAAA,EAAAA,MAAAA;;;;;AAZkC;;;uBAAjCG,cAAAA,SAAuBJ,UAAAA;eACpCD;;;;uBAIQI;;;;;;;2BAOIF,2BAA2BC,eAAeG;;;;;WAK1DA"}