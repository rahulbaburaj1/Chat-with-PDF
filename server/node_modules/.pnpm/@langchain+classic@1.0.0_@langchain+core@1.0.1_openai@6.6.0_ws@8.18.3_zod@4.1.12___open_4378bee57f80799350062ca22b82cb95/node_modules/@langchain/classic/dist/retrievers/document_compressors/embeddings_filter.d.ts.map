{"version":3,"file":"embeddings_filter.d.ts","names":["EmbeddingsInterface","DocumentInterface","cosineSimilarity","BaseDocumentCompressor","EmbeddingsFilterParams","EmbeddingsFilter","Promise"],"sources":["../../../src/retrievers/document_compressors/embeddings_filter.d.ts"],"sourcesContent":["import type { EmbeddingsInterface } from \"@langchain/core/embeddings\";\nimport type { DocumentInterface } from \"@langchain/core/documents\";\nimport { cosineSimilarity } from \"@langchain/core/utils/math\";\nimport { BaseDocumentCompressor } from \"./index.js\";\n/**\n * Interface for the parameters of the `EmbeddingsFilter` class.\n */\nexport interface EmbeddingsFilterParams {\n    embeddings: EmbeddingsInterface;\n    similarityFn?: (x: number[][], y: number[][]) => number[][];\n    similarityThreshold?: number;\n    k?: number;\n}\n/**\n * Class that represents a document compressor that uses embeddings to\n * drop documents unrelated to the query.\n * @example\n * ```typescript\n * const embeddingsFilter = new EmbeddingsFilter({\n *   embeddings: new OpenAIEmbeddings(),\n *   similarityThreshold: 0.8,\n *   k: 5,\n * });\n * const retrievedDocs = await embeddingsFilter.filterDocuments(\n *   getDocuments(),\n *   \"What did the speaker say about Justice Breyer in the 2022 State of the Union?\",\n * );\n * console.log({ retrievedDocs });\n * ```\n */\nexport declare class EmbeddingsFilter extends BaseDocumentCompressor {\n    /**\n     * Embeddings to use for embedding document contents and queries.\n     */\n    embeddings: EmbeddingsInterface;\n    /**\n     * Similarity function for comparing documents.\n     */\n    similarityFn: typeof cosineSimilarity;\n    /**\n     * Threshold for determining when two documents are similar enough\n     * to be considered redundant. Must be specified if `k` is not set.\n     */\n    similarityThreshold?: number;\n    /**\n     * The number of relevant documents to return. Can be explicitly set to undefined, in which case\n     * similarity_threshold` must be specified. Defaults to 20\n     */\n    k?: number | undefined;\n    constructor(params: EmbeddingsFilterParams);\n    compressDocuments(documents: DocumentInterface[], query: string): Promise<DocumentInterface[]>;\n}\n"],"mappings":";;;;;;;;;AAOA;AAuBqBK,UAvBJD,sBAAAA,CAuBoB;EAAA,UAAA,EAtBrBJ,mBAsBqB;EAAA,YAIrBA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,MAAAA,EAAAA,EAAAA,EAAAA,GAAAA,MAAAA,EAAAA,EAAAA;EAAmB,mBAIVE,CAAAA,EAAAA,MAAAA;EAAgB,CAAA,CAAA,EAWjBE,MAAAA;;;;;AAnB4C;;;;;;;;;;;;;;cAA/CC,gBAAAA,SAAyBF,sBAAAA;;;;cAI9BH;;;;uBAISE;;;;;;;;;;;sBAWDE;+BACSH,qCAAqCK,QAAQL"}