{"version":3,"file":"webbrowser.d.cts","names":["BaseLanguageModelInterface","EmbeddingsInterface","CallbackManager","CallbackManagerForToolRun","Tool","ToolParams","TextSplitter","parseInputs","getText","Headers","Record","RequestConfig","RequestInit","Omit","WebBrowserArgs","WebBrowser","model","headers","embeddings","requestConfig","textSplitter","Promise"],"sources":["../../src/tools/webbrowser.d.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport type { EmbeddingsInterface } from \"@langchain/core/embeddings\";\nimport { CallbackManager, CallbackManagerForToolRun } from \"@langchain/core/callbacks/manager\";\nimport { Tool, ToolParams } from \"@langchain/core/tools\";\nimport { TextSplitter } from \"@langchain/textsplitters\";\nexport declare const parseInputs: (inputs: string) => [string, string];\nexport declare const getText: (html: string, baseUrl: string, summary: boolean) => string;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Headers = Record<string, any>;\n/**\n * Configuration options for fetch requests, similar to axios config but for fetch\n */\nexport interface RequestConfig extends Omit<RequestInit, \"headers\"> {\n    withCredentials?: boolean;\n}\n/**\n * Defines the arguments that can be passed to the WebBrowser constructor.\n * It extends the ToolParams interface and includes properties for a\n * language model, embeddings, HTTP headers, an Axios configuration, a\n * callback manager, and a text splitter.\n */\nexport interface WebBrowserArgs extends ToolParams {\n    model: BaseLanguageModelInterface;\n    embeddings: EmbeddingsInterface;\n    headers?: Headers;\n    requestConfig?: RequestConfig;\n    /** @deprecated */\n    callbackManager?: CallbackManager;\n    textSplitter?: TextSplitter;\n}\n/**\n * A class designed to interact with web pages, either to extract\n * information from them or to summarize their content. It uses the native\n * fetch API to send HTTP requests and the cheerio library to parse the\n * returned HTML.\n * @example\n * ```typescript\n * const browser = new WebBrowser({\n *   model: new ChatOpenAI({ model: \"gpt-4o-mini\", temperature: 0 }),\n *   embeddings: new OpenAIEmbeddings({}),\n * });\n * const result = await browser.invoke(\"https:exampleurl.com\");\n * ```\n */\nexport declare class WebBrowser extends Tool {\n    static lc_name(): string;\n    get lc_namespace(): string[];\n    private model;\n    private embeddings;\n    private headers;\n    private requestConfig;\n    private textSplitter;\n    constructor({ model, headers, embeddings, requestConfig, textSplitter }: WebBrowserArgs);\n    /** @ignore */\n    _call(inputs: string, runManager?: CallbackManagerForToolRun): Promise<string>;\n    name: string;\n    description: string;\n}\nexport {};\n"],"mappings":";;;;;;;cAKqBO;cACAC;AADrB;AACA,KAEKC,OAAAA,GAAUC,MAF0E,CAAA,MAAA,EAAA,GAAA,CAAA;AAAC;AAM1F;;AAA4CE,UAA3BD,aAAAA,SAAsBE,IAAKD,CAAAA,WAAAA,EAAAA,SAAAA,CAAAA,CAAAA;EAAW,eAAhBC,CAAAA,EAAAA,OAAAA;AAAI;AAS3C;;;;;;AAMsBX,UANLY,cAAAA,SAAuBT,UAMlBH,CAAAA;EAAe,KAClBI,EANRN,0BAMQM;EAAY,UAPSD,EAExBJ,mBAFwBI;EAAU,OAAA,CAAA,EAGpCI,OAHoC;EAuB7BM,aAAU,CAAA,EAnBXJ,aAmBW;EAAA;EAAA,eAQbK,CAAAA,EAzBId,eAyBJc;EAAK,YAAEC,CAAAA,EAxBNX,YAwBMW;;;;;;;;AARmB;;;;;;;;cAAvBF,UAAAA,SAAmBX,IAAAA;;;;;;;;;;;;;;KAQqCU;;qCAEtCX,4BAA4BkB"}