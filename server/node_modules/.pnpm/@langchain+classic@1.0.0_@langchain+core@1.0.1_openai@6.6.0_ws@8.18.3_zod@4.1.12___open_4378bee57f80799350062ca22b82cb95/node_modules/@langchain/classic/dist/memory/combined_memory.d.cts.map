{"version":3,"file":"combined_memory.d.cts","names":["InputValues","MemoryVariables","BaseMemory","OutputValues","BaseChatMemory","BaseChatMemoryInput","CombinedMemoryInput","CombinedMemory","Promise"],"sources":["../../src/memory/combined_memory.d.ts"],"sourcesContent":["import { InputValues, MemoryVariables, BaseMemory, OutputValues } from \"@langchain/core/memory\";\nimport { BaseChatMemory, BaseChatMemoryInput } from \"./chat_memory.js\";\n/**\n * Interface that defines the shape of the input object that the\n * CombinedMemory constructor accepts. It extends the BaseChatMemoryInput\n * interface and adds additional properties.\n */\nexport interface CombinedMemoryInput extends BaseChatMemoryInput {\n    memories: BaseMemory[];\n    humanPrefix?: string;\n    aiPrefix?: string;\n    memoryKey?: string;\n}\n/**\n * Class that manages and manipulates previous chat messages. It extends\n * from the BaseChatMemory class and implements the CombinedMemoryInput\n * interface.\n */\nexport declare class CombinedMemory extends BaseChatMemory implements CombinedMemoryInput {\n    humanPrefix: string;\n    aiPrefix: string;\n    memoryKey: string;\n    memories: BaseMemory[];\n    constructor(fields?: CombinedMemoryInput);\n    /**\n     * Checks for repeated memory variables across all memory objects. Throws\n     * an error if any are found.\n     */\n    checkRepeatedMemoryVariable(): void;\n    /**\n     * Checks if input keys are set for all memory objects. Logs a warning if\n     * any are missing.\n     */\n    checkInputKey(): void;\n    /**\n     * Loads memory variables from all memory objects.\n     * @param inputValues Input values to load memory variables from.\n     * @returns Promise that resolves with an object containing the loaded memory variables.\n     */\n    loadMemoryVariables(inputValues: InputValues): Promise<MemoryVariables>;\n    /**\n     * Saves the context to all memory objects.\n     * @param inputValues Input values to save.\n     * @param outputValues Output values to save.\n     * @returns Promise that resolves when the context has been saved to all memory objects.\n     */\n    saveContext(inputValues: InputValues, outputValues: OutputValues): Promise<void>;\n    /**\n     * Clears all memory objects.\n     * @returns Promise that resolves when all memory objects have been cleared.\n     */\n    clear(): Promise<void>;\n    get memoryKeys(): string[];\n}\n"],"mappings":";;;;;;;AAOA;;;AAA6CK,UAA5BC,mBAAAA,SAA4BD,mBAAAA,CAAAA;EAAmB,QAAA,EAClDH,UADkD,EAAA;EAW3CK,WAAAA,CAAAA,EAAAA,MAAc;EAAA,QAAA,CAAA,EAAA,MAAA;EAAA,SAIrBL,CAAAA,EAAAA,MAAAA;;;;;;;AAwByDM,cA5BlDD,cAAAA,SAAuBH,cAAAA,YAA0BE,mBA4BCE,CAAAA;EAAO,WAKjEA,EAAAA,MAAAA;EAAO,QAjCwBJ,EAAAA,MAAAA;EAAc,SAAYE,EAAAA,MAAAA;EAAmB,QAAA,EAI3EJ,UAJ2E,EAAA;uBAKhEI;;;;;;;;;;;;;;;;mCAgBYN,cAAcQ,QAAQP;;;;;;;2BAO9BD,2BAA2BG,eAAeK;;;;;WAK1DA"}