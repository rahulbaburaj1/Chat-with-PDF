{"version":3,"file":"index.d.cts","names":["BaseLanguageModelInterface","ToolInterface","BasePromptTemplate","AgentStep","AgentAction","AgentFinish","ChainValues","ChatPromptTemplate","CallbackManager","LLMChain","AgentArgs","AgentRunnableSequence","BaseSingleActionAgent","XMLAgentOutputParser","XMLAgentInput","XMLAgent","Promise","Pick","CreateXmlAgentParams","createXmlAgent","llm","tools","prompt","streamRunnable"],"sources":["../../../src/agents/xml/index.d.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport type { ToolInterface } from \"@langchain/core/tools\";\nimport type { BasePromptTemplate } from \"@langchain/core/prompts\";\nimport { AgentStep, AgentAction, AgentFinish } from \"@langchain/core/agents\";\nimport { ChainValues } from \"@langchain/core/utils/types\";\nimport { ChatPromptTemplate } from \"@langchain/core/prompts\";\nimport { CallbackManager } from \"@langchain/core/callbacks/manager\";\nimport { LLMChain } from \"../../chains/llm_chain.js\";\nimport { AgentArgs, AgentRunnableSequence, BaseSingleActionAgent } from \"../agent.js\";\nimport { XMLAgentOutputParser } from \"./output_parser.js\";\n/**\n * Interface for the input to the XMLAgent class.\n */\nexport interface XMLAgentInput {\n    tools: ToolInterface[];\n    llmChain: LLMChain;\n}\n/**\n * Class that represents an agent that uses XML tags.\n */\nexport declare class XMLAgent extends BaseSingleActionAgent implements XMLAgentInput {\n    static lc_name(): string;\n    lc_namespace: string[];\n    tools: ToolInterface[];\n    llmChain: LLMChain;\n    outputParser: XMLAgentOutputParser;\n    _agentType(): \"xml\";\n    constructor(fields: XMLAgentInput);\n    get inputKeys(): string[];\n    static createPrompt(): ChatPromptTemplate<any, any>;\n    /**\n     * Plans the next action or finish state of the agent based on the\n     * provided steps, inputs, and optional callback manager.\n     * @param steps The steps to consider in planning.\n     * @param inputs The inputs to consider in planning.\n     * @param callbackManager Optional CallbackManager to use in planning.\n     * @returns A Promise that resolves to an AgentAction or AgentFinish object representing the planned action or finish state.\n     */\n    plan(steps: AgentStep[], inputs: ChainValues, callbackManager?: CallbackManager): Promise<AgentAction | AgentFinish>;\n    /**\n     * Creates an XMLAgent from a BaseLanguageModel and a list of tools.\n     * @param llm The BaseLanguageModel to use.\n     * @param tools The tools to be used by the agent.\n     * @param args Optional arguments for creating the agent.\n     * @returns An instance of XMLAgent.\n     */\n    static fromLLMAndTools(llm: BaseLanguageModelInterface, tools: ToolInterface[], args?: XMLAgentInput & Pick<AgentArgs, \"callbacks\">): XMLAgent;\n}\n/**\n * Params used by the createXmlAgent function.\n */\nexport type CreateXmlAgentParams = {\n    /** LLM to use for the agent. */\n    llm: BaseLanguageModelInterface;\n    /** Tools this agent has access to. */\n    tools: ToolInterface[];\n    /**\n     * The prompt to use. Must have input keys for\n     * `tools` and `agent_scratchpad`.\n     */\n    prompt: BasePromptTemplate;\n    /**\n     * Whether to invoke the underlying model in streaming mode,\n     * allowing streaming of intermediate steps. Defaults to true.\n     */\n    streamRunnable?: boolean;\n};\n/**\n * Create an agent that uses XML to format its logic.\n * @param params Params required to create the agent. Includes an LLM, tools, and prompt.\n * @returns A runnable sequence representing an agent. It takes as input all the same input\n *     variables as the prompt passed in does. It returns as output either an\n *     AgentAction or AgentFinish.\n *\n * @example\n * ```typescript\n * import { AgentExecutor, createXmlAgent } from \"langchain/agents\";\n * import { pull } from \"langchain/hub\";\n * import type { PromptTemplate } from \"@langchain/core/prompts\";\n *\n * import { ChatAnthropic } from \"@langchain/anthropic\";\n *\n * // Define the tools the agent will have access to.\n * const tools = [...];\n *\n * // Get the prompt to use - you can modify this!\n * // If you want to see the prompt in full, you can at:\n * // https://smith.langchain.com/hub/hwchase17/xml-agent-convo\n * const prompt = await pull<PromptTemplate>(\"hwchase17/xml-agent-convo\");\n *\n * const llm = new ChatAnthropic({\n *   temperature: 0,\n * });\n *\n * const agent = await createXmlAgent({\n *   llm,\n *   tools,\n *   prompt,\n * });\n *\n * const agentExecutor = new AgentExecutor({\n *   agent,\n *   tools,\n * });\n *\n * const result = await agentExecutor.invoke({\n *   input: \"what is LangChain?\",\n * });\n *\n * // With chat history\n * const result2 = await agentExecutor.invoke({\n *   input: \"what's my name?\",\n *   // Notice that chat_history is a string, since this prompt is aimed at LLMs, not chat models\n *   chat_history: \"Human: Hi! My name is Cob\\nAI: Hello Cob! Nice to meet you\",\n * });\n * ```\n */\nexport declare function createXmlAgent({ llm, tools, prompt, streamRunnable }: CreateXmlAgentParams): Promise<AgentRunnableSequence<{\n    steps: AgentStep[];\n}, AgentAction | AgentFinish>>;\n"],"mappings":";;;;;;;;;;;;;AAaA;;AACWC,UADMa,aAAAA,CACNb;EAAa,KACVQ,EADHR,aACGQ,EAAAA;EAAQ,QAAA,EAARA,QAAQ;AAKtB;;;;AAKkBI,cALGE,QAAAA,SAAiBH,qBAAAA,YAAiCE,aAKrDD,CAAAA;EAAoB,OAEdC,OAAAA,CAAAA,CAAAA,EAAAA,MAAAA;EAAa,YAEVP,EAAAA,MAAAA,EAAAA;EAAkB,KAS7BJ,EAfLF,aAeKE,EAAAA;EAAS,QAAYG,EAdvBG,QAcuBH;EAAW,YAAoBE,EAblDK,oBAakDL;EAAe,UAAWJ,CAAAA,CAAAA,EAAAA,KAAAA;EAAW,WAAGC,CAAAA,MAAAA,EAXpFS,aAWoFT;EAAW,IAAjCW,SAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA;EAAO,OAQ7DhB,YAAAA,CAAAA,CAAAA,EAjBLO,kBAiBKP,CAAAA,GAAAA,EAAAA,GAAAA,CAAAA;EAA0B;;;;;;;AA1B0B;EA+BxEkB,IAAAA,CAAAA,KAAAA,EAbIf,SAaJe,EAAoB,EAAA,MAAA,EAbKZ,WAaL,EAAA,eAAA,CAAA,EAboCE,eAapC,CAAA,EAbsDQ,OAatD,CAb8DZ,WAa9D,GAb4EC,WAa5E,CAAA;EAAA;;;;AASF;AAyD9B;;EAAsC,OAAGe,eAAAA,CAAAA,GAAAA,EAvETpB,0BAuESoB,EAAAA,KAAAA,EAvE0BnB,aAuE1BmB,EAAAA,EAAAA,IAAAA,CAAAA,EAvEkDN,aAuElDM,GAvEkEH,IAuElEG,CAvEuEV,SAuEvEU,EAAAA,WAAAA,CAAAA,CAAAA,EAvEiGL,QAuEjGK;;;;;AAC9BjB,KAnECe,oBAAAA,GAmEDf;EAAS;EACN,GAAGE,EAlERL,0BAkEQK;EAAW;EAFuG,KAA7BW,EA9D3Ff,aA8D2Fe,EAAAA;EAAO;;;;UAzDjGd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iBAyDYiB,cAAAA;;;;;GAAuDD,uBAAuBF,QAAQL;SACnGR;GACRC,cAAcC"}