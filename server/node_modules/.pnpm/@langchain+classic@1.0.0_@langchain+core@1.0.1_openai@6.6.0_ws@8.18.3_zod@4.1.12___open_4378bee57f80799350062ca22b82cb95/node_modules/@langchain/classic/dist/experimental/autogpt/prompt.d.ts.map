{"version":3,"file":"prompt.d.ts","names":["VectorStoreRetrieverInterface","BaseChatPromptTemplate","SerializedBasePromptTemplate","BaseMessage","PartialValues","ObjectTool","AutoGPTPromptInput","Promise","AutoGPTPrompt","goals","memory","previousMessages","user_input","_langchain_core_messages0","MessageStructure","MessageType"],"sources":["../../../src/experimental/autogpt/prompt.d.ts"],"sourcesContent":["import type { VectorStoreRetrieverInterface } from \"@langchain/core/vectorstores\";\nimport { BaseChatPromptTemplate, SerializedBasePromptTemplate } from \"@langchain/core/prompts\";\nimport { BaseMessage } from \"@langchain/core/messages\";\nimport { PartialValues } from \"@langchain/core/utils/types\";\nimport { ObjectTool } from \"./schema.js\";\n/**\n * Interface for the input parameters of the AutoGPTPrompt class.\n */\nexport interface AutoGPTPromptInput {\n    aiName: string;\n    aiRole: string;\n    tools: ObjectTool[];\n    tokenCounter: (text: string) => Promise<number>;\n    sendTokenLimit?: number;\n}\n/**\n * Class used to generate prompts for the AutoGPT model. It takes into\n * account the AI's name, role, tools, token counter, and send token\n * limit. The class also handles the formatting of messages and the\n * construction of the full prompt.\n */\nexport declare class AutoGPTPrompt extends BaseChatPromptTemplate implements AutoGPTPromptInput {\n    aiName: string;\n    aiRole: string;\n    tools: ObjectTool[];\n    tokenCounter: (text: string) => Promise<number>;\n    sendTokenLimit: number;\n    constructor(fields: AutoGPTPromptInput);\n    _getPromptType(): \"autogpt\";\n    /**\n     * Constructs the full prompt based on the provided goals.\n     * @param goals An array of goals.\n     * @returns The full prompt as a string.\n     */\n    constructFullPrompt(goals: string[]): string;\n    /**\n     * Formats the messages based on the provided parameters.\n     * @param goals An array of goals.\n     * @param memory A VectorStoreRetriever instance.\n     * @param messages An array of previous messages.\n     * @param user_input The user's input.\n     * @returns An array of formatted messages.\n     */\n    formatMessages({ goals, memory, messages: previousMessages, user_input }: {\n        goals: string[];\n        memory: VectorStoreRetrieverInterface;\n        messages: BaseMessage[];\n        user_input: string;\n    }): Promise<BaseMessage<import(\"@langchain/core/messages\").MessageStructure, import(\"@langchain/core/messages\").MessageType>[]>;\n    /**\n     * This method is not implemented in the AutoGPTPrompt class and will\n     * throw an error if called.\n     * @param _values Partial values.\n     * @returns Throws an error.\n     */\n    partial(_values: PartialValues): Promise<BaseChatPromptTemplate>;\n    serialize(): SerializedBasePromptTemplate;\n}\n"],"mappings":";;;;;;;;;;;AAQiBM,UAAAA,kBAAAA,CAAkB;EAAA,MAAA,EAAA,MAAA;EAAA,MAGxBD,EAAAA,MAAAA;EAAU,KACeE,EADzBF,UACyBE,EAAAA;EAAO,YAAA,EAAA,CAAA,IAAA,EAAA,MAAA,EAAA,GAAPA,OAAO,CAAA,MAAA,CAAA;EAStBC,cAAAA,CAAAA,EAAa,MAAA;;;;;;;;AAsB8BI,cAtB3CJ,aAAAA,SAAsBP,sBAAAA,YAAkCK,kBAsBbM,CAAAA;EAAU,MAE1DZ,EAAAA,MAAAA;EAA6B,MAC3BG,EAAAA,MAAAA;EAAW,KAAAU,EAtBlBR,UAsBkBQ,EAAAA;EAEkD,YAAAA,EAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAAqCE,GAvBhFR,OAuBgFQ,CAAAA,MAAAA,CAAAA;EAAW,cAA/GZ,EAAAA,MAAAA;EAAW,WAAnBI,CAAAA,MAAAA,EArBgBD,kBAqBhBC;EAAO,cAOMH,CAAAA,CAAAA,EAAAA,SAAAA;EAAa;;;;;EAlC6D,mBAAA,CAAA,KAAA,EAAA,MAAA,EAAA,CAAA,EAAA,MAAA;;;;;;;;;;;;cAsBjDO;;;;YAE9BX;cACEG;;MAEVI,QAAQJ,YAFaU,yBAAAA,CAEkCC,gBAAAA,EAAgBD,yBAAAA,CAAqCE,WAAAA;;;;;;;mBAO/FX,gBAAgBG,QAAQN;eAC5BC"}