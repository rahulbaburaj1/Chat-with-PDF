{"version":3,"file":"retrieval.d.cts","names":["BaseRetrieverInterface","Runnable","RunnableInterface","BaseMessage","DocumentInterface","Document","CreateRetrievalChainParams","Record","RunOutput","createRetrievalChain","retriever","combineDocsChain","Promise"],"sources":["../../src/chains/retrieval.d.ts"],"sourcesContent":["import type { BaseRetrieverInterface } from \"@langchain/core/retrievers\";\nimport { type Runnable, type RunnableInterface } from \"@langchain/core/runnables\";\nimport type { BaseMessage } from \"@langchain/core/messages\";\nimport type { DocumentInterface, Document } from \"@langchain/core/documents\";\n/**\n * Parameters for the createRetrievalChain method.\n */\nexport type CreateRetrievalChainParams<RunOutput> = {\n    /**\n     * Retriever-like object that returns list of documents. Should\n     * either be a subclass of BaseRetriever or a Runnable that returns\n     * a list of documents. If a subclass of BaseRetriever, then it\n     * is expected that an `input` key be passed in - this is what\n     * is will be used to pass into the retriever. If this is NOT a\n     * subclass of BaseRetriever, then all the inputs will be passed\n     * into this runnable, meaning that runnable should take a object\n     * as input.\n     */\n    retriever: BaseRetrieverInterface\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n     | RunnableInterface<Record<string, any>, DocumentInterface[]>;\n    /**\n     * Runnable that takes inputs and produces a string output.\n     * The inputs to this will be any original inputs to this chain, a new\n     * context key with the retrieved documents, and chat_history (if not present\n     * in the inputs) with a value of `[]` (to easily enable conversational\n     * retrieval).\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    combineDocsChain: RunnableInterface<Record<string, any>, RunOutput>;\n};\n/**\n * Create a retrieval chain that retrieves documents and then passes them on.\n * @param {CreateRetrievalChainParams} params A params object\n *     containing a retriever and a combineDocsChain.\n * @returns An LCEL Runnable which returns a an object\n *     containing at least `context` and `answer` keys.\n * @example\n * ```typescript\n * // pnpm add langchain @langchain/openai\n *\n * import { ChatOpenAI } from \"@langchain/openai\";\n * import { pull } from \"langchain/hub\";\n * import { createRetrievalChain } from \"@langchain/classic/chains/retrieval\";\n * import { createStuffDocumentsChain } from \"@langchain/classic/chains/combine_documents\";\n *\n * const retrievalQAChatPrompt = await pull(\"langchain-ai/retrieval-qa-chat\");\n * const llm = new ChatOpenAI({ model: \"gpt-4o-mini\" });\n * const retriever = ...\n * const combineDocsChain = await createStuffDocumentsChain(...);\n * const retrievalChain = await createRetrievalChain({\n *   retriever,\n *   combineDocsChain,\n * });\n * const response = await chain.invoke({ input: \"...\" });\n * ```\n */\nexport declare function createRetrievalChain<RunOutput>({ retriever, combineDocsChain }: CreateRetrievalChainParams<RunOutput>): Promise<Runnable<{\n    input: string;\n    chat_history?: BaseMessage[] | string;\n} & {\n    [key: string]: unknown;\n}, {\n    context: Document[];\n    answer: RunOutput;\n} & {\n    [key: string]: unknown;\n}>>;\n"],"mappings":";;;;;;;;;AAOA;AAAsC,KAA1BM,0BAA0B,CAAA,SAAA,CAAA,GAAA;EAAA;;;;;;;AAsBC;AA4BvC;;EAA4C,SAAcI,EAvC3CV;EAuCoD;EAAA,EArC5DE,iBAqC6GM,CArC3FD,MAqC2FC,CAAAA,MAAAA,EAAAA,GAAAA,CAAAA,EArCtEJ,iBAqCsEI,EAAAA,CAAAA;EAAS;;;;;;AAAW;;oBA5BlHN,kBAAkBK,qBAAqBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;iBA4BrCC;;;GAAiEH,2BAA2BE,aAAaI,QAAQX;;iBAEtHE;;;;WAINE;UACDG"}