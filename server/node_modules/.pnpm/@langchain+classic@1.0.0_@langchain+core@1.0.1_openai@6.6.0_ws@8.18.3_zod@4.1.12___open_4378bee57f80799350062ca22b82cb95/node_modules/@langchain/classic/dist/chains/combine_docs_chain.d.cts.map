{"version":3,"file":"combine_docs_chain.d.cts","names":["Document","ChainValues","CallbackManagerForChainRun","BasePromptTemplate","SerializedStuffDocumentsChain","SerializedMapReduceDocumentsChain","SerializedRefineDocumentsChain","BaseChain","ChainInputs","LLMChain","StuffDocumentsChainInput","StuffDocumentsChain","Promise","MapReduceDocumentsChainInput","MapReduceDocumentsChain","RefineDocumentsChainInput","RefineDocumentsChain","_________langchain_core_dist_prompt_values_js0","BasePromptValueInterface","Record"],"sources":["../../src/chains/combine_docs_chain.d.ts"],"sourcesContent":["import { Document } from \"@langchain/core/documents\";\nimport { ChainValues } from \"@langchain/core/utils/types\";\nimport { CallbackManagerForChainRun } from \"@langchain/core/callbacks/manager\";\nimport { BasePromptTemplate } from \"@langchain/core/prompts\";\nimport type { SerializedStuffDocumentsChain, SerializedMapReduceDocumentsChain, SerializedRefineDocumentsChain } from \"./serde.js\";\nimport { BaseChain, ChainInputs } from \"./base.js\";\nimport { LLMChain } from \"./llm_chain.js\";\n/**\n * Interface for the input properties of the StuffDocumentsChain class.\n */\nexport interface StuffDocumentsChainInput extends ChainInputs {\n    /** LLM Wrapper to use after formatting documents */\n    llmChain: LLMChain;\n    inputKey?: string;\n    /** Variable name in the LLM chain to put the documents in */\n    documentVariableName?: string;\n}\n/**\n * Chain that combines documents by stuffing into context.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n */\nexport declare class StuffDocumentsChain extends BaseChain implements StuffDocumentsChainInput {\n    static lc_name(): string;\n    llmChain: LLMChain;\n    inputKey: string;\n    documentVariableName: string;\n    get inputKeys(): string[];\n    get outputKeys(): string[];\n    constructor(fields: StuffDocumentsChainInput);\n    /** @ignore */\n    _prepInputs(values: ChainValues): ChainValues;\n    /** @ignore */\n    _call(values: ChainValues, runManager?: CallbackManagerForChainRun): Promise<ChainValues>;\n    _chainType(): \"stuff_documents_chain\";\n    static deserialize(data: SerializedStuffDocumentsChain): Promise<StuffDocumentsChain>;\n    serialize(): SerializedStuffDocumentsChain;\n}\n/**\n * Interface for the input properties of the MapReduceDocumentsChain\n * class.\n */\nexport interface MapReduceDocumentsChainInput extends StuffDocumentsChainInput {\n    /** The maximum number of tokens before requiring to do the reduction */\n    maxTokens?: number;\n    /** The maximum number of iterations to run through the map */\n    maxIterations?: number;\n    /** Ensures that the map step is taken regardless of max tokens */\n    ensureMapStep?: boolean;\n    /** Chain to use to combine results of applying llm_chain to documents. */\n    combineDocumentChain: StuffDocumentsChain;\n    /** Return the results of the map steps in the output. */\n    returnIntermediateSteps?: boolean;\n}\n/**\n * Combine documents by mapping a chain over them, then combining results.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n */\nexport declare class MapReduceDocumentsChain extends BaseChain implements MapReduceDocumentsChainInput {\n    static lc_name(): string;\n    llmChain: LLMChain;\n    inputKey: string;\n    documentVariableName: string;\n    returnIntermediateSteps: boolean;\n    get inputKeys(): string[];\n    get outputKeys(): string[];\n    maxTokens: number;\n    maxIterations: number;\n    ensureMapStep: boolean;\n    combineDocumentChain: StuffDocumentsChain;\n    constructor(fields: MapReduceDocumentsChainInput);\n    /** @ignore */\n    _call(values: ChainValues, runManager?: CallbackManagerForChainRun): Promise<ChainValues>;\n    _chainType(): \"map_reduce_documents_chain\";\n    static deserialize(data: SerializedMapReduceDocumentsChain): Promise<MapReduceDocumentsChain>;\n    serialize(): SerializedMapReduceDocumentsChain;\n}\n/**\n * Interface for the input properties of the RefineDocumentsChain class.\n */\nexport interface RefineDocumentsChainInput extends StuffDocumentsChainInput {\n    refineLLMChain: LLMChain;\n    documentPrompt?: BasePromptTemplate;\n    initialResponseName?: string;\n    documentVariableName?: string;\n    outputKey?: string;\n}\n/**\n * Combine documents by doing a first pass and then refining on more documents.\n * @augments BaseChain\n * @augments RefineDocumentsChainInput\n */\nexport declare class RefineDocumentsChain extends BaseChain implements RefineDocumentsChainInput {\n    static lc_name(): string;\n    llmChain: LLMChain;\n    inputKey: string;\n    outputKey: string;\n    documentVariableName: string;\n    initialResponseName: string;\n    refineLLMChain: LLMChain;\n    get defaultDocumentPrompt(): BasePromptTemplate;\n    documentPrompt: BasePromptTemplate<any, import(\"../../../langchain-core/dist/prompt_values.js\").BasePromptValueInterface, any>;\n    get inputKeys(): string[];\n    get outputKeys(): string[];\n    constructor(fields: RefineDocumentsChainInput);\n    /** @ignore */\n    _constructInitialInputs(doc: Document, rest: Record<string, unknown>): Promise<{\n        [x: string]: unknown;\n    }>;\n    /** @ignore */\n    _constructRefineInputs(doc: Document, res: string): Promise<{\n        [x: string]: unknown;\n    }>;\n    /** @ignore */\n    _call(values: ChainValues, runManager?: CallbackManagerForChainRun): Promise<ChainValues>;\n    _chainType(): \"refine_documents_chain\";\n    static deserialize(data: SerializedRefineDocumentsChain): Promise<RefineDocumentsChain>;\n    serialize(): SerializedRefineDocumentsChain;\n}\n"],"mappings":"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"}