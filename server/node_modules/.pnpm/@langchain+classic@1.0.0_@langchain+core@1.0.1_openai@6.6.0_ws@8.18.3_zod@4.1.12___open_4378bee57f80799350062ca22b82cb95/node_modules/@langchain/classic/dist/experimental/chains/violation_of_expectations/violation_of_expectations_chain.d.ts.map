{"version":3,"file":"violation_of_expectations_chain.d.ts","names":["BaseRetrieverInterface","ChatOpenAI","BaseMessage","ChainValues","StringOutputParser","CallbackManagerForChainRun","JsonOutputFunctionsParser","BaseChain","ChainInputs","MessageChunkResult","ViolationOfExpectationsChainInput","ViolationOfExpectationsChain","Array","Promise","Omit","Partial"],"sources":["../../../../src/experimental/chains/violation_of_expectations/violation_of_expectations_chain.d.ts"],"sourcesContent":["import type { BaseRetrieverInterface } from \"@langchain/core/retrievers\";\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { BaseMessage } from \"@langchain/core/messages\";\nimport { ChainValues } from \"@langchain/core/utils/types\";\nimport { StringOutputParser } from \"@langchain/core/output_parsers\";\nimport { CallbackManagerForChainRun } from \"@langchain/core/callbacks/manager\";\nimport { JsonOutputFunctionsParser } from \"../../../output_parsers/openai_functions.js\";\nimport { BaseChain, ChainInputs } from \"../../../chains/base.js\";\nimport { MessageChunkResult } from \"./types.js\";\n/**\n * Interface for the input parameters of the ViolationOfExpectationsChain class.\n */\nexport interface ViolationOfExpectationsChainInput extends ChainInputs {\n    /**\n     * The retriever to use for retrieving stored\n     * thoughts and insights.\n     */\n    retriever: BaseRetrieverInterface;\n    /**\n     * The LLM to use\n     */\n    llm: ChatOpenAI;\n}\n/**\n * Chain that generates key insights/facts of a user based on a\n * a chat conversation with an AI.\n */\nexport declare class ViolationOfExpectationsChain extends BaseChain implements ViolationOfExpectationsChainInput {\n    static lc_name(): string;\n    _chainType(): string;\n    chatHistoryKey: string;\n    thoughtsKey: string;\n    get inputKeys(): string[];\n    get outputKeys(): string[];\n    retriever: BaseRetrieverInterface;\n    llm: ChatOpenAI;\n    jsonOutputParser: JsonOutputFunctionsParser;\n    stringOutputParser: StringOutputParser;\n    constructor(fields: ViolationOfExpectationsChainInput);\n    getChatHistoryString(chatHistory: BaseMessage[]): string;\n    removeDuplicateStrings(strings: Array<string>): Array<string>;\n    /**\n     * This method breaks down the chat history into chunks of messages.\n     * Each chunk consists of a sequence of messages ending with an AI message and the subsequent user response, if any.\n     *\n     * @param {BaseMessage[]} chatHistory - The chat history to be chunked.\n     *\n     * @returns {MessageChunkResult[]} An array of message chunks. Each chunk includes a sequence of messages and the subsequent user response.\n     *\n     * @description\n     * The method iterates over the chat history and pushes each message into a temporary array.\n     * When it encounters an AI message, it checks for a subsequent user message.\n     * If a user message is found, it is considered as the user response to the AI message.\n     * If no user message is found after the AI message, the user response is undefined.\n     * The method then pushes the chunk (sequence of messages and user response) into the result array.\n     * This process continues until all messages in the chat history have been processed.\n     */\n    chunkMessagesByAIResponse(chatHistory: BaseMessage[]): MessageChunkResult[];\n    /**\n     * This method processes a chat history to generate insights about the user.\n     *\n     * @param {ChainValues} values - The input values for the chain. It should contain a key for chat history.\n     * @param {CallbackManagerForChainRun} [runManager] - Optional callback manager for the chain run.\n     *\n     * @returns {Promise<ChainValues>} A promise that resolves to a list of insights about the user.\n     *\n     * @throws {Error} If the chat history key is not found in the input values or if the chat history is not an array of BaseMessages.\n     *\n     * @description\n     * The method performs the following steps:\n     * 1. Checks if the chat history key is present in the input values and if the chat history is an array of BaseMessages.\n     * 2. Breaks the chat history into chunks of messages.\n     * 3. For each chunk, it generates an initial prediction for the user's next message.\n     * 4. For each prediction, it generates insights and prediction violations, and regenerates the prediction based on the violations.\n     * 5. For each set of messages, it generates a fact/insight about the user.\n     * The method returns a list of these insights.\n     */\n    _call(values: ChainValues, runManager?: CallbackManagerForChainRun): Promise<ChainValues>;\n    private predictNextUserMessage;\n    private retrieveRelevantInsights;\n    private getPredictionViolations;\n    private generateRevisedPrediction;\n    private generateFacts;\n    /**\n     * Static method that creates a ViolationOfExpectationsChain instance from a\n     * ChatOpenAI and retriever. It also accepts optional options\n     * to customize the chain.\n     *\n     * @param llm The ChatOpenAI instance.\n     * @param retriever The retriever used for similarity search.\n     * @param options Optional options to customize the chain.\n     *\n     * @returns A new instance of ViolationOfExpectationsChain.\n     */\n    static fromLLM(llm: ChatOpenAI, retriever: BaseRetrieverInterface, options?: Partial<Omit<ViolationOfExpectationsChainInput, \"llm\" | \"retriever\">>): ViolationOfExpectationsChain;\n}\n"],"mappings":";;;;;;;;;;;;;;AAYA;AAAkD,UAAjCU,iCAAAA,SAA0CF,WAAT,CAAA;EAAA;;;AAAoB;EAejDG,SAAAA,EAVNX,sBAUkC;EAAA;;;EAQ9B,GACGM,EAfbL,UAeaK;;;;;;AAqBqBJ,cA9BtBS,4BAAAA,SAAqCJ,SAAAA,YAAqBG,iCA8BpCR,CAAAA;EAAW,OAAKO,OAAAA,CAAAA,CAAAA,EAAAA,MAAAA;EAAkB,UAoB3DN,CAAAA,CAAAA,EAAAA,MAAAA;EAAW,cAAeE,EAAAA,MAAAA;EAA0B,WAAWF,EAAAA,MAAAA;EAAW,IAAnBU,SAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA;EAAO,IAiBxDZ,UAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA;EAAU,SAAaD,EA5DhCA,sBA4DgCA;EAAsB,GAAyBU,EA3DrFT,UA2DqFS;EAAiC,gBAAtCI,EA1DnER,yBA0DmEQ;EAAI,kBAAZC,EAzDzDX,kBAyDyDW;EAAO,WAAiEJ,CAAAA,MAAAA,EAxDjID,iCAwDiIC;EAA4B,oBAnE3HJ,CAAAA,WAAAA,EAYpBL,WAZoBK,EAAAA,CAAAA,EAAAA,MAAAA;EAAS,sBAAYG,CAAAA,OAAAA,EAa3CE,KAb2CF,CAAAA,MAAAA,CAAAA,CAAAA,EAa3BE,KAb2BF,CAAAA,MAAAA,CAAAA;EAAiC;;;;;;;;;;;;;;;;yCA8BrER,gBAAgBO;;;;;;;;;;;;;;;;;;;;gBAoBzCN,0BAA0BE,6BAA6BQ,QAAQV;;;;;;;;;;;;;;;;;sBAiBzDF,uBAAuBD,kCAAkCe,QAAQD,KAAKJ,2DAA2DC"}