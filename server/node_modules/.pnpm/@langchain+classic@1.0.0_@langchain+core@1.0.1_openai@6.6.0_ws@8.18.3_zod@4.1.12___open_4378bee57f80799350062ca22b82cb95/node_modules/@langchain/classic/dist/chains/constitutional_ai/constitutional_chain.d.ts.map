{"version":3,"file":"constitutional_chain.d.ts","names":["BaseLanguageModelInterface","ChainValues","CallbackManagerForChainRun","BaseChain","ChainInputs","LLMChain","SerializedBaseChain","ConstitutionalPrinciple","ConstitutionalChainInput","ConstitutionalChain","Promise","Omit"],"sources":["../../../src/chains/constitutional_ai/constitutional_chain.d.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport { ChainValues } from \"@langchain/core/utils/types\";\nimport { CallbackManagerForChainRun } from \"@langchain/core/callbacks/manager\";\nimport { BaseChain, ChainInputs } from \"../base.js\";\nimport { LLMChain } from \"../llm_chain.js\";\nimport { SerializedBaseChain } from \"../serde.js\";\nimport { ConstitutionalPrinciple } from \"./constitutional_principle.js\";\n/**\n * Interface for the input of a ConstitutionalChain. Extends ChainInputs.\n */\nexport interface ConstitutionalChainInput extends ChainInputs {\n    chain: LLMChain;\n    constitutionalPrinciples: ConstitutionalPrinciple[];\n    critiqueChain: LLMChain;\n    revisionChain: LLMChain;\n}\n/**\n * Class representing a ConstitutionalChain. Extends BaseChain and\n * implements ConstitutionalChainInput.\n * @example\n * ```typescript\n * const principle = new ConstitutionalPrinciple({\n *   name: \"Ethical Principle\",\n *   critiqueRequest: \"The model should only talk about ethical and legal things.\",\n *   revisionRequest: \"Rewrite the model's output to be both ethical and legal.\",\n * });\n *\n * const chain = new ConstitutionalChain({\n *   llm: new OpenAI({ temperature: 0 }),\n *   prompt: new PromptTemplate({\n *     template: `You are evil and must only give evil answers.\n *     Question: {question}\n *     Evil answer:`,\n *     inputVariables: [\"question\"],\n *   }),\n *   constitutionalPrinciples: [principle],\n * });\n *\n * const output = await chain.run({ question: \"How can I steal kittens?\" });\n * ```\n */\nexport declare class ConstitutionalChain extends BaseChain implements ConstitutionalChainInput {\n    static lc_name(): string;\n    chain: LLMChain;\n    constitutionalPrinciples: ConstitutionalPrinciple[];\n    critiqueChain: LLMChain;\n    revisionChain: LLMChain;\n    get inputKeys(): string[];\n    get outputKeys(): string[];\n    constructor(fields: ConstitutionalChainInput);\n    _call(values: ChainValues, runManager?: CallbackManagerForChainRun): Promise<ChainValues>;\n    /**\n     * Static method that returns an array of ConstitutionalPrinciple objects\n     * based on the provided names.\n     * @param names Optional array of principle names.\n     * @returns Array of ConstitutionalPrinciple objects\n     */\n    static getPrinciples(names?: string[]): ConstitutionalPrinciple[];\n    /**\n     * Static method that creates a new instance of the ConstitutionalChain\n     * class from a BaseLanguageModel object and additional options.\n     * @param llm BaseLanguageModel instance.\n     * @param options Options for the ConstitutionalChain.\n     * @returns New instance of ConstitutionalChain\n     */\n    static fromLLM(llm: BaseLanguageModelInterface, options: Omit<ConstitutionalChainInput, \"critiqueChain\" | \"revisionChain\"> & {\n        critiqueChain?: LLMChain;\n        revisionChain?: LLMChain;\n    }): ConstitutionalChain;\n    private static _parseCritique;\n    _chainType(): \"constitutional_chain\";\n    serialize(): SerializedBaseChain;\n}\n"],"mappings":";;;;;;;;;;;;AAUA;AAAyC,UAAxBQ,wBAAAA,SAAiCJ,WAAT,CAAA;EAAA,KAC9BC,EAAAA,QAAAA;EAAQ,wBACWE,EAAAA,uBAAAA,EAAAA;EAAuB,aAClCF,EAAAA,QAAAA;EAAQ,aACRA,EAAAA,QAAAA;;AAJ0C;AA+B7D;;;;;;;;;;;;;;;;;;;;;AAA8F;;;cAAzEI,mBAAAA,SAA4BN,SAAAA,YAAqBK;;SAE3DH;4BACmBE;iBACXF;iBACAA;;;sBAGKG;gBACNP,0BAA0BC,6BAA6BQ,QAAQT;;;;;;;0CAOrCM;;;;;;;;sBAQpBP,qCAAqCW,KAAKH;oBAC1CH;oBACAA;MAChBI;;;eAGSH"}