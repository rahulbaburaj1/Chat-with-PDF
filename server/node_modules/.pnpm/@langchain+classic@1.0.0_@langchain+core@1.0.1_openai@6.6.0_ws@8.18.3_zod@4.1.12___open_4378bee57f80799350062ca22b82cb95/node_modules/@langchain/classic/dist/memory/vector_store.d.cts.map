{"version":3,"file":"vector_store.d.cts","names":["VectorStoreRetrieverInterface","BaseMemory","InputValues","MemoryVariables","OutputValues","Metadata","Record","MetadataFunction","VectorStoreRetrieverMemoryParams","VectorStoreRetrieverMemory","Promise"],"sources":["../../src/memory/vector_store.d.ts"],"sourcesContent":["import type { VectorStoreRetrieverInterface } from \"@langchain/core/vectorstores\";\nimport { BaseMemory, InputValues, MemoryVariables, OutputValues } from \"@langchain/core/memory\";\ntype Metadata = Record<string, unknown>;\ntype MetadataFunction = (inputValues?: InputValues, outputValues?: OutputValues) => Metadata;\n/**\n * Interface for the parameters required to initialize a\n * VectorStoreRetrieverMemory instance.\n */\nexport interface VectorStoreRetrieverMemoryParams {\n    vectorStoreRetriever: VectorStoreRetrieverInterface;\n    inputKey?: string;\n    outputKey?: string;\n    memoryKey?: string;\n    returnDocs?: boolean;\n    /**\n     * Metadata to be added to the document when saving context.\n     */\n    metadata?: Metadata | MetadataFunction;\n}\n/**\n * Class for managing long-term memory in Large Language Model (LLM)\n * applications. It provides a way to persist and retrieve relevant\n * documents from a vector store database, which can be useful for\n * maintaining conversation history or other types of memory in an LLM\n * application.\n * @example\n * ```typescript\n * const vectorStore = new MemoryVectorStore(new OpenAIEmbeddings());\n * const memory = new VectorStoreRetrieverMemory({\n *   vectorStoreRetriever: vectorStore.asRetriever(1),\n *   memoryKey: \"history\",\n * });\n *\n * // Saving context to memory\n * await memory.saveContext(\n *   { input: \"My favorite food is pizza\" },\n *   { output: \"thats good to know\" },\n * );\n * await memory.saveContext(\n *   { input: \"My favorite sport is soccer\" },\n *   { output: \"...\" },\n * );\n * await memory.saveContext({ input: \"I don't the Celtics\" }, { output: \"ok\" });\n *\n * // Loading memory variables\n * console.log(\n *   await memory.loadMemoryVariables({ prompt: \"what sport should i watch?\" }),\n * );\n * ```\n */\nexport declare class VectorStoreRetrieverMemory extends BaseMemory implements VectorStoreRetrieverMemoryParams {\n    vectorStoreRetriever: VectorStoreRetrieverInterface;\n    inputKey?: string;\n    memoryKey: string;\n    returnDocs: boolean;\n    metadata?: Metadata | MetadataFunction;\n    constructor(fields: VectorStoreRetrieverMemoryParams);\n    get memoryKeys(): string[];\n    /**\n     * Method to load memory variables. It uses the vectorStoreRetriever to\n     * get relevant documents based on the query obtained from the input\n     * values.\n     * @param values An InputValues object.\n     * @returns A Promise that resolves to a MemoryVariables object.\n     */\n    loadMemoryVariables(values: InputValues): Promise<MemoryVariables>;\n    /**\n     * Method to save context. It constructs a document from the input and\n     * output values (excluding the memory key) and adds it to the vector\n     * store database using the vectorStoreRetriever.\n     * @param inputValues An InputValues object.\n     * @param outputValues An OutputValues object.\n     * @returns A Promise that resolves to void.\n     */\n    saveContext(inputValues: InputValues, outputValues: OutputValues): Promise<void>;\n}\nexport {};\n"],"mappings":";;;;KAEKK,QAAAA,GAAWC;KACXC,gBAAAA,kBAAkCL,4BAA4BE,iBAAiBC;AAFY;AAC1E;;;AAC6CD,UAKlDI,gCAAAA,CALkDJ;EAAY,oBAAKC,EAM1DL,6BAN0DK;EAAQ,QAAA,CAAA,EAAA,MAAA;EAK3EG,SAAAA,CAAAA,EAAAA,MAAAA;EAAgC,SAAA,CAAA,EAAA,MAAA;EAAA,UACvBR,CAAAA,EAAAA,OAAAA;EAA6B;;AAQb;EAiCrBS,QAAAA,CAAAA,EAjCNJ,QAiCMI,GAjCKF,gBAiCqB;;;;;;;;;;;;;;AAA+D;;;;;;;;;;;;;;;;;;;cAAzFE,0BAAAA,SAAmCR,UAAAA,YAAsBO;wBACpDR;;;;aAIXK,WAAWE;sBACFC;;;;;;;;;8BASQN,cAAcQ,QAAQP;;;;;;;;;2BASzBD,2BAA2BE,eAAeM"}