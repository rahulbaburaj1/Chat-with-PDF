{"version":3,"file":"index.d.ts","names":["BaseLanguageModelInterface","ToolInterface","PromptTemplate","Optional","Agent","AgentArgs","OutputParserArgs","AgentInput","SerializedZeroShotAgent","ZeroShotAgentOutputParser","ZeroShotCreatePromptArgs","ZeroShotAgentInput","ZeroShotAgent","Promise"],"sources":["../../../src/agents/mrkl/index.d.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport { ToolInterface } from \"@langchain/core/tools\";\nimport { PromptTemplate } from \"@langchain/core/prompts\";\nimport { Optional } from \"../../types/type-utils.js\";\nimport { Agent, AgentArgs, OutputParserArgs } from \"../agent.js\";\nimport { AgentInput, SerializedZeroShotAgent } from \"../types.js\";\nimport { ZeroShotAgentOutputParser } from \"./outputParser.js\";\n/**\n * Interface for creating a prompt for the ZeroShotAgent.\n */\nexport interface ZeroShotCreatePromptArgs {\n    /** String to put after the list of tools. */\n    suffix?: string;\n    /** String to put before the list of tools. */\n    prefix?: string;\n    /** List of input variables the final prompt will expect. */\n    inputVariables?: string[];\n}\n/**\n * Type for the input to the ZeroShotAgent, with the 'outputParser'\n * property made optional.\n */\nexport type ZeroShotAgentInput = Optional<AgentInput, \"outputParser\">;\n/**\n * Agent for the MRKL chain.\n * @augments Agent\n * @example\n * ```typescript\n *\n * const agent = new ZeroShotAgent({\n *   llmChain: new LLMChain({\n *     llm: new ChatOpenAI({ model: \"gpt-4o-mini\", temperature: 0 }),\n *     prompt: ZeroShotAgent.createPrompt([new SerpAPI(), new Calculator()], {\n *       prefix: `Answer the following questions as best you can, but speaking as a pirate might speak. You have access to the following tools:`,\n *       suffix: `Begin! Remember to speak as a pirate when giving your final answer. Use lots of \"Args\"\n * Question: {input}\n * {agent_scratchpad}`,\n *       inputVariables: [\"input\", \"agent_scratchpad\"],\n *     }),\n *   }),\n *   allowedTools: [\"search\", \"calculator\"],\n * });\n *\n * const result = await agent.invoke({\n *   input: `Who is Olivia Wilde's boyfriend? What is his current age raised to the 0.23 power?`,\n * });\n * ```\n */\nexport declare class ZeroShotAgent extends Agent {\n    static lc_name(): string;\n    lc_namespace: string[];\n    ToolType: ToolInterface;\n    constructor(input: ZeroShotAgentInput);\n    _agentType(): \"zero-shot-react-description\";\n    observationPrefix(): string;\n    llmPrefix(): string;\n    /**\n     * Returns the default output parser for the ZeroShotAgent.\n     * @param fields Optional arguments for the output parser.\n     * @returns An instance of ZeroShotAgentOutputParser.\n     */\n    static getDefaultOutputParser(fields?: OutputParserArgs): ZeroShotAgentOutputParser;\n    /**\n     * Validates the tools for the ZeroShotAgent. Throws an error if any tool\n     * does not have a description.\n     * @param tools List of tools to validate.\n     */\n    static validateTools(tools: ToolInterface[]): void;\n    /**\n     * Create prompt in the style of the zero shot agent.\n     *\n     * @param tools - List of tools the agent will have access to, used to format the prompt.\n     * @param args - Arguments to create the prompt with.\n     * @param args.suffix - String to put after the list of tools.\n     * @param args.prefix - String to put before the list of tools.\n     * @param args.inputVariables - List of input variables the final prompt will expect.\n     */\n    static createPrompt(tools: ToolInterface[], args?: ZeroShotCreatePromptArgs): PromptTemplate<any, any>;\n    /**\n     * Creates a ZeroShotAgent from a Large Language Model and a set of tools.\n     * @param llm The Large Language Model to use.\n     * @param tools The tools for the agent to use.\n     * @param args Optional arguments for creating the agent.\n     * @returns A new instance of ZeroShotAgent.\n     */\n    static fromLLMAndTools(llm: BaseLanguageModelInterface, tools: ToolInterface[], args?: ZeroShotCreatePromptArgs & AgentArgs): ZeroShotAgent;\n    static deserialize(data: SerializedZeroShotAgent & {\n        llm?: BaseLanguageModelInterface;\n        tools?: ToolInterface[];\n    }): Promise<ZeroShotAgent>;\n}\n"],"mappings":";;;;;;;;;;;;AAUA;AAYYW,UAZKD,wBAAAA,CAYa;EAAA;EAAA,MAAYH,CAAAA,EAAAA,MAAAA;EAAU;EAAX,MAAA,CAAA,EAAA,MAAA;EA0BpBK;EAAa,cAAA,CAAA,EAAA,MAAA,EAAA;;;;;;AA6BHX,KAvDnBU,kBAAAA,GAAqBR,QAuDFF,CAvDWM,UAuDXN,EAAAA,cAAAA,CAAAA;;;;;;;;;;;;;;AA7BiB;;;;;;;;;;;;cAA3BW,aAAAA,SAAsBR,KAAAA;;;YAG7BH;qBACSU;;;;;;;;;yCASoBL,mBAAmBG;;;;;;8BAM9BR;;;;;;;;;;6BAUDA,wBAAwBS,2BAA2BR;;;;;;;;8BAQlDF,mCAAmCC,wBAAwBS,2BAA2BL,YAAYO;2BACrGJ;UACfR;YACEC;MACRY,QAAQD"}