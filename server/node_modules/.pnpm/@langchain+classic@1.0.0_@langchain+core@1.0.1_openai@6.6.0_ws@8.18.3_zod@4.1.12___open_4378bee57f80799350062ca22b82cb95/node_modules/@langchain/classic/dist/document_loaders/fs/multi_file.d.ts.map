{"version":3,"file":"multi_file.d.ts","names":["Document","BaseDocumentLoader","LoadersMapping","UnknownHandling","MultiFileLoader","Promise"],"sources":["../../../src/document_loaders/fs/multi_file.d.ts"],"sourcesContent":["import { Document } from \"@langchain/core/documents\";\nimport { BaseDocumentLoader } from \"@langchain/core/document_loaders/base\";\nimport { type LoadersMapping, UnknownHandling } from \"./directory.js\";\n/**\n * A document loader that loads documents from multiple files. It extends the\n * `BaseDocumentLoader` class and implements the `load()` method.\n * @example\n * ```typescript\n *\n * const multiFileLoader = new MultiFileLoader(\n *   [\"path/to/file1.pdf\", \"path/to/file2.txt\"],\n *   {\n *     \".pdf\": (path: string) => new PDFLoader(path),\n *   },\n * );\n *\n * const docs = await multiFileLoader.load();\n * console.log({ docs });\n *\n * ```\n */\nexport declare class MultiFileLoader extends BaseDocumentLoader {\n    filePaths: string[];\n    loaders: LoadersMapping;\n    unknown: UnknownHandling;\n    constructor(filePaths: string[], loaders: LoadersMapping, unknown?: UnknownHandling);\n    /**\n     * Loads the documents from the provided file paths. It checks if the file\n     * is a directory and ignores it. If a file is a file, it checks if there\n     * is a corresponding loader function for the file extension in the `loaders`\n     * mapping. If there is, it loads the documents. If there is no\n     * corresponding loader function and `unknown` is set to `Warn`, it logs a\n     * warning message. If `unknown` is set to `Error`, it throws an error.\n     * @returns A promise that resolves to an array of loaded documents.\n     */\n    load(): Promise<Document[]>;\n}\n"],"mappings":";;;;;;;;AAqBA;;;;;;;;;AAA+D;;;;;;;cAA1CI,eAAAA,SAAwBH,kBAAAA;;WAEhCC;WACAC;4CACiCD,0BAA0BC;;;;;;;;;;UAU5DE,QAAQL"}