{"version":3,"file":"multi_query.d.ts","names":["BaseLanguageModelInterface","BaseRetriever","BaseRetrieverInput","BaseRetrieverInterface","Document","BasePromptTemplate","CallbackManagerForRetrieverRun","LLMChain","BaseDocumentCompressor","LineList","MultiDocs","Record","MultiQueryRetrieverInput","MultiQueryRetriever","Omit","Promise"],"sources":["../../src/retrievers/multi_query.d.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport { BaseRetriever, type BaseRetrieverInput, type BaseRetrieverInterface } from \"@langchain/core/retrievers\";\nimport { Document } from \"@langchain/core/documents\";\nimport { BasePromptTemplate } from \"@langchain/core/prompts\";\nimport { CallbackManagerForRetrieverRun } from \"@langchain/core/callbacks/manager\";\nimport { LLMChain } from \"../chains/llm_chain.js\";\nimport type { BaseDocumentCompressor } from \"./document_compressors/index.js\";\ninterface LineList {\n    lines: string[];\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type MultiDocs = Document<Record<string, any>>[];\nexport interface MultiQueryRetrieverInput extends BaseRetrieverInput {\n    retriever: BaseRetrieverInterface;\n    /** @deprecated Pass a custom prompt into `.fromLLM` instead. */\n    llmChain: LLMChain<LineList>;\n    queryCount?: number;\n    parserKey?: string;\n    documentCompressor?: BaseDocumentCompressor | undefined;\n    documentCompressorFilteringFn?: (docs: MultiDocs) => MultiDocs;\n}\n/**\n * @example\n * ```typescript\n * const retriever = new MultiQueryRetriever.fromLLM({\n *   llm: new ChatAnthropic({}),\n *   retriever: new MemoryVectorStore().asRetriever(),\n *   verbose: true,\n * });\n * const retrievedDocs = await retriever.invoke(\n *   \"What are mitochondria made of?\",\n * );\n * ```\n */\nexport declare class MultiQueryRetriever extends BaseRetriever {\n    static lc_name(): string;\n    lc_namespace: string[];\n    private retriever;\n    private llmChain;\n    private queryCount;\n    private parserKey;\n    documentCompressor: BaseDocumentCompressor | undefined;\n    documentCompressorFilteringFn?: MultiQueryRetrieverInput[\"documentCompressorFilteringFn\"];\n    constructor(fields: MultiQueryRetrieverInput);\n    static fromLLM(fields: Omit<MultiQueryRetrieverInput, \"llmChain\"> & {\n        llm: BaseLanguageModelInterface;\n        prompt?: BasePromptTemplate;\n    }): MultiQueryRetriever;\n    private _generateQueries;\n    private _retrieveDocuments;\n    // Deduplicate the documents that were returned in multiple retrievals\n    private _uniqueUnion;\n    _getRelevantDocuments(question: string, runManager?: CallbackManagerForRetrieverRun): Promise<Document[]>;\n}\nexport {};\n"],"mappings":";;;;;;;;;UAOUS,QAAAA;;AADoE;AAK9E;AAAqB,KAATC,SAAAA,GAAYN,QAAH,CAAYO,MAAZ,CAAA,MAAA,EAAA,GAAA,CAAA,CAAA,EAAA;AAAYA,UAChBC,wBAAAA,SAAiCV,kBADjBS,CAAAA;EAAM,SAAfP,EAETD,sBAFSC;EAAQ;EACfQ,QAAAA,EAGHL,QAHGK,CAGMH,QAHkB,CAAA;EAAA,UAAA,CAAA,EAAA,MAAA;EAAA,SAC1BN,CAAAA,EAAAA,MAAAA;EAAsB,kBAEdM,CAAAA,EAGED,sBAHFC,GAAAA,SAAAA;EAAQ,6BAAjBF,CAAAA,EAAAA,CAAAA,IAAAA,EAI6BG,SAJ7BH,EAAAA,GAI2CG,SAJ3CH;;;;;AAHsD;AAsBpE;;;;;;;;;AAaQM,cAbaA,mBAAAA,SAA4BZ,aAAAA,CAazCY;EAAmB,OAK8BP,OAAAA,CAAAA,CAAAA,EAAAA,MAAAA;EAA8B,YAAWF,EAAAA,MAAAA,EAAAA;EAAQ,QAAhBW,SAAAA;EAAO,QAlBhDd,QAAAA;EAAa,QAAA,UAAA;;sBAOtCO;kCACYI;sBACZA;yBACGE,KAAKF;SACnBZ;aACIK;MACTQ;;;;;uDAKiDP,iCAAiCS,QAAQX"}