import { z } from "zod/v3";

//#region ../langchain-core/dist/tools/types.d.ts

/**
 * An input schema type for tools that accept a single string input.
 *
 * This schema defines a tool that takes an optional string parameter named "input".
 * It uses Zod's effects to transform the input and strip any extra properties.
 *
 * This is primarily used for creating simple string-based tools where the LLM
 * only needs to provide a single text value as input to the tool.
 */
type StringInputToolSchema = z.ZodType<string | undefined, z.ZodTypeDef,
// eslint-disable-next-line @typescript-eslint/no-explicit-any
any>;
/**
 * Defines the type for input to a tool's call method.
 *
 * This type is a convenience alias for StructuredToolCallInput with the input type
 * derived from the schema. It represents the possible inputs that can be passed to a tool,
 * which can be either:
 * - A string (if the tool accepts string input)
 * - A structured input matching the tool's schema
 * - A ToolCall object (typically from an LLM)
 *
 * @param SchemaT - The schema type for the tool input, defaults to StringInputToolSchema
 */

/**
 * Interface that defines the shape of a LangChain structured tool.
 *
 * A structured tool is a tool that uses a schema to define the structure of the arguments that the
 * LLM generates as part of its {@link ToolCall}.
 *
 * @param SchemaT - The type of the tool input schema. Usually you don't need to specify this.
 * @param SchemaInputT - The TypeScript type representing the structure of the tool arguments generated by the LLM. Useful for type checking tool handler functions when using JSONSchema.
 */
//#endregion
export { StringInputToolSchema };
//# sourceMappingURL=types.d.cts.map