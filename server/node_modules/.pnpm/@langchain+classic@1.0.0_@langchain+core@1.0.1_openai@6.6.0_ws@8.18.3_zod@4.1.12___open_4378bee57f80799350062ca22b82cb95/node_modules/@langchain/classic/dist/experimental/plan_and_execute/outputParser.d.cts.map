{"version":3,"file":"outputParser.d.cts","names":["BaseOutputParser","Plan","PlanOutputParser","Promise"],"sources":["../../../src/experimental/plan_and_execute/outputParser.d.ts"],"sourcesContent":["import { BaseOutputParser } from \"@langchain/core/output_parsers\";\nimport { Plan } from \"./base.js\";\n/**\n * Specific implementation of the `BaseOutputParser` class designed to\n * parse the output text into a `Plan` object.\n */\nexport declare class PlanOutputParser extends BaseOutputParser<Plan> {\n    lc_namespace: string[];\n    /**\n     * Parses the output text into a `Plan` object. The steps are extracted by\n     * splitting the text on newline followed by a number and a period,\n     * indicating the start of a new step. The `<END_OF_PLAN>` tag is then\n     * removed from each step.\n     * @param text The output text to be parsed.\n     * @returns A `Plan` object consisting of a series of steps.\n     */\n    parse(text: string): Promise<Plan>;\n    /**\n     * Returns a string that represents the format instructions for the plan.\n     * This is defined by the `PLANNER_SYSTEM_PROMPT_MESSAGE_TEMPLATE`\n     * constant.\n     * @returns A string representing the format instructions for the plan.\n     */\n    getFormatInstructions(): string;\n}\n"],"mappings":";;;;;;;AAMA;;AAA+DC,cAA1CC,gBAAAA,SAAyBF,gBAAiBC,CAAAA,IAAAA,CAAAA,CAAAA;EAAI,YAUlCA,EAAAA,MAAAA,EAAAA;EAAI;;AAVyB;;;;;;uBAUrCE,QAAQF"}