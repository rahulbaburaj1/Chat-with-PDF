{"version":3,"file":"vectorstore.cjs","names":["Tool","name: string","description: string","fields: VectorStoreTool","VectorDBQAChain","input: string"],"sources":["../../src/tools/vectorstore.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport type { VectorStoreInterface } from \"@langchain/core/vectorstores\";\nimport { Tool } from \"@langchain/core/tools\";\nimport { VectorDBQAChain } from \"../chains/vector_db_qa.js\";\n\n/**\n * Interface for tools that interact with a Vector Store.\n */\ninterface VectorStoreTool {\n  vectorStore: VectorStoreInterface;\n  llm: BaseLanguageModelInterface;\n}\n\n/**\n * A tool for the VectorDBQA chain to interact with a Vector Store. It is\n * used to answer questions about a specific topic. The input to this tool\n * should be a fully formed question.\n */\nexport class VectorStoreQATool extends Tool implements VectorStoreTool {\n  static lc_name() {\n    return \"VectorStoreQATool\";\n  }\n\n  vectorStore: VectorStoreInterface;\n\n  llm: BaseLanguageModelInterface;\n\n  name: string;\n\n  description: string;\n\n  chain: VectorDBQAChain;\n\n  constructor(name: string, description: string, fields: VectorStoreTool) {\n    super(...arguments);\n    this.name = name;\n    this.description = description;\n    this.vectorStore = fields.vectorStore;\n    this.llm = fields.llm;\n    this.chain = VectorDBQAChain.fromLLM(this.llm, this.vectorStore);\n  }\n\n  /**\n   * Returns a string that describes what the tool does.\n   * @param name The name of the tool.\n   * @param description A description of what the tool does.\n   * @returns A string that describes what the tool does.\n   */\n  static getDescription(name: string, description: string): string {\n    return `Useful for when you need to answer questions about ${name}. Whenever you need information about ${description} you should ALWAYS use this. Input should be a fully formed question.`;\n  }\n\n  /** @ignore */\n  async _call(input: string) {\n    return this.chain.run(input);\n  }\n}\n"],"mappings":";;;;;;;;;;AAkBA,IAAa,oBAAb,cAAuCA,4BAAgC;CACrE,OAAO,UAAU;AACf,SAAO;CACR;CAED;CAEA;CAEA;CAEA;CAEA;CAEA,YAAYC,MAAcC,aAAqBC,QAAyB;EACtE,MAAM,GAAG,UAAU;EACnB,KAAK,OAAO;EACZ,KAAK,cAAc;EACnB,KAAK,cAAc,OAAO;EAC1B,KAAK,MAAM,OAAO;EAClB,KAAK,QAAQC,qCAAgB,QAAQ,KAAK,KAAK,KAAK,YAAY;CACjE;;;;;;;CAQD,OAAO,eAAeH,MAAcC,aAA6B;AAC/D,SAAO,CAAC,mDAAmD,EAAE,KAAK,sCAAsC,EAAE,YAAY,qEAAqE,CAAC;CAC7L;;CAGD,MAAM,MAAMG,OAAe;AACzB,SAAO,KAAK,MAAM,IAAI,MAAM;CAC7B;AACF"}