{"version":3,"file":"openapi.d.ts","names":["OpenAIClient","JsonSchema7Type","OpenAPIV3_1","BaseChatModel","BaseFunctionCallOptions","BasePromptTemplate","OpenAPISpec","BaseChain","LLMChainInput","SequentialChain","OpenAPIExecutionMethod","Record","Promise","convertOpenAPISchemaToJSONSchema","SchemaObject","convertOpenAPISpecToOpenAIFunctions","Chat","ChatCompletionCreateParams","Function","OpenAPIChainOptions","createOpenAPIChain","Document"],"sources":["../../../src/chains/openai_functions/openapi.d.ts"],"sourcesContent":["import type { OpenAIClient } from \"@langchain/openai\";\nimport { type JsonSchema7Type } from \"@langchain/core/utils/json_schema\";\nimport type { OpenAPIV3_1 } from \"openapi-types\";\nimport { BaseChatModel } from \"@langchain/core/language_models/chat_models\";\nimport { BaseFunctionCallOptions } from \"@langchain/core/language_models/base\";\nimport { BasePromptTemplate } from \"@langchain/core/prompts\";\nimport { OpenAPISpec } from \"../../util/openapi.js\";\nimport { BaseChain } from \"../base.js\";\nimport { LLMChainInput } from \"../llm_chain.js\";\nimport { SequentialChain } from \"../sequential_chain.js\";\n/**\n * Type representing a function for executing OpenAPI requests.\n */\ntype OpenAPIExecutionMethod = (name: string, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nrequestArgs: Record<string, any>, options?: {\n    headers?: Record<string, string>;\n    params?: Record<string, string>;\n}) => Promise<string>;\n// OpenAI throws errors on extraneous schema properties, e.g. if \"required\" is set on individual ones\n/**\n * Converts OpenAPI schemas to JSON schema format.\n * @param schema The OpenAPI schema to convert.\n * @param spec The OpenAPI specification that contains the schema.\n * @returns The JSON schema representation of the OpenAPI schema.\n */\nexport declare function convertOpenAPISchemaToJSONSchema(schema: OpenAPIV3_1.SchemaObject, spec: OpenAPISpec): JsonSchema7Type;\n/**\n * Converts an OpenAPI specification to OpenAI functions.\n * @param spec The OpenAPI specification to convert.\n * @returns An object containing the OpenAI functions derived from the OpenAPI specification and a default execution method.\n */\nexport declare function convertOpenAPISpecToOpenAIFunctions(spec: OpenAPISpec): {\n    openAIFunctions: OpenAIClient.Chat.ChatCompletionCreateParams.Function[];\n    defaultExecutionMethod?: OpenAPIExecutionMethod;\n};\n/**\n * Type representing the options for creating an OpenAPI chain.\n */\nexport type OpenAPIChainOptions = {\n    llm?: BaseChatModel<BaseFunctionCallOptions>;\n    prompt?: BasePromptTemplate;\n    requestChain?: BaseChain;\n    llmChainInputs?: LLMChainInput;\n    headers?: Record<string, string>;\n    params?: Record<string, string>;\n    verbose?: boolean;\n};\n/**\n * Create a chain for querying an API from a OpenAPI spec.\n * @param spec OpenAPISpec or url/file/text string corresponding to one.\n * @param options Custom options passed into the chain\n * @returns OpenAPIChain\n */\nexport declare function createOpenAPIChain(spec: OpenAPIV3_1.Document | string, options?: OpenAPIChainOptions): Promise<SequentialChain>;\nexport {};\n"],"mappings":";;;;;;;;;;;;;;;AASyD;KAIpDU,sBAAAA,GAAsB,CAAA,IAAA,EAAA,MAAA;;WAGbC,EADDA,MACCA,CAAAA,MAAAA,EAAAA,GAAAA,CAAAA,EAAAA,OAED,CAFCA,EAAAA;EAAM,OACPA,CAAAA,EADCA,MACDA,CAAAA,MAAAA,EAAAA,MAAAA,CAAAA;EAAM,MACbC,CAAAA,EADOD,MACPC,CAAAA,MAAAA,EAAAA,MAAAA,CAAAA;AAAO,CAAA,EAAA,GAAPA,OAAO,CAAA,MAAA,CAAA;AAcb;;;;;AAEmD;AAKnD;;;;;;;AAKcD,iBAZUI,mCAAAA,CAYVJ,IAAAA,EAZoDL,WAYpDK,CAAAA,EAAAA;EAAM,eACPA,EAZQX,YAAAA,CAAagB,IAAAA,CAAKC,0BAAAA,CAA2BC,QAYrDP,EAAAA;EAAM,sBAAA,CAAA,EAXUD,sBAWV;AASnB,CAAA;;;;AAAwHD,KAf5GU,mBAAAA,GAe4GV;EAAe,GAAvBG,CAAAA,EAdtGT,aAcsGS,CAdxFR,uBAcwFQ,CAAAA;EAAO,MAAA,CAAA,EAb1GP,kBAa0G;iBAZpGE;mBACEC;YACPG;WACDA;;;;;;;;;iBASWS,kBAAAA,OAAyBlB,WAAAA,CAAYmB,6BAA6BF,sBAAsBP,QAAQH"}