{"version":3,"file":"agent.d.ts","names":["StructuredToolInterface","ToolInterface","BaseLanguageModelInterface","CallbackManager","Callbacks","BasePromptTemplate","AgentAction","AgentFinish","AgentStep","BaseMessage","ChainValues","Serializable","Runnable","RunnableConfig","RunnableSequence","RunnableLike","LLMChain","AgentActionOutputParser","AgentInput","RunnableMultiActionAgentInput","RunnableSingleActionAgentInput","SerializedAgent","StoppingMethod","OutputParserArgs","Record","BaseAgent","Promise","BaseSingleActionAgent","BaseMultiActionAgent","isRunnableAgent","AgentRunnableSequence","RunInput","RunOutput","Error","Exclude","RunnableSingleActionAgent","RunnableMultiActionAgent","RunnableAgent","LLMSingleActionAgentInput","LLMSingleActionAgent","AgentArgs","Agent"],"sources":["../../src/agents/agent.d.ts"],"sourcesContent":["import type { StructuredToolInterface, ToolInterface } from \"@langchain/core/tools\";\nimport type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport { CallbackManager, Callbacks } from \"@langchain/core/callbacks/manager\";\nimport { BasePromptTemplate } from \"@langchain/core/prompts\";\nimport { AgentAction, AgentFinish, AgentStep } from \"@langchain/core/agents\";\nimport { BaseMessage } from \"@langchain/core/messages\";\nimport { ChainValues } from \"@langchain/core/utils/types\";\nimport { Serializable } from \"@langchain/core/load/serializable\";\nimport { Runnable, type RunnableConfig, RunnableSequence, RunnableLike } from \"@langchain/core/runnables\";\nimport { LLMChain } from \"../chains/llm_chain.js\";\nimport type { AgentActionOutputParser, AgentInput, RunnableMultiActionAgentInput, RunnableSingleActionAgentInput, SerializedAgent, StoppingMethod } from \"./types.js\";\n/**\n * Record type for arguments passed to output parsers.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type OutputParserArgs = Record<string, any>;\n/**\n * Abstract base class for agents in LangChain. Provides common\n * functionality for agents, such as handling inputs and outputs.\n */\nexport declare abstract class BaseAgent extends Serializable {\n    ToolType: StructuredToolInterface;\n    abstract get inputKeys(): string[];\n    get returnValues(): string[];\n    get allowedTools(): string[] | undefined;\n    /**\n     * Return the string type key uniquely identifying this class of agent.\n     */\n    _agentType(): string;\n    /**\n     * Return the string type key uniquely identifying multi or single action agents.\n     */\n    abstract _agentActionType(): string;\n    /**\n     * Return response when agent has been stopped due to max iterations\n     */\n    returnStoppedResponse(earlyStoppingMethod: StoppingMethod, _steps: AgentStep[], _inputs: ChainValues, _callbackManager?: CallbackManager): Promise<AgentFinish>;\n    /**\n     * Prepare the agent for output, if needed\n     */\n    prepareForOutput(_returnValues: AgentFinish[\"returnValues\"], _steps: AgentStep[]): Promise<AgentFinish[\"returnValues\"]>;\n}\n/**\n * Abstract base class for single action agents in LangChain. Extends the\n * BaseAgent class and provides additional functionality specific to\n * single action agents.\n */\nexport declare abstract class BaseSingleActionAgent extends BaseAgent {\n    _agentActionType(): string;\n    /**\n     * Decide what to do, given some input.\n     *\n     * @param steps - Steps the LLM has taken so far, along with observations from each.\n     * @param inputs - User inputs.\n     * @param callbackManager - Callback manager.\n     *\n     * @returns Action specifying what tool to use.\n     */\n    abstract plan(steps: AgentStep[], inputs: ChainValues, callbackManager?: CallbackManager, config?: RunnableConfig): Promise<AgentAction | AgentFinish>;\n}\n/**\n * Abstract base class for multi-action agents in LangChain. Extends the\n * BaseAgent class and provides additional functionality specific to\n * multi-action agents.\n */\nexport declare abstract class BaseMultiActionAgent extends BaseAgent {\n    _agentActionType(): string;\n    /**\n     * Decide what to do, given some input.\n     *\n     * @param steps - Steps the LLM has taken so far, along with observations from each.\n     * @param inputs - User inputs.\n     * @param callbackManager - Callback manager.\n     *\n     * @returns Actions specifying what tools to use.\n     */\n    abstract plan(steps: AgentStep[], inputs: ChainValues, callbackManager?: CallbackManager, config?: RunnableConfig): Promise<AgentAction[] | AgentFinish>;\n}\nexport declare function isRunnableAgent(x: BaseAgent): boolean;\n// TODO: Remove in the future. Only for backwards compatibility.\n// Allows for the creation of runnables with properties that will\n// be passed to the agent executor constructor.\nexport declare class AgentRunnableSequence<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRunInput = any, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRunOutput = any> extends RunnableSequence<RunInput, RunOutput> {\n    streamRunnable?: boolean;\n    singleAction: boolean;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static fromRunnables<RunInput = any, RunOutput = any>([first, ...runnables]: [\n        RunnableLike<RunInput>,\n        ...RunnableLike[],\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        RunnableLike<any, RunOutput>\n    ], config: {\n        singleAction: boolean;\n        streamRunnable?: boolean;\n        name?: string;\n    }): AgentRunnableSequence<RunInput, Exclude<RunOutput, Error>>;\n    static isAgentRunnableSequence(x: Runnable): x is AgentRunnableSequence;\n}\n/**\n * Class representing a single-action agent powered by runnables.\n * Extends the BaseSingleActionAgent class and provides methods for\n * planning agent actions with runnables.\n */\nexport declare class RunnableSingleActionAgent extends BaseSingleActionAgent {\n    lc_namespace: string[];\n    runnable: Runnable<ChainValues & {\n        steps: AgentStep[];\n    }, AgentAction | AgentFinish>;\n    get inputKeys(): string[];\n    /**\n     * Whether to stream from the runnable or not.\n     * If true, the underlying LLM is invoked in a streaming fashion to make it\n     * possible to get access to the individual LLM tokens when using\n     * `streamLog` with the Agent Executor. If false then LLM is invoked in a\n     * non-streaming fashion and individual LLM tokens will not be available\n     * in `streamLog`.\n     *\n     * Note that the runnable should still only stream a single action or\n     * finish chunk.\n     */\n    streamRunnable: boolean;\n    defaultRunName: string;\n    constructor(fields: RunnableSingleActionAgentInput);\n    plan(steps: AgentStep[], inputs: ChainValues, callbackManager?: CallbackManager, config?: RunnableConfig): Promise<AgentAction | AgentFinish>;\n}\n/**\n * Class representing a multi-action agent powered by runnables.\n * Extends the BaseMultiActionAgent class and provides methods for\n * planning agent actions with runnables.\n */\nexport declare class RunnableMultiActionAgent extends BaseMultiActionAgent {\n    lc_namespace: string[];\n    // TODO: Rename input to \"intermediate_steps\"\n    runnable: Runnable<ChainValues & {\n        steps: AgentStep[];\n    }, AgentAction[] | AgentAction | AgentFinish>;\n    defaultRunName: string;\n    stop?: string[];\n    streamRunnable: boolean;\n    get inputKeys(): string[];\n    constructor(fields: RunnableMultiActionAgentInput);\n    plan(steps: AgentStep[], inputs: ChainValues, callbackManager?: CallbackManager, config?: RunnableConfig): Promise<AgentAction[] | AgentFinish>;\n}\nexport declare class RunnableAgent extends RunnableMultiActionAgent {\n}\n/**\n * Interface for input data for creating a LLMSingleActionAgent.\n */\nexport interface LLMSingleActionAgentInput {\n    llmChain: LLMChain;\n    outputParser: AgentActionOutputParser;\n    stop?: string[];\n}\n/**\n * Class representing a single action agent using a LLMChain in LangChain.\n * Extends the BaseSingleActionAgent class and provides methods for\n * planning agent actions based on LLMChain outputs.\n * @example\n * ```typescript\n * const customPromptTemplate = new CustomPromptTemplate({\n *   tools: [new Calculator()],\n *   inputVariables: [\"input\", \"agent_scratchpad\"],\n * });\n * const customOutputParser = new CustomOutputParser();\n * const agent = new LLMSingleActionAgent({\n *   llmChain: new LLMChain({\n *     prompt: customPromptTemplate,\n *     llm: new ChatOpenAI({ model: \"gpt-4o-mini\", temperature: 0 }),\n *   }),\n *   outputParser: customOutputParser,\n *   stop: [\"\\nObservation\"],\n * });\n * const executor = new AgentExecutor({\n *   agent,\n *   tools: [new Calculator()],\n * });\n * const result = await executor.invoke({\n *   input:\n *     \"Who is Olivia Wilde's boyfriend? What is his current age raised to the 0.23 power?\",\n * });\n * ```\n */\nexport declare class LLMSingleActionAgent extends BaseSingleActionAgent {\n    lc_namespace: string[];\n    llmChain: LLMChain;\n    outputParser: AgentActionOutputParser;\n    stop?: string[];\n    constructor(input: LLMSingleActionAgentInput);\n    get inputKeys(): string[];\n    /**\n     * Decide what to do given some input.\n     *\n     * @param steps - Steps the LLM has taken so far, along with observations from each.\n     * @param inputs - User inputs.\n     * @param callbackManager - Callback manager.\n     *\n     * @returns Action specifying what tool to use.\n     */\n    plan(steps: AgentStep[], inputs: ChainValues, callbackManager?: CallbackManager): Promise<AgentAction | AgentFinish>;\n}\n/**\n * Interface for arguments used to create an agent in LangChain.\n */\nexport interface AgentArgs {\n    outputParser?: AgentActionOutputParser;\n    callbacks?: Callbacks;\n    /**\n     * @deprecated Use `callbacks` instead.\n     */\n    callbackManager?: CallbackManager;\n}\n/**\n * Class responsible for calling a language model and deciding an action.\n *\n * @remarks This is driven by an LLMChain. The prompt in the LLMChain *must*\n * include a variable called \"agent_scratchpad\" where the agent can put its\n * intermediary work.\n */\nexport declare abstract class Agent extends BaseSingleActionAgent {\n    llmChain: LLMChain;\n    outputParser: AgentActionOutputParser | undefined;\n    private _allowedTools?;\n    get allowedTools(): string[] | undefined;\n    get inputKeys(): string[];\n    constructor(input: AgentInput);\n    /**\n     * Prefix to append the observation with.\n     */\n    abstract observationPrefix(): string;\n    /**\n     * Prefix to append the LLM call with.\n     */\n    abstract llmPrefix(): string;\n    /**\n     * Return the string type key uniquely identifying this class of agent.\n     */\n    abstract _agentType(): string;\n    /**\n     * Get the default output parser for this agent.\n     */\n    static getDefaultOutputParser(_fields?: OutputParserArgs): AgentActionOutputParser;\n    /**\n     * Create a prompt for this class\n     *\n     * @param _tools - List of tools the agent will have access to, used to format the prompt.\n     * @param _fields - Additional fields used to format the prompt.\n     *\n     * @returns A PromptTemplate assembled from the given tools and fields.\n     * */\n    static createPrompt(_tools: StructuredToolInterface[], \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _fields?: Record<string, any>): BasePromptTemplate;\n    /** Construct an agent from an LLM and a list of tools */\n    static fromLLMAndTools(_llm: BaseLanguageModelInterface, _tools: StructuredToolInterface[], _args?: AgentArgs): Agent;\n    /**\n     * Validate that appropriate tools are passed in\n     */\n    static validateTools(_tools: StructuredToolInterface[]): void;\n    _stop(): string[];\n    /**\n     * Name of tool to use to terminate the chain.\n     */\n    finishToolName(): string;\n    /**\n     * Construct a scratchpad to let the agent continue its thought process\n     */\n    constructScratchPad(steps: AgentStep[]): Promise<string | BaseMessage[]>;\n    private _plan;\n    /**\n     * Decide what to do given some input.\n     *\n     * @param steps - Steps the LLM has taken so far, along with observations from each.\n     * @param inputs - User inputs.\n     * @param callbackManager - Callback manager to use for this call.\n     *\n     * @returns Action specifying what tool to use.\n     */\n    plan(steps: AgentStep[], inputs: ChainValues, callbackManager?: CallbackManager): Promise<AgentAction | AgentFinish>;\n    /**\n     * Return response when agent has been stopped due to max iterations\n     */\n    returnStoppedResponse(earlyStoppingMethod: StoppingMethod, steps: AgentStep[], inputs: ChainValues, callbackManager?: CallbackManager): Promise<AgentFinish>;\n    /**\n     * Load an agent from a json-like object describing it.\n     */\n    static deserialize(data: SerializedAgent & {\n        llm?: BaseLanguageModelInterface;\n        tools?: ToolInterface[];\n    }): Promise<Agent>;\n}\n"],"mappings":"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"}