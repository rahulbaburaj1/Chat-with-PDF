{"version":3,"file":"sql.d.cts","names":["BaseLanguageModelInterface","Tool","LLMChain","SqlDatabase","SqlTool","QuerySqlTool","Promise","InfoSqlTool","ListTablesSqlTool","QueryCheckerToolArgs","QueryCheckerTool"],"sources":["../../src/tools/sql.d.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport { Tool } from \"@langchain/core/tools\";\nimport { LLMChain } from \"../chains/llm_chain.js\";\nimport type { SqlDatabase } from \"../sql_db.js\";\n/**\n * Interface for SQL tools. It has a `db` property which is a SQL\n * database.\n */\ninterface SqlTool {\n    db: SqlDatabase;\n}\n/**\n * A tool for executing SQL queries. It takes a SQL database as a\n * parameter and assigns it to the `db` property. The `_call` method is\n * used to run the SQL query and return the result. If the query is\n * incorrect, an error message is returned.\n */\nexport declare class QuerySqlTool extends Tool implements SqlTool {\n    static lc_name(): string;\n    name: string;\n    db: SqlDatabase;\n    constructor(db: SqlDatabase);\n    /** @ignore */\n    _call(input: string): Promise<string>;\n    description: string;\n}\n/**\n * A tool for retrieving information about SQL tables. It takes a SQL\n * database as a parameter and assigns it to the `db` property. The\n * `_call` method is used to retrieve the schema and sample rows for the\n * specified tables. If the tables do not exist, an error message is\n * returned.\n */\nexport declare class InfoSqlTool extends Tool implements SqlTool {\n    static lc_name(): string;\n    name: string;\n    db: SqlDatabase;\n    constructor(db: SqlDatabase);\n    /** @ignore */\n    _call(input: string): Promise<string>;\n    description: string;\n}\n/**\n * A tool for listing all tables in a SQL database. It takes a SQL\n * database as a parameter and assigns it to the `db` property. The\n * `_call` method is used to return a comma-separated list of all tables\n * in the database.\n */\nexport declare class ListTablesSqlTool extends Tool implements SqlTool {\n    static lc_name(): string;\n    name: string;\n    db: SqlDatabase;\n    constructor(db: SqlDatabase);\n    _call(_: string): Promise<string>;\n    description: string;\n}\n/**\n * Arguments for the QueryCheckerTool class.\n */\ntype QueryCheckerToolArgs = {\n    llmChain?: LLMChain;\n    llm: BaseLanguageModelInterface;\n    _chainType?: never;\n};\n/**\n * A tool for checking SQL queries for common mistakes. It takes a\n * LLMChain or QueryCheckerToolArgs as a parameter. The `_call` method is\n * used to check the input query for common mistakes and returns a\n * prediction.\n */\nexport declare class QueryCheckerTool extends Tool {\n    static lc_name(): string;\n    name: string;\n    template: string;\n    llmChain: LLMChain;\n    constructor(llmChainOrOptions?: LLMChain | QueryCheckerToolArgs);\n    /** @ignore */\n    _call(input: string): Promise<string>;\n    description: string;\n}\nexport {};\n"],"mappings":";;;;;;;;;AAGgD;AAchD;UATUI,OAAAA,CASuB;EAAA,EAAA,EARzBD,WAWAA;;;;;AAHyD;AAgBjE;;AAGQA,cAnBaE,YAAAA,SAAqBJ,IAAAA,YAAgBG,OAmBlDD,CAAAA;EAAW,OACCA,OAAAA,CAAAA,CAAAA,EAAAA,MAAAA;EAAW,IAELG,EAAAA,MAAAA;EAAO,EAAA,EAnBzBH,WAaiCF;EAAI,WAAYG,CAAAA,EAAAA,EAZrCD,WAYqCC;EAAO;EAe3CI,KAAAA,CAAAA,KAAAA,EAAAA,MAAAA,CAAiB,EAzBZF,OAyBY,CAAA,MAAA,CAAA;EAAA,WAAA,EAAA,MAAA;;;;;;AAAgC;AAOrE;;AAKcJ,cA3BMK,WAAAA,SAAoBN,IAAAA,YAAgBG,OA2B1CF,CAAAA;EAAQ,OACdF,OAAAA,CAAAA,CAAAA,EAAAA,MAAAA;EAA0B,IAAA,EAAA,MAAA;EASdU,EAAAA,EAlCbP,WAkCaO;EAAgB,WAAA,CAAA,EAAA,EAjCjBP,WAiCiB;EAAA;EAIf,KACcD,CAAAA,KAAAA,EAAAA,MAAAA,CAAAA,EApCVI,OAoCUJ,CAAAA,MAAAA,CAAAA;EAAQ,WAAGO,EAAAA,MAAAA;;;AALG;;;;;cAtB7BD,iBAAAA,SAA0BP,IAAAA,YAAgBG;;;MAGvDD;kBACYA;oBACEG;;;;;;KAMjBG,oBAAAA;aACUP;OACNF;;;;;;;;;cASYU,gBAAAA,SAAyBT,IAAAA;;;;YAIhCC;kCACsBA,WAAWO;;wBAErBH"}