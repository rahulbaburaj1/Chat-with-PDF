{"version":3,"file":"index.d.cts","names":["RunnableInterface","BaseRetriever","BaseRetrieverInput","Document","VectorStore","BaseTranslator","StructuredQuery","CallbackManagerForRetrieverRun","QueryConstructorRunnableOptions","BasicTranslator","FunctionalTranslator","SelfQueryRetrieverArgs","T","SelfQueryRetriever","Record","Promise","Omit"],"sources":["../../../src/retrievers/self_query/index.d.ts"],"sourcesContent":["import { RunnableInterface } from \"@langchain/core/runnables\";\nimport { BaseRetriever, type BaseRetrieverInput } from \"@langchain/core/retrievers\";\nimport { Document } from \"@langchain/core/documents\";\nimport { VectorStore } from \"@langchain/core/vectorstores\";\nimport { BaseTranslator, StructuredQuery } from \"@langchain/core/structured_query\";\nimport { CallbackManagerForRetrieverRun } from \"@langchain/core/callbacks/manager\";\nimport { QueryConstructorRunnableOptions } from \"../../chains/query_constructor/index.js\";\nexport { BaseTranslator } from \"@langchain/core/structured_query\";\nexport { BasicTranslator, FunctionalTranslator, } from \"@langchain/core/structured_query\";\n/**\n * Interface for the arguments required to create a SelfQueryRetriever\n * instance. It extends the BaseRetrieverInput interface.\n */\nexport interface SelfQueryRetrieverArgs<T extends VectorStore> extends BaseRetrieverInput {\n    vectorStore: T;\n    structuredQueryTranslator: BaseTranslator<T>;\n    queryConstructor: RunnableInterface<{\n        query: string;\n    }, StructuredQuery>;\n    verbose?: boolean;\n    useOriginalQuery?: boolean;\n    searchParams?: {\n        k?: number;\n        filter?: T[\"FilterType\"];\n        mergeFiltersOperator?: \"or\" | \"and\" | \"replace\";\n        forceDefaultFilter?: boolean;\n    };\n}\n/**\n * Class for question answering over an index. It retrieves relevant\n * documents based on a query. It extends the BaseRetriever class and\n * implements the SelfQueryRetrieverArgs interface.\n * @example\n * ```typescript\n * const selfQueryRetriever = SelfQueryRetriever.fromLLM({\n *   llm: new ChatOpenAI({ model: \"gpt-4o-mini\" }),\n *   vectorStore: await HNSWLib.fromDocuments(docs, new OpenAIEmbeddings()),\n *   documentContents: \"Brief summary of a movie\",\n *   attributeInfo: attributeInfo,\n *   structuredQueryTranslator: new FunctionalTranslator(),\n * });\n * const relevantDocuments = await selfQueryRetriever.invoke(\n *   \"Which movies are directed by Greta Gerwig?\",\n * );\n * ```\n */\nexport declare class SelfQueryRetriever<T extends VectorStore> extends BaseRetriever implements SelfQueryRetrieverArgs<T> {\n    static lc_name(): string;\n    get lc_namespace(): string[];\n    vectorStore: T;\n    queryConstructor: RunnableInterface<{\n        query: string;\n    }, StructuredQuery>;\n    verbose?: boolean;\n    structuredQueryTranslator: BaseTranslator<T>;\n    useOriginalQuery: boolean;\n    searchParams?: {\n        k?: number;\n        filter?: T[\"FilterType\"];\n        mergeFiltersOperator?: \"or\" | \"and\" | \"replace\";\n        forceDefaultFilter?: boolean;\n    };\n    constructor(options: SelfQueryRetrieverArgs<T>);\n    _getRelevantDocuments(query: string, runManager?: CallbackManagerForRetrieverRun): Promise<Document<Record<string, unknown>>[]>;\n    /**\n     * Static method to create a new SelfQueryRetriever instance from a\n     * BaseLanguageModel and a VectorStore. It first loads a query constructor\n     * chain using the loadQueryConstructorChain function, then creates a new\n     * SelfQueryRetriever instance with the loaded chain and the provided\n     * options.\n     * @param options The options used to create the SelfQueryRetriever instance. It includes the QueryConstructorChainOptions and all the SelfQueryRetrieverArgs except 'llmChain'.\n     * @returns A new instance of SelfQueryRetriever.\n     */\n    static fromLLM<T extends VectorStore>(options: QueryConstructorRunnableOptions & Omit<SelfQueryRetrieverArgs<T>, \"queryConstructor\">): SelfQueryRetriever<T>;\n}\n"],"mappings":";;;;;;;;;;AAaA;;;;AAE8CY,UAF7BD,sBAE6BC,CAAAA,UAFIR,WAEJQ,CAAAA,SAFyBV,kBAEzBU,CAAAA;EAAC,WAAhBP,EADdO,CACcP;EAAc,yBAGtCC,EAHwBD,gBAGxBC,CAHuCM,CAGvCN,CAAAA;EAAe,gBAFAN,EAAAA,iBAAAA,CAAAA;IAOLY,KAAAA,EAAAA,MAAAA;EAAC,CAAA,EALXN,eALgEJ,CAAAA;EAAkB,OAAA,CAAA,EAAA,OAAA;EAiCpEW,gBAAAA,CAAAA,EAAAA,OAAkB;EAAA,YAAA,CAAA,EAAA;IAAWT,CAAAA,CAAAA,EAAAA,MAAAA;IAAqEQ,MAAAA,CAAAA,EAvBtGA,CAuBsGA,CAAAA,YAAAA,CAAAA;IAGtGA,oBAAAA,CAAAA,EAAAA,IAAAA,GAAAA,KAAAA,GAAAA,SAAAA;IAGVN,kBAAAA,CAAAA,EAAAA,OAAAA;EAAe,CAAA;;;;;;;;;;;;;;;;;;;AANgG;cAAjGO,6BAA6BT,qBAAqBH,aAAAA,YAAyBU,uBAAuBC;;;eAGtGA;oBACKZ;;KAEfM;;6BAEwBD,iBAAeO;;;;aAI7BA;;;;uBAIQD,uBAAuBC;oDACML,iCAAiCQ,QAAQZ,SAASW;;;;;;;;;;2BAU3EV,sBAAsBI,kCAAkCQ,KAAKL,uBAAuBC,0BAA0BC,mBAAmBD"}