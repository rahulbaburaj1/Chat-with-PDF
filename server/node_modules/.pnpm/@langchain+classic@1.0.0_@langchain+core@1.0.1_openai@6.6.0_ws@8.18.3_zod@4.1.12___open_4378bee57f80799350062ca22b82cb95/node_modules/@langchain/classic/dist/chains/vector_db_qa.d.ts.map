{"version":3,"file":"vector_db_qa.d.ts","names":["BaseLanguageModelInterface","VectorStoreInterface","CallbackManagerForChainRun","ChainValues","BaseChain","ChainInputs","SerializedVectorDBQAChain","LoadValues","Record","VectorDBQAChainInput","Omit","VectorDBQAChain","Promise","Partial"],"sources":["../../src/chains/vector_db_qa.d.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport type { VectorStoreInterface } from \"@langchain/core/vectorstores\";\nimport { CallbackManagerForChainRun } from \"@langchain/core/callbacks/manager\";\nimport { ChainValues } from \"@langchain/core/utils/types\";\nimport { BaseChain, ChainInputs } from \"./base.js\";\nimport { SerializedVectorDBQAChain } from \"./serde.js\";\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type LoadValues = Record<string, any>;\n/**\n * Interface that extends the `ChainInputs` interface and defines the\n * input fields required for a VectorDBQAChain. It includes properties\n * such as `vectorstore`, `combineDocumentsChain`,\n * `returnSourceDocuments`, `k`, and `inputKey`.\n */\nexport interface VectorDBQAChainInput extends Omit<ChainInputs, \"memory\"> {\n    vectorstore: VectorStoreInterface;\n    combineDocumentsChain: BaseChain;\n    returnSourceDocuments?: boolean;\n    k?: number;\n    inputKey?: string;\n}\n/**\n * Class that represents a VectorDBQAChain. It extends the `BaseChain`\n * class and implements the `VectorDBQAChainInput` interface. It performs\n * a similarity search using a vector store and combines the search\n * results using a specified combine documents chain.\n */\nexport declare class VectorDBQAChain extends BaseChain implements VectorDBQAChainInput {\n    static lc_name(): string;\n    k: number;\n    inputKey: string;\n    get inputKeys(): string[];\n    get outputKeys(): string[];\n    vectorstore: VectorStoreInterface;\n    combineDocumentsChain: BaseChain;\n    returnSourceDocuments: boolean;\n    constructor(fields: VectorDBQAChainInput);\n    /** @ignore */\n    _call(values: ChainValues, runManager?: CallbackManagerForChainRun): Promise<ChainValues>;\n    _chainType(): \"vector_db_qa\";\n    static deserialize(data: SerializedVectorDBQAChain, values: LoadValues): Promise<VectorDBQAChain>;\n    serialize(): SerializedVectorDBQAChain;\n    /**\n     * Static method that creates a VectorDBQAChain instance from a\n     * BaseLanguageModel and a vector store. It also accepts optional options\n     * to customize the chain.\n     * @param llm The BaseLanguageModel instance.\n     * @param vectorstore The vector store used for similarity search.\n     * @param options Optional options to customize the chain.\n     * @returns A new instance of VectorDBQAChain.\n     */\n    static fromLLM(llm: BaseLanguageModelInterface, vectorstore: VectorStoreInterface, options?: Partial<Omit<VectorDBQAChainInput, \"combineDocumentsChain\" | \"vectorstore\">>): VectorDBQAChain;\n}\n"],"mappings":";;;;;;;;;KAOYO,UAAAA,GAAaC;AAAzB;AAOA;;;;;AAA8CE,UAA7BD,oBAAAA,SAA6BC,IAAAA,CAAKL,WAALK,EAAAA,QAAAA,CAAAA,CAAAA;EAAI,WAAA,EACjCT,oBADiC;EAa7BU,qBAAe,EAXTP,SAWS;EAAA,qBAAA,CAAA,EAAA,OAAA;EAAA,CAAA,CAAA,EAMnBH,MAAAA;EAAoB,QACVG,CAAAA,EAAAA,MAAAA;;;;;;;;AAM0DO,cAbhEA,eAAAA,SAAwBP,SAAAA,YAAqBK,oBAamBE,CAAAA;EAAe,OAAvBC,OAAAA,CAAAA,CAAAA,EAAAA,MAAAA;EAAO,CAAA,EACnEN,MAAAA;EAAyB,QAUlBN,EAAAA,MAAAA;EAA0B,IAAeC,SAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA;EAAoB,IAAyBQ,UAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA;EAAoB,WAAzBC,EAlBxFT,oBAkBwFS;EAAI,qBAAZG,EAjBtET,SAiBsES;EAAO,qBAAwEF,EAAAA,OAAAA;EAAe,WAxBlJP,CAAAA,MAAAA,EASrBK,oBATqBL;EAAS;EAAgC,KAAA,CAAA,MAAA,EAWpED,WAXoE,EAAA,UAAA,CAAA,EAW1CD,0BAX0C,CAAA,EAWbU,OAXa,CAWLT,WAXK,CAAA;;2BAazDG,mCAAmCC,aAAaK,QAAQD;eACpEL;;;;;;;;;;sBAUON,yCAAyCC,gCAAgCY,QAAQH,KAAKD,kEAAkEE"}