{"version":3,"file":"ensemble.cjs","names":["BaseRetriever","args: EnsembleRetrieverInput","query: string","runManager?: CallbackManagerForRetrieverRun","docList: DocumentInterface[][]","rffScore: Record<string, number>","documents: Document[]"],"sources":["../../src/retrievers/ensemble.ts"],"sourcesContent":["import { BaseRetriever, BaseRetrieverInput } from \"@langchain/core/retrievers\";\nimport { Document, DocumentInterface } from \"@langchain/core/documents\";\nimport { CallbackManagerForRetrieverRun } from \"@langchain/core/callbacks/manager\";\n\nexport interface EnsembleRetrieverInput extends BaseRetrieverInput {\n  /** A list of retrievers to ensemble. */\n  retrievers: BaseRetriever[];\n  /**\n   * A list of weights corresponding to the retrievers. Defaults to equal\n   * weighting for all retrievers.\n   */\n  weights?: number[];\n  /**\n   * A constant added to the rank, controlling the balance between the importance\n   * of high-ranked items and the consideration given to lower-ranked items.\n   * Default is 60.\n   */\n  c?: number;\n}\n\n/**\n * Ensemble retriever that aggregates and orders the results of\n * multiple retrievers by using weighted Reciprocal Rank Fusion.\n */\nexport class EnsembleRetriever extends BaseRetriever {\n  static lc_name() {\n    return \"EnsembleRetriever\";\n  }\n\n  lc_namespace = [\"langchain\", \"retrievers\", \"ensemble_retriever\"];\n\n  retrievers: BaseRetriever[];\n\n  weights: number[];\n\n  c = 60;\n\n  constructor(args: EnsembleRetrieverInput) {\n    super(args);\n    this.retrievers = args.retrievers;\n    this.weights =\n      args.weights ||\n      new Array(args.retrievers.length).fill(1 / args.retrievers.length);\n    this.c = args.c || 60;\n  }\n\n  async _getRelevantDocuments(\n    query: string,\n    runManager?: CallbackManagerForRetrieverRun\n  ) {\n    return this._rankFusion(query, runManager);\n  }\n\n  async _rankFusion(\n    query: string,\n    runManager?: CallbackManagerForRetrieverRun\n  ) {\n    const retrieverDocs = await Promise.all(\n      this.retrievers.map((retriever, i) =>\n        retriever.invoke(query, {\n          callbacks: runManager?.getChild(`retriever_${i + 1}`),\n        })\n      )\n    );\n\n    const fusedDocs = await this._weightedReciprocalRank(retrieverDocs);\n    return fusedDocs;\n  }\n\n  async _weightedReciprocalRank(docList: DocumentInterface[][]) {\n    if (docList.length !== this.weights.length) {\n      throw new Error(\n        \"Number of retrieved document lists must be equal to the number of weights.\"\n      );\n    }\n\n    const rrfScoreDict = docList.reduce(\n      (rffScore: Record<string, number>, retrieverDoc, idx) => {\n        let rank = 1;\n        const weight = this.weights[idx];\n        while (rank <= retrieverDoc.length) {\n          const { pageContent } = retrieverDoc[rank - 1];\n          if (!rffScore[pageContent]) {\n            rffScore[pageContent] = 0;\n          }\n          rffScore[pageContent] += weight / (rank + this.c);\n          rank += 1;\n        }\n\n        return rffScore;\n      },\n      {}\n    );\n\n    const uniqueDocs = this._uniqueUnion(docList.flat());\n    const sortedDocs = Array.from(uniqueDocs).sort(\n      (a, b) => rrfScoreDict[b.pageContent] - rrfScoreDict[a.pageContent]\n    );\n\n    return sortedDocs;\n  }\n\n  private _uniqueUnion(documents: Document[]): Document[] {\n    const documentSet = new Set();\n    const result = [];\n\n    for (const doc of documents) {\n      const key = doc.pageContent;\n      if (!documentSet.has(key)) {\n        documentSet.add(key);\n        result.push(doc);\n      }\n    }\n\n    return result;\n  }\n}\n"],"mappings":";;;;;;;;;;AAwBA,IAAa,oBAAb,cAAuCA,0CAAc;CACnD,OAAO,UAAU;AACf,SAAO;CACR;CAED,eAAe;EAAC;EAAa;EAAc;CAAqB;CAEhE;CAEA;CAEA,IAAI;CAEJ,YAAYC,MAA8B;EACxC,MAAM,KAAK;EACX,KAAK,aAAa,KAAK;EACvB,KAAK,UACH,KAAK,WACL,IAAI,MAAM,KAAK,WAAW,QAAQ,KAAK,IAAI,KAAK,WAAW,OAAO;EACpE,KAAK,IAAI,KAAK,KAAK;CACpB;CAED,MAAM,sBACJC,OACAC,YACA;AACA,SAAO,KAAK,YAAY,OAAO,WAAW;CAC3C;CAED,MAAM,YACJD,OACAC,YACA;EACA,MAAM,gBAAgB,MAAM,QAAQ,IAClC,KAAK,WAAW,IAAI,CAAC,WAAW,MAC9B,UAAU,OAAO,OAAO,EACtB,WAAW,YAAY,SAAS,CAAC,UAAU,EAAE,IAAI,GAAG,CAAC,CACtD,EAAC,CACH,CACF;EAED,MAAM,YAAY,MAAM,KAAK,wBAAwB,cAAc;AACnE,SAAO;CACR;CAED,MAAM,wBAAwBC,SAAgC;AAC5D,MAAI,QAAQ,WAAW,KAAK,QAAQ,OAClC,OAAM,IAAI,MACR;EAIJ,MAAM,eAAe,QAAQ,OAC3B,CAACC,UAAkC,cAAc,QAAQ;GACvD,IAAI,OAAO;GACX,MAAM,SAAS,KAAK,QAAQ;AAC5B,UAAO,QAAQ,aAAa,QAAQ;IAClC,MAAM,EAAE,aAAa,GAAG,aAAa,OAAO;AAC5C,QAAI,CAAC,SAAS,cACZ,SAAS,eAAe;IAE1B,SAAS,gBAAgB,UAAU,OAAO,KAAK;IAC/C,QAAQ;GACT;AAED,UAAO;EACR,GACD,CAAE,EACH;EAED,MAAM,aAAa,KAAK,aAAa,QAAQ,MAAM,CAAC;EACpD,MAAM,aAAa,MAAM,KAAK,WAAW,CAAC,KACxC,CAAC,GAAG,MAAM,aAAa,EAAE,eAAe,aAAa,EAAE,aACxD;AAED,SAAO;CACR;CAED,AAAQ,aAAaC,WAAmC;EACtD,MAAM,8BAAc,IAAI;EACxB,MAAM,SAAS,CAAE;AAEjB,OAAK,MAAM,OAAO,WAAW;GAC3B,MAAM,MAAM,IAAI;AAChB,OAAI,CAAC,YAAY,IAAI,IAAI,EAAE;IACzB,YAAY,IAAI,IAAI;IACpB,OAAO,KAAK,IAAI;GACjB;EACF;AAED,SAAO;CACR;AACF"}