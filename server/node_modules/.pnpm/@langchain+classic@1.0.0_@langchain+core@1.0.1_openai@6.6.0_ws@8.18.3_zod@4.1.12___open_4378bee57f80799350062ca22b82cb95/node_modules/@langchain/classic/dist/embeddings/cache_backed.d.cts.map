{"version":3,"file":"cache_backed.d.cts","names":["EmbeddingsInterface","Embeddings","BaseStore","AsyncCallerParams","CacheBackedEmbeddingsFields","CacheBackedEmbeddings","Promise","Uint8Array"],"sources":["../../src/embeddings/cache_backed.d.ts"],"sourcesContent":["import { type EmbeddingsInterface, Embeddings } from \"@langchain/core/embeddings\";\nimport { BaseStore } from \"@langchain/core/stores\";\nimport { AsyncCallerParams } from \"@langchain/core/utils/async_caller\";\n/**\n * Interface for the fields required to initialize an instance of the\n * CacheBackedEmbeddings class.\n */\nexport interface CacheBackedEmbeddingsFields extends AsyncCallerParams {\n    underlyingEmbeddings: EmbeddingsInterface;\n    documentEmbeddingStore: BaseStore<string, number[]>;\n}\n/**\n * Interface for caching results from embedding models.\n *\n * The interface allows works with any store that implements\n * the abstract store interface accepting keys of type str and values of list of\n * floats.\n *\n * If need be, the interface can be extended to accept other implementations\n * of the value serializer and deserializer, as well as the key encoder.\n * @example\n * ```typescript\n * const underlyingEmbeddings = new OpenAIEmbeddings();\n *\n * const cacheBackedEmbeddings = CacheBackedEmbeddings.fromBytesStore(\n *   underlyingEmbeddings,\n *   new ConvexKVStore({ ctx }),\n *   {\n *     namespace: underlyingEmbeddings.modelName,\n *   },\n * );\n *\n * const loader = new TextLoader(\"./state_of_the_union.txt\");\n * const rawDocuments = await loader.load();\n * const splitter = new RecursiveCharacterTextSplitter({\n *   chunkSize: 1000,\n *   chunkOverlap: 0,\n * });\n * const documents = await splitter.splitDocuments(rawDocuments);\n *\n * let time = Date.now();\n * const vectorstore = await ConvexVectorStore.fromDocuments(\n *   documents,\n *   cacheBackedEmbeddings,\n *   { ctx },\n * );\n * console.log(`Initial creation time: ${Date.now() - time}ms`);\n *\n * time = Date.now();\n * const vectorstore2 = await ConvexVectorStore.fromDocuments(\n *   documents,\n *   cacheBackedEmbeddings,\n *   { ctx },\n * );\n * console.log(`Cached creation time: ${Date.now() - time}ms`);\n *\n * ```\n */\nexport declare class CacheBackedEmbeddings extends Embeddings {\n    protected underlyingEmbeddings: EmbeddingsInterface;\n    protected documentEmbeddingStore: BaseStore<string, number[]>;\n    constructor(fields: CacheBackedEmbeddingsFields);\n    /**\n     * Embed query text.\n     *\n     * This method does not support caching at the moment.\n     *\n     * Support for caching queries is easy to implement, but might make\n     * sense to hold off to see the most common patterns.\n     *\n     * If the cache has an eviction policy, we may need to be a bit more careful\n     * about sharing the cache between documents and queries. Generally,\n     * one is OK evicting query caches, but document caches should be kept.\n     *\n     * @param document The text to embed.\n     * @returns The embedding for the given text.\n     */\n    embedQuery(document: string): Promise<number[]>;\n    /**\n     * Embed a list of texts.\n     *\n     * The method first checks the cache for the embeddings.\n     * If the embeddings are not found, the method uses the underlying embedder\n     * to embed the documents and stores the results in the cache.\n     *\n     * @param documents\n     * @returns A list of embeddings for the given texts.\n     */\n    embedDocuments(documents: string[]): Promise<number[][]>;\n    /**\n     * Create a new CacheBackedEmbeddings instance from another embeddings instance\n     * and a storage instance.\n     * @param underlyingEmbeddings Embeddings used to populate the cache for new documents.\n     * @param documentEmbeddingStore Stores raw document embedding values. Keys are hashes of the document content.\n     * @param options.namespace Optional namespace for store keys.\n     * @returns A new CacheBackedEmbeddings instance.\n     */\n    static fromBytesStore(underlyingEmbeddings: EmbeddingsInterface, documentEmbeddingStore: BaseStore<string, Uint8Array>, options?: {\n        namespace?: string;\n    }): CacheBackedEmbeddings;\n}\n"],"mappings":";;;;;;;;AAOA;;AAC0BA,UADTI,2BAAAA,SAAoCD,iBAC3BH,CAAAA;EAAmB,oBACjBE,EADFF,mBACEE;EAAS,sBAFgBC,EAEzBD,SAFyBC,CAAAA,MAAAA,EAAAA,MAAAA,EAAAA,CAAAA;AAAiB;AAmDtE;;;;;;;;;;;;AAA6D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAAxCE,qBAAAA,SAA8BJ,UAAAA;kCACfD;oCACEE;sBACdE;;;;;;;;;;;;;;;;gCAgBUE;;;;;;;;;;;uCAWOA;;;;;;;;;8CASON,6CAA6CE,kBAAkBK;;MAEvGF"}