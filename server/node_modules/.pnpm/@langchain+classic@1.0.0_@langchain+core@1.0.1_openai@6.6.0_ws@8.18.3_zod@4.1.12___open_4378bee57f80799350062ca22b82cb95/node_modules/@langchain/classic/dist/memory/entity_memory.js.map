{"version":3,"file":"entity_memory.js","names":["fields: EntityMemoryInput","inputs: InputValues","entities: string[]","entitySummaries: { [key: string]: string | undefined }","outputs: OutputValues"],"sources":["../../src/memory/entity_memory.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport { PromptTemplate } from \"@langchain/core/prompts\";\n\nimport {\n  InputValues,\n  MemoryVariables,\n  OutputValues,\n  getPromptInputKey,\n} from \"@langchain/core/memory\";\nimport { getBufferString } from \"@langchain/core/messages\";\nimport { InMemoryEntityStore } from \"./stores/entity/in_memory.js\";\nimport { LLMChain } from \"../chains/llm_chain.js\";\nimport {\n  ENTITY_EXTRACTION_PROMPT,\n  ENTITY_SUMMARIZATION_PROMPT,\n} from \"./prompt.js\";\nimport { BaseEntityStore } from \"./stores/entity/base.js\";\nimport { BaseChatMemory, BaseChatMemoryInput } from \"./chat_memory.js\";\n\n/**\n * Interface for the input parameters required by the EntityMemory class.\n */\nexport interface EntityMemoryInput extends BaseChatMemoryInput {\n  llm: BaseLanguageModelInterface;\n  humanPrefix?: string;\n  aiPrefix?: string;\n  entityExtractionPrompt?: PromptTemplate;\n  entitySummarizationPrompt?: PromptTemplate;\n  entityCache?: string[];\n  k?: number;\n  chatHistoryKey?: string;\n  entitiesKey?: string;\n  entityStore?: BaseEntityStore;\n}\n\n// Entity extractor & summarizer to memory.\n/**\n * Class for managing entity extraction and summarization to memory in\n * chatbot applications. Extends the BaseChatMemory class and implements\n * the EntityMemoryInput interface.\n * @example\n * ```typescript\n * const memory = new EntityMemory({\n *   llm: new ChatOpenAI({ model: \"gpt-4o-mini\", temperature: 0 }),\n *   chatHistoryKey: \"history\",\n *   entitiesKey: \"entities\",\n * });\n * const model = new ChatOpenAI({ model: \"gpt-4o-mini\", temperature: 0.9 });\n * const chain = new LLMChain({\n *   llm: model,\n *   prompt: ENTITY_MEMORY_CONVERSATION_TEMPLATE,\n *   memory,\n * });\n *\n * const res1 = await chain.call({ input: \"Hi! I'm Jim.\" });\n * console.log({\n *   res1,\n *   memory: await memory.loadMemoryVariables({ input: \"Who is Jim?\" }),\n * });\n *\n * const res2 = await chain.call({\n *   input: \"I work in construction. What about you?\",\n * });\n * console.log({\n *   res2,\n *   memory: await memory.loadMemoryVariables({ input: \"Who is Jim?\" }),\n * });\n *\n * ```\n */\nexport class EntityMemory extends BaseChatMemory implements EntityMemoryInput {\n  private entityExtractionChain: LLMChain;\n\n  private entitySummarizationChain: LLMChain;\n\n  entityStore: BaseEntityStore;\n\n  entityCache: string[] = [];\n\n  k = 3;\n\n  chatHistoryKey = \"history\";\n\n  llm: BaseLanguageModelInterface;\n\n  entitiesKey = \"entities\";\n\n  humanPrefix?: string;\n\n  aiPrefix?: string;\n\n  constructor(fields: EntityMemoryInput) {\n    super({\n      chatHistory: fields.chatHistory,\n      returnMessages: fields.returnMessages ?? false,\n      inputKey: fields.inputKey,\n      outputKey: fields.outputKey,\n    });\n    this.llm = fields.llm;\n    this.humanPrefix = fields.humanPrefix;\n    this.aiPrefix = fields.aiPrefix;\n    this.chatHistoryKey = fields.chatHistoryKey ?? this.chatHistoryKey;\n    this.entitiesKey = fields.entitiesKey ?? this.entitiesKey;\n    this.entityExtractionChain = new LLMChain({\n      llm: this.llm,\n      prompt: fields.entityExtractionPrompt ?? ENTITY_EXTRACTION_PROMPT,\n    });\n    this.entitySummarizationChain = new LLMChain({\n      llm: this.llm,\n      prompt: fields.entitySummarizationPrompt ?? ENTITY_SUMMARIZATION_PROMPT,\n    });\n    this.entityStore = fields.entityStore ?? new InMemoryEntityStore();\n    this.entityCache = fields.entityCache ?? this.entityCache;\n    this.k = fields.k ?? this.k;\n  }\n\n  get memoryKeys() {\n    return [this.chatHistoryKey];\n  }\n\n  // Will always return list of memory variables.\n  get memoryVariables(): string[] {\n    return [this.entitiesKey, this.chatHistoryKey];\n  }\n\n  // Return history buffer.\n  /**\n   * Method to load memory variables and perform entity extraction.\n   * @param inputs Input values for the method.\n   * @returns Promise resolving to an object containing memory variables.\n   */\n  async loadMemoryVariables(inputs: InputValues): Promise<MemoryVariables> {\n    const promptInputKey =\n      this.inputKey ?? getPromptInputKey(inputs, this.memoryVariables);\n    const messages = await this.chatHistory.getMessages();\n    const serializedMessages = getBufferString(\n      messages.slice(-this.k * 2),\n      this.humanPrefix,\n      this.aiPrefix\n    );\n    const output = await this.entityExtractionChain.predict({\n      history: serializedMessages,\n      input: inputs[promptInputKey],\n    });\n    const entities: string[] =\n      output.trim() === \"NONE\" ? [] : output.split(\",\").map((w) => w.trim());\n    const entitySummaries: { [key: string]: string | undefined } = {};\n\n    for (const entity of entities) {\n      entitySummaries[entity] = await this.entityStore.get(\n        entity,\n        \"No current information known.\"\n      );\n    }\n    this.entityCache = [...entities];\n    const buffer = this.returnMessages\n      ? messages.slice(-this.k * 2)\n      : serializedMessages;\n\n    return {\n      [this.chatHistoryKey]: buffer,\n      [this.entitiesKey]: entitySummaries,\n    };\n  }\n\n  // Save context from this conversation to buffer.\n  /**\n   * Method to save the context from a conversation to a buffer and perform\n   * entity summarization.\n   * @param inputs Input values for the method.\n   * @param outputs Output values from the method.\n   * @returns Promise resolving to void.\n   */\n  async saveContext(inputs: InputValues, outputs: OutputValues): Promise<void> {\n    await super.saveContext(inputs, outputs);\n\n    const promptInputKey =\n      this.inputKey ?? getPromptInputKey(inputs, this.memoryVariables);\n    const messages = await this.chatHistory.getMessages();\n    const serializedMessages = getBufferString(\n      messages.slice(-this.k * 2),\n      this.humanPrefix,\n      this.aiPrefix\n    );\n    const inputData = inputs[promptInputKey];\n\n    for (const entity of this.entityCache) {\n      const existingSummary = await this.entityStore.get(\n        entity,\n        \"No current information known.\"\n      );\n      const output = await this.entitySummarizationChain.predict({\n        summary: existingSummary,\n        entity,\n        history: serializedMessages,\n        input: inputData,\n      });\n      if (output.trim() !== \"UNCHANGED\") {\n        await this.entityStore.set(entity, output.trim());\n      }\n    }\n  }\n\n  // Clear memory contents.\n  /**\n   * Method to clear the memory contents.\n   * @returns Promise resolving to void.\n   */\n  async clear() {\n    await super.clear();\n    await this.entityStore.clear();\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA,IAAa,eAAb,cAAkC,eAA4C;CAC5E,AAAQ;CAER,AAAQ;CAER;CAEA,cAAwB,CAAE;CAE1B,IAAI;CAEJ,iBAAiB;CAEjB;CAEA,cAAc;CAEd;CAEA;CAEA,YAAYA,QAA2B;EACrC,MAAM;GACJ,aAAa,OAAO;GACpB,gBAAgB,OAAO,kBAAkB;GACzC,UAAU,OAAO;GACjB,WAAW,OAAO;EACnB,EAAC;EACF,KAAK,MAAM,OAAO;EAClB,KAAK,cAAc,OAAO;EAC1B,KAAK,WAAW,OAAO;EACvB,KAAK,iBAAiB,OAAO,kBAAkB,KAAK;EACpD,KAAK,cAAc,OAAO,eAAe,KAAK;EAC9C,KAAK,wBAAwB,IAAI,SAAS;GACxC,KAAK,KAAK;GACV,QAAQ,OAAO,0BAA0B;EAC1C;EACD,KAAK,2BAA2B,IAAI,SAAS;GAC3C,KAAK,KAAK;GACV,QAAQ,OAAO,6BAA6B;EAC7C;EACD,KAAK,cAAc,OAAO,eAAe,IAAI;EAC7C,KAAK,cAAc,OAAO,eAAe,KAAK;EAC9C,KAAK,IAAI,OAAO,KAAK,KAAK;CAC3B;CAED,IAAI,aAAa;AACf,SAAO,CAAC,KAAK,cAAe;CAC7B;CAGD,IAAI,kBAA4B;AAC9B,SAAO,CAAC,KAAK,aAAa,KAAK,cAAe;CAC/C;;;;;;CAQD,MAAM,oBAAoBC,QAA+C;EACvE,MAAM,iBACJ,KAAK,YAAY,kBAAkB,QAAQ,KAAK,gBAAgB;EAClE,MAAM,WAAW,MAAM,KAAK,YAAY,aAAa;EACrD,MAAM,qBAAqB,gBACzB,SAAS,MAAM,CAAC,KAAK,IAAI,EAAE,EAC3B,KAAK,aACL,KAAK,SACN;EACD,MAAM,SAAS,MAAM,KAAK,sBAAsB,QAAQ;GACtD,SAAS;GACT,OAAO,OAAO;EACf,EAAC;EACF,MAAMC,WACJ,OAAO,MAAM,KAAK,SAAS,CAAE,IAAG,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC;EACxE,MAAMC,kBAAyD,CAAE;AAEjE,OAAK,MAAM,UAAU,UACnB,gBAAgB,UAAU,MAAM,KAAK,YAAY,IAC/C,QACA,gCACD;EAEH,KAAK,cAAc,CAAC,GAAG,QAAS;EAChC,MAAM,SAAS,KAAK,iBAChB,SAAS,MAAM,CAAC,KAAK,IAAI,EAAE,GAC3B;AAEJ,SAAO;IACJ,KAAK,iBAAiB;IACtB,KAAK,cAAc;EACrB;CACF;;;;;;;;CAUD,MAAM,YAAYF,QAAqBG,SAAsC;EAC3E,MAAM,MAAM,YAAY,QAAQ,QAAQ;EAExC,MAAM,iBACJ,KAAK,YAAY,kBAAkB,QAAQ,KAAK,gBAAgB;EAClE,MAAM,WAAW,MAAM,KAAK,YAAY,aAAa;EACrD,MAAM,qBAAqB,gBACzB,SAAS,MAAM,CAAC,KAAK,IAAI,EAAE,EAC3B,KAAK,aACL,KAAK,SACN;EACD,MAAM,YAAY,OAAO;AAEzB,OAAK,MAAM,UAAU,KAAK,aAAa;GACrC,MAAM,kBAAkB,MAAM,KAAK,YAAY,IAC7C,QACA,gCACD;GACD,MAAM,SAAS,MAAM,KAAK,yBAAyB,QAAQ;IACzD,SAAS;IACT;IACA,SAAS;IACT,OAAO;GACR,EAAC;AACF,OAAI,OAAO,MAAM,KAAK,aACpB,MAAM,KAAK,YAAY,IAAI,QAAQ,OAAO,MAAM,CAAC;EAEpD;CACF;;;;;CAOD,MAAM,QAAQ;EACZ,MAAM,MAAM,OAAO;EACnB,MAAM,KAAK,YAAY,OAAO;CAC/B;AACF"}