{"version":3,"file":"base.d.cts","names":["BaseOutputParser","ChainValues","CallbackManager","BaseChain","LLMChain","StepAction","StepResult","Step","Plan","BasePlanner","Promise","BaseStepExecutor","BaseStepContainer","ListStepContainer","LLMPlanner","ChainStepExecutor"],"sources":["../../../src/experimental/plan_and_execute/base.d.ts"],"sourcesContent":["import { BaseOutputParser } from \"@langchain/core/output_parsers\";\nimport { ChainValues } from \"@langchain/core/utils/types\";\nimport { CallbackManager } from \"@langchain/core/callbacks/manager\";\nimport { BaseChain } from \"../../chains/base.js\";\nimport { LLMChain } from \"../../chains/llm_chain.js\";\n/**\n * Represents an action to be performed in a step.\n */\nexport type StepAction = {\n    text: string;\n};\n/**\n * Represents the result of a step.\n */\nexport type StepResult = {\n    response: string;\n};\n/**\n * Represents a step, which includes an action and its result.\n */\nexport type Step = {\n    action: StepAction;\n    result: StepResult;\n};\n/**\n * Represents a plan, which is a sequence of step actions.\n */\nexport type Plan = {\n    steps: StepAction[];\n};\n/**\n * Abstract class that defines the structure for a planner. Planners are\n * responsible for generating a plan based on inputs.\n */\nexport declare abstract class BasePlanner {\n    abstract plan(inputs: ChainValues, runManager?: CallbackManager): Promise<Plan>;\n}\n/**\n * Abstract class that defines the structure for a step executor. Step\n * executors are responsible for executing a step based on inputs.\n */\nexport declare abstract class BaseStepExecutor {\n    abstract step(inputs: ChainValues, runManager?: CallbackManager): Promise<StepResult>;\n}\n/**\n * Abstract class that defines the structure for a step container. Step\n * containers are responsible for managing steps.\n */\nexport declare abstract class BaseStepContainer {\n    abstract addStep(action: StepAction, result: StepResult): void;\n    abstract getSteps(): Step[];\n    abstract getFinalResponse(): string;\n}\n/**\n * Class that extends BaseStepContainer and provides an implementation for\n * its methods. It maintains a list of steps and provides methods to add a\n * step, get all steps, and get the final response.\n */\nexport declare class ListStepContainer extends BaseStepContainer {\n    private steps;\n    addStep(action: StepAction, result: StepResult): void;\n    getSteps(): Step[];\n    getFinalResponse(): string;\n}\n/**\n * Class that extends BasePlanner and provides an implementation for the\n * plan method. It uses an instance of LLMChain and an output parser to\n * generate a plan.\n */\nexport declare class LLMPlanner extends BasePlanner {\n    private llmChain;\n    private outputParser;\n    constructor(llmChain: LLMChain, outputParser: BaseOutputParser<Plan>);\n    plan(inputs: ChainValues, runManager?: CallbackManager): Promise<Plan>;\n}\n/**\n * Class that extends BaseStepExecutor and provides an implementation for\n * the step method. It uses an instance of BaseChain to execute a step.\n */\nexport declare class ChainStepExecutor extends BaseStepExecutor {\n    private chain;\n    constructor(chain: BaseChain);\n    step(inputs: ChainValues, runManager?: CallbackManager): Promise<StepResult>;\n}\n"],"mappings":";;;;;;;;;;AAQA;AAMYM,KANAD,UAAAA,GAMU;EAMVE,IAAAA,EAAAA,MAAI;CAAA;;;AAEM;AAKVC,KAbAF,UAAAA,GAcDD;EAMmBI,QAAAA,EAAAA,MAAW;CAAA;;;;AAC6BC,KAf1DH,IAAAA,GAe0DG;EAAO,MAAA,EAdjEL,UAciE;EAM/CM,MAAAA,EAnBlBL,UAmBkBK;CAAgB;;;;AACwBD,KAf1DF,IAAAA,GAe0DE;EAAO,KAAA,EAdlEL,UAckE,EAAA;AAM7E,CAAA;;;;;AAE6B,uBAhBCI,WAAAA,CAgBD;EAQRI,SAAAA,IAAAA,CAAAA,MAAiB,EAvBZZ,WAuBY,EAAA,UAAA,CAAA,EAvBcC,eAuBd,CAAA,EAvBgCQ,OAuBhC,CAvBwCF,IAuBxC,CAAA;;;;;;AAA0B,uBAjBlCG,gBAAAA,CAiBkC;EAW3CG,SAAAA,IAAU,CAAA,MAAA,EA3BLb,WA2BK,EAAA,UAAA,CAAA,EA3BqBC,eA2BrB,CAAA,EA3BuCQ,OA2BvC,CA3B+CJ,UA2B/C,CAAA;;;;;;AAIYJ,uBAzBbU,iBAAAA,CAyBaV;EAAe,SAAWM,OAAAA,CAAAA,MAAAA,EAxBxCH,UAwBwCG,EAAAA,MAAAA,EAxBpBF,UAwBoBE,CAAAA,EAAAA,IAAAA;EAAI,SAAZE,QAAAA,CAAAA,CAAAA,EAvBpCH,IAuBoCG,EAAAA;EAAO,SAJ5BD,gBAAAA,CAAAA,CAAAA,EAAAA,MAAAA;AAAW;AAUnD;;;;;AAGqEH,cAxBhDO,iBAAAA,SAA0BD,iBAAAA,CAwBsBN;EAAU,QAAlBI,KAAAA;EAAO,OAHrBC,CAAAA,MAAAA,EAnB3BN,UAmB2BM,EAAAA,MAAAA,EAnBPL,UAmBOK,CAAAA,EAAAA,IAAAA;EAAgB,QAAA,CAAA,CAAA,EAlB/CJ,IAkB+C,EAAA;;;;;;;;cAV1CO,UAAAA,SAAmBL,WAAAA;;;wBAGdL,wBAAwBJ,iBAAiBQ;eAClDP,0BAA0BC,kBAAkBQ,QAAQF;;;;;;cAMhDO,iBAAAA,SAA0BJ,gBAAAA;;qBAExBR;eACNF,0BAA0BC,kBAAkBQ,QAAQJ"}