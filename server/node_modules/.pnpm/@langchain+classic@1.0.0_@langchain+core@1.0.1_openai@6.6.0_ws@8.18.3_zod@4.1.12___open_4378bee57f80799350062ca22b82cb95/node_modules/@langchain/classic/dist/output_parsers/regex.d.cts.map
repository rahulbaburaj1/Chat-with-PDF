{"version":3,"file":"regex.d.cts","names":["BaseOutputParser","SerializedFields","RegExpFields","RegexParserFields","RegExp","RegexParser","Record","Promise"],"sources":["../../src/output_parsers/regex.d.ts"],"sourcesContent":["import { BaseOutputParser } from \"@langchain/core/output_parsers\";\nimport type { SerializedFields } from \"../load/map_keys.js\";\nexport interface RegExpFields {\n    pattern: string;\n    flags?: string;\n}\n/**\n * Interface for the fields required to create a RegexParser instance.\n */\nexport interface RegexParserFields {\n    regex: string | RegExp | RegExpFields;\n    outputKeys: string[];\n    defaultOutputKey?: string;\n}\n/**\n * Class to parse the output of an LLM call into a dictionary.\n * @augments BaseOutputParser\n */\nexport declare class RegexParser extends BaseOutputParser<Record<string, string>> {\n    static lc_name(): string;\n    lc_namespace: string[];\n    lc_serializable: boolean;\n    get lc_attributes(): SerializedFields | undefined;\n    regex: string | RegExp;\n    outputKeys: string[];\n    defaultOutputKey?: string;\n    constructor(fields: RegexParserFields);\n    constructor(regex: string | RegExp, outputKeys: string[], defaultOutputKey?: string);\n    _type(): string;\n    /**\n     * Parses the given text using the regex pattern and returns a dictionary\n     * with the parsed output. If the regex pattern does not match the text\n     * and no defaultOutputKey is provided, throws an OutputParserException.\n     * @param text The text to be parsed.\n     * @returns A dictionary with the parsed output.\n     */\n    parse(text: string): Promise<Record<string, string>>;\n    /**\n     * Returns a string with instructions on how the LLM output should be\n     * formatted to match the regex pattern.\n     * @returns A string with formatting instructions.\n     */\n    getFormatInstructions(): string;\n}\n"],"mappings":";;;;UAEiBE,YAAAA;;EAAAA,KAAAA,CAAAA,EAAAA,MAAAA;AAOjB;;;;AACyC,UADxBC,iBAAAA,CACwB;EAQpBE,KAAAA,EAAAA,MAAAA,GARDD,MAQY,GARHF,YAQG;EAAA,UAAA,EAAA,MAAA,EAAA;EAAA,gBAA0BI,CAAAA,EAAAA,MAAAA;;;;;;AAkBjCC,cAlBJF,WAAAA,SAAoBL,gBAkBhBO,CAlBiCD,MAkBjCC,CAAAA,MAAAA,EAAAA,MAAAA,CAAAA,CAAAA,CAAAA;EAAO,OAlBSP,OAAAA,CAAAA,CAAAA,EAAAA,MAAAA;EAAgB,YAAA,EAAA,MAAA,EAAA;;uBAIhCC;kBACLG;;;sBAGID;8BACQC;;;;;;;;;uBASPG,QAAQD"}