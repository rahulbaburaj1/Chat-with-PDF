{"version":3,"file":"base.d.ts","names":["EmbeddingsInterface","ChainValues","CallbackManagerForChainRun","Callbacks","BaseCallbackConfig","PairwiseStringEvaluator","PairwiseStringEvaluatorArgs","StringEvaluator","StringEvaluatorArgs","EmbeddingDistanceType","EmbeddingDistanceEvalChainInput","VectorFunction","getDistanceCalculationFunction","computeEvaluationScore","EmbeddingDistanceEvalChain","Promise","PairwiseEmbeddingDistanceEvalChain"],"sources":["../../../src/evaluation/embedding_distance/base.d.ts"],"sourcesContent":["import type { EmbeddingsInterface } from \"@langchain/core/embeddings\";\nimport { ChainValues } from \"@langchain/core/utils/types\";\nimport { CallbackManagerForChainRun, Callbacks, BaseCallbackConfig } from \"@langchain/core/callbacks/manager\";\nimport { PairwiseStringEvaluator, PairwiseStringEvaluatorArgs, StringEvaluator, StringEvaluatorArgs } from \"../base.js\";\n/**\n *\n * Embedding Distance Metric.\n *\n * COSINE: Cosine distance metric.\n * EUCLIDEAN: Euclidean distance metric.\n * MANHATTAN: Manhattan distance metric.\n * CHEBYSHEV: Chebyshev distance metric.\n * HAMMING: Hamming distance metric.\n */\nexport type EmbeddingDistanceType = \"cosine\" | \"euclidean\" | \"manhattan\" | \"chebyshev\";\n/**\n * Embedding Distance Evaluation Chain Input.\n */\nexport interface EmbeddingDistanceEvalChainInput {\n    /**\n     * The embedding objects to vectorize the outputs.\n     */\n    embedding?: EmbeddingsInterface;\n    /**\n     * The distance metric to use\n     * for comparing the embeddings.\n     */\n    distanceMetric?: EmbeddingDistanceType;\n}\ntype VectorFunction = (xVector: number[], yVector: number[]) => number;\n/**\n * Get the distance function for the given distance type.\n * @param distance The distance type.\n * @return The distance function.\n */\nexport declare function getDistanceCalculationFunction(distanceType: EmbeddingDistanceType): VectorFunction;\n/**\n * Compute the score based on the distance metric.\n * @param vectors The input vectors.\n * @param distanceMetric The distance metric.\n * @return The computed score.\n */\nexport declare function computeEvaluationScore(vectors: number[][], distanceMetric: EmbeddingDistanceType): number;\n/**\n * Use embedding distances to score semantic difference between\n * a prediction and reference.\n */\nexport declare class EmbeddingDistanceEvalChain extends StringEvaluator implements EmbeddingDistanceEvalChainInput {\n    requiresReference: boolean;\n    requiresInput: boolean;\n    outputKey: string;\n    embedding?: EmbeddingsInterface;\n    distanceMetric: EmbeddingDistanceType;\n    constructor(fields: EmbeddingDistanceEvalChainInput);\n    _chainType(): \"embedding_chebyshev_distance\" | \"embedding_cosine_distance\" | \"embedding_euclidean_distance\" | \"embedding_manhattan_distance\";\n    _evaluateStrings(args: StringEvaluatorArgs, config: Callbacks | BaseCallbackConfig | undefined): Promise<ChainValues>;\n    get inputKeys(): string[];\n    get outputKeys(): string[];\n    _call(values: ChainValues, _runManager: CallbackManagerForChainRun | undefined): Promise<ChainValues>;\n}\n/**\n * Use embedding distances to score semantic difference between two predictions.\n */\nexport declare class PairwiseEmbeddingDistanceEvalChain extends PairwiseStringEvaluator implements EmbeddingDistanceEvalChainInput {\n    requiresReference: boolean;\n    requiresInput: boolean;\n    outputKey: string;\n    embedding?: EmbeddingsInterface;\n    distanceMetric: EmbeddingDistanceType;\n    constructor(fields: EmbeddingDistanceEvalChainInput);\n    _chainType(): \"pairwise_embedding_chebyshev_distance\" | \"pairwise_embedding_cosine_distance\" | \"pairwise_embedding_euclidean_distance\" | \"pairwise_embedding_manhattan_distance\";\n    _evaluateStringPairs(args: PairwiseStringEvaluatorArgs, config?: Callbacks | BaseCallbackConfig): Promise<ChainValues>;\n    get inputKeys(): string[];\n    get outputKeys(): string[];\n    _call(values: ChainValues, _runManager: CallbackManagerForChainRun | undefined): Promise<ChainValues>;\n}\nexport {};\n"],"mappings":";;;;;;;;;AAcA;AAIA;;;;AAS0C;AACzC;AAOD;AAAsD,KArB1CS,qBAAAA,GAqB0C,QAAA,GAAA,WAAA,GAAA,WAAA,GAAA,WAAA;;;AAAqD;AAOnFI,UAxBPH,+BAAAA,CAwBmED;EAK/DK;;;EAIc,SACfL,CAAAA,EA9BJT,mBA8BIS;EAAqB;;;;EAG6C,cAAuBR,CAAAA,EA5BxFQ,qBA4BwFR;;KA1BxGU,cAAAA,GA6BaV,CAAAA,OAAAA,EAAAA,MAAAA,EAAAA,EAAAA,OAAAA,EAAAA,MAAAA,EAAAA,EAAAA,GAAAA,MAAAA;;;;;;AAXgG,iBAZ1FW,8BAAAA,CAY0F,YAAA,EAZ7CH,qBAY6C,CAAA,EAZrBE,cAYqB;AAgBlH;;;;;;AAQqER,iBA7B7CU,sBAAAA,CA6B6CV,OAAAA,EAAAA,MAAAA,EAAAA,EAAAA,EAAAA,cAAAA,EA7BeM,qBA6BfN,CAAAA,EAAAA,MAAAA;;;;;AAGzBD,cA3BvBY,0BAAAA,SAAmCP,eAAAA,YAA2BG,+BA2BvCR,CAAAA;EAA0B,iBAAuBD,EAAAA,OAAAA;EAAW,aAAnBc,EAAAA,OAAAA;EAAO,SAX5BV,EAAAA,MAAAA;EAAuB,SAAYK,CAAAA,EAZnFV,mBAYmFU;EAA+B,cAAA,EAX9GD,qBAW8G;sBAV1GC;;yBAEGF,6BAA6BL,YAAYC,iCAAiCW,QAAQd;;;gBAG3FA,0BAA0BC,yCAAyCa,QAAQd;;;;;cAKxEe,kCAAAA,SAA2CX,uBAAAA,YAAmCK;;;;cAInFV;kBACIS;sBACIC;;6BAEOJ,sCAAsCH,YAAYC,qBAAqBW,QAAQd;;;gBAG5FA,0BAA0BC,yCAAyCa,QAAQd"}