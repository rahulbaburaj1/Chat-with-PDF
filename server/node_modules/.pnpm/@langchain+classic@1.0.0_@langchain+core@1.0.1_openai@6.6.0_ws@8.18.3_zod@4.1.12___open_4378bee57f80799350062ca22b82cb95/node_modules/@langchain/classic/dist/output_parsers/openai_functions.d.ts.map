{"version":3,"file":"openai_functions.d.ts","names":["JsonSchema7ObjectType","Operation","JSONPatchOperation","ChatGeneration","Generation","BaseCumulativeTransformOutputParser","BaseCumulativeTransformOutputParserInput","BaseLLMOutputParser","Optional","FunctionParameters","OutputFunctionsParser","Promise","JsonOutputFunctionsParser","Output","JsonKeyOutputFunctionsParser","T"],"sources":["../../src/output_parsers/openai_functions.d.ts"],"sourcesContent":["import { type JsonSchema7ObjectType } from \"@langchain/core/utils/json_schema\";\nimport { type Operation as JSONPatchOperation } from \"@langchain/core/utils/json_patch\";\nimport { ChatGeneration, Generation } from \"@langchain/core/outputs\";\nimport { BaseCumulativeTransformOutputParser, type BaseCumulativeTransformOutputParserInput, BaseLLMOutputParser } from \"@langchain/core/output_parsers\";\nimport { Optional } from \"../types/type-utils.js\";\n/**\n * Represents optional parameters for a function in a JSON Schema.\n */\nexport type FunctionParameters = Optional<JsonSchema7ObjectType, \"additionalProperties\">;\n/**\n * Class for parsing the output of an LLM. Can be configured to return\n * only the arguments of the function call in the output.\n */\nexport declare class OutputFunctionsParser extends BaseLLMOutputParser<string> {\n    static lc_name(): string;\n    lc_namespace: string[];\n    lc_serializable: boolean;\n    argsOnly: boolean;\n    constructor(config?: {\n        argsOnly?: boolean;\n    });\n    /**\n     * Parses the output and returns a string representation of the function\n     * call or its arguments.\n     * @param generations The output of the LLM to parse.\n     * @returns A string representation of the function call or its arguments.\n     */\n    parseResult(generations: Generation[] | ChatGeneration[]): Promise<string>;\n}\n/**\n * Class for parsing the output of an LLM into a JSON object. Uses an\n * instance of `OutputFunctionsParser` to parse the output.\n */\nexport declare class JsonOutputFunctionsParser<Output extends object = object> extends BaseCumulativeTransformOutputParser<Output> {\n    static lc_name(): string;\n    lc_namespace: string[];\n    lc_serializable: boolean;\n    outputParser: OutputFunctionsParser;\n    argsOnly: boolean;\n    constructor(config?: {\n        argsOnly?: boolean;\n    } & BaseCumulativeTransformOutputParserInput);\n    protected _diff(prev: unknown | undefined, next: unknown): JSONPatchOperation[] | undefined;\n    parsePartialResult(generations: ChatGeneration[]): Promise<Output | undefined>;\n    /**\n     * Parses the output and returns a JSON object. If `argsOnly` is true,\n     * only the arguments of the function call are returned.\n     * @param generations The output of the LLM to parse.\n     * @returns A JSON object representation of the function call or its arguments.\n     */\n    parseResult(generations: Generation[] | ChatGeneration[]): Promise<Output>;\n    parse(text: string): Promise<Output>;\n    getFormatInstructions(): string;\n}\n/**\n * Class for parsing the output of an LLM into a JSON object and returning\n * a specific attribute. Uses an instance of `JsonOutputFunctionsParser`\n * to parse the output.\n */\nexport declare class JsonKeyOutputFunctionsParser<T = object> extends BaseLLMOutputParser<T> {\n    static lc_name(): string;\n    lc_namespace: string[];\n    lc_serializable: boolean;\n    outputParser: JsonOutputFunctionsParser<object>;\n    attrName: string;\n    get lc_aliases(): {\n        attrName: string;\n    };\n    constructor(fields: {\n        attrName: string;\n    });\n    /**\n     * Parses the output and returns a specific attribute of the parsed JSON\n     * object.\n     * @param generations The output of the LLM to parse.\n     * @returns The value of a specific attribute of the parsed JSON object.\n     */\n    parseResult(generations: Generation[] | ChatGeneration[]): Promise<T>;\n}\n"],"mappings":";;;;;;;;;;AAQA;AAA8B,KAAlBS,kBAAAA,GAAqBD,QAAH,CAAYR,qBAAZ,EAAA,sBAAA,CAAA;;;AAAW;AAKzC;AAA0C,cAArBU,qBAAAA,SAA8BH,mBAAT,CAAA,MAAA,CAAA,CAAA;EAAA,OAcbH,OAAAA,CAAAA,CAAAA,EAAAA,MAAAA;EAAU,YAAKD,EAAAA,MAAAA,EAAAA;EAAc,eAAKQ,EAAAA,OAAAA;EAAO,QAdnBJ,EAAAA,OAAAA;EAAmB,WAAA,CAAA,MAoBxB,CApBwB,EAAA;IAoBjDK,QAAAA,CAAAA,EAAAA,OAAAA;EAAyB,CAAA;EAAA;;;;;;EAUuB,WAAdD,CAAAA,WAAAA,EAhB1BP,UAgB0BO,EAAAA,GAhBXR,cAgBWQ,EAAAA,CAAAA,EAhBQA,OAgBRA,CAAAA,MAAAA,CAAAA;;;;;;AAQ9BA,cAlBJC,yBAkBID,CAAAA,eAAAA,MAAAA,GAAAA,MAAAA,CAAAA,SAlB8DN,mCAkB9DM,CAlBkGE,MAkBlGF,CAAAA,CAAAA;EAAO,OAlBuDN,OAAAA,CAAAA,CAAAA,EAAAA,MAAAA;EAAmC,YAAA,EAAA,MAAA,EAAA;EA0BrGS,eAAAA,EAAAA,OAAAA;EAA4B,YAAA,EAtB/BJ,qBAsB+B;EAAA,QAAyCK,EAAAA,OAAAA;EAAC,WAIzEH,CAAAA,MAc0BT,CAd1BS,EAAAA;IAcWR,QAAAA,CAAAA,EAAAA,OAAAA;EAAU,CAAA,GApC/BE,wCAoCoCH;EAAc,UAAaY,KAAAA,CAAAA,IAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,IAAAA,EAAAA,OAAAA,CAAAA,EAnCRb,SAmCQa,EAAAA,GAAAA,SAAAA;EAAC,kBAATJ,CAAAA,WAAAA,EAlC3BR,cAkC2BQ,EAAAA,CAAAA,EAlCRA,OAkCQA,CAlCAE,MAkCAF,GAAAA,SAAAA,CAAAA;EAAO;AAlBmB;;;;;2BAT5DP,eAAeD,mBAAmBQ,QAAQE;uBAC9CF,QAAQE;;;;;;;;cAQZC,iDAAiDP,oBAAoBQ;;;;gBAIxEH;;;;;;;;;;;;;;2BAcWR,eAAeD,mBAAmBQ,QAAQI"}