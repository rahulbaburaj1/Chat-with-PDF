{"version":3,"file":"index.d.ts","names":["z","BaseLanguageModelInterface","InferInteropZodOutput","InputValues","Comparator","Operator","StructuredQuery","Runnable","RunnableConfig","QueryTransformer","TraverseType","DEFAULT_EXAMPLES","DEFAULT_PREFIX","DEFAULT_SCHEMA","DEFAULT_SUFFIX","EXAMPLE_PROMPT","AsymmetricStructuredOutputParser","AttributeInfo","queryInputSchema","ZodString","ZodOptional","ZodTypeAny","ZodObject","StructuredQueryOutputParser","query","filter","Promise","formatAttributeInfo","QueryConstructorRunnableOptions","QueryConstructorChainOptions","loadQueryConstructorRunnable","Record"],"sources":["../../../src/chains/query_constructor/index.d.ts"],"sourcesContent":["import { z } from \"zod/v3\";\nimport type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport { InferInteropZodOutput, InputValues } from \"@langchain/core/utils/types\";\nimport { Comparator, Operator, StructuredQuery } from \"@langchain/core/structured_query\";\nimport { Runnable, RunnableConfig } from \"@langchain/core/runnables\";\nimport { QueryTransformer, TraverseType } from \"./parser.js\";\nimport { DEFAULT_EXAMPLES, DEFAULT_PREFIX, DEFAULT_SCHEMA, DEFAULT_SUFFIX, EXAMPLE_PROMPT } from \"./prompt.js\";\nimport { AsymmetricStructuredOutputParser } from \"../../output_parsers/structured.js\";\n/**\n * A simple data structure that holds information about an attribute. It\n * is typically used to provide metadata about attributes in other classes\n * or data structures within the LangChain framework.\n */\nexport declare class AttributeInfo {\n    name: string;\n    type: string;\n    description: string;\n    constructor(name: string, type: string, description: string);\n}\nexport { QueryTransformer, type TraverseType };\nexport { DEFAULT_EXAMPLES, DEFAULT_PREFIX, DEFAULT_SCHEMA, DEFAULT_SUFFIX, EXAMPLE_PROMPT, };\ndeclare const queryInputSchema: z.ZodObject<{\n    query: z.ZodString;\n    filter: z.ZodOptional<z.ZodString>;\n}, \"strip\", z.ZodTypeAny, {\n    query: string;\n    filter?: string | undefined;\n}, {\n    query: string;\n    filter?: string | undefined;\n}>;\n/**\n * A class that extends AsymmetricStructuredOutputParser to parse\n * structured query output.\n */\nexport declare class StructuredQueryOutputParser extends AsymmetricStructuredOutputParser<typeof queryInputSchema, StructuredQuery> {\n    lc_namespace: string[];\n    queryTransformer: QueryTransformer;\n    constructor(fields: {\n        allowedComparators: Comparator[];\n        allowedOperators: Operator[];\n    });\n    /**\n     * Processes the output of a structured query.\n     * @param query The query string.\n     * @param filter The filter condition.\n     * @returns A Promise that resolves to a StructuredQuery instance.\n     */\n    outputProcessor({ query, filter }: InferInteropZodOutput<typeof queryInputSchema>): Promise<StructuredQuery>;\n    /**\n     * Creates a new StructuredQueryOutputParser instance from the provided\n     * components.\n     * @param allowedComparators An array of allowed Comparator instances.\n     * @param allowedOperators An array of allowed Operator instances.\n     * @returns A new StructuredQueryOutputParser instance.\n     */\n    static fromComponents(allowedComparators?: Comparator[], allowedOperators?: Operator[]): StructuredQueryOutputParser;\n}\nexport declare function formatAttributeInfo(info: AttributeInfo[]): string;\n/**\n * A type that represents options for the query constructor chain.\n */\nexport type QueryConstructorRunnableOptions = {\n    llm: BaseLanguageModelInterface;\n    documentContents: string;\n    attributeInfo: AttributeInfo[];\n    examples?: InputValues[];\n    allowedComparators?: Comparator[];\n    allowedOperators?: Operator[];\n};\n/** @deprecated */\nexport type QueryConstructorChainOptions = QueryConstructorRunnableOptions;\nexport declare function loadQueryConstructorRunnable(opts: QueryConstructorRunnableOptions\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n): Runnable<any, StructuredQuery, RunnableConfig<Record<string, any>>>;\n"],"mappings":";;;;;;;;;;;;;AAaA;AAO6F;;AAElFA,cATUiB,aAAAA,CASRE;EAAS,IACInB,EAAEmB,MAAAA;EAAS,IAAzBnB,EAAEoB,MAAAA;EAAW,WACXC,EAAAA,MAAAA;EAAU,WAHUC,CAAAA,IAAAA,EAAAA,MAAAA,EAAAA,IAAAA,EAAAA,MAAAA,EAAAA,WAAAA,EAAAA,MAAAA;AAAS;cAA7BJ,gBAcmFA,EAdjElB,CAAAA,CAAEsB,SAc+DJ,CAAAA;EAAgB,KAAEZ,EAbxGN,CAAAA,CAAEmB,SAasGb;EAAe,MAE5GG,EAdVT,CAAAA,CAAEoB,WAcQX,CAdIT,CAAAA,CAAEmB,SAcNV,CAAAA;CAAgB,EAAA,OAEVL,EAfhBJ,CAAAA,CAAEqB,UAecjB,EAAAA;EAAU,KACZC,EAAAA,MAAAA;EAAQ,MAQZmB,CAAAA,EAAAA,MAAAA,GAAAA,SAAAA;CAAK,EAAA;EAAQ,KAAiCN,EAAAA,MAAAA;EAAgB,MAA7ChB,CAAAA,EAAAA,MAAAA,GAAAA,SAAAA;CAAqB,CAAA;;;;;AAbHc,cAApCO,2BAAAA,SAAoCP,gCAAAA,CAAAA,OAAwCE,gBAAxCF,EAA0DV,eAA1DU,CAAAA,CAAAA;EAAgC,YAAA,EAAA,MAAA,EAAA;EAuBjEW,gBAAAA,EArBFlB,gBAqB4BQ;EAItCW,WAAAA,CAAAA,MAAAA,EAAAA;IAA+B,kBAAA,EAvBfxB,UAuBe,EAAA;IAClCH,gBAAAA,EAvBiBI,QAuBjBJ,EAAAA;EAA0B,CAAA;EAEH;;;AAGD;AAG/B;AACA;EAAoD,eAAA,CAAA;IAAA,KAAA;IAAA;EAAA,CAAA,EAxBbC,qBAwBa,CAAA,OAxBgBgB,gBAwBhB,CAAA,CAAA,EAxBoCQ,OAwBpC,CAxB4CpB,eAwB5C,CAAA;EAAA;;;;;AAEzC;;6CAlBoCF,iCAAiCC,aAAakB;;iBAErEI,mBAAAA,OAA0BV;;;;KAItCW,+BAAAA;OACH3B;;iBAEUgB;aACJd;uBACUC;qBACFC;;;KAGXwB,4BAAAA,GAA+BD;iBACnBE,4BAAAA,OAAmCF;;GAExDrB,cAAcD,iBAAiBE,eAAeuB"}