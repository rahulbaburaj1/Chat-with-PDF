{"version":3,"file":"sql.d.cts","names":["BaseLanguageModelInterface","ToolInterface","BaseToolkit","ZeroShotCreatePromptArgs","AgentExecutor","SqlDatabase","SqlCreatePromptArgs","SqlToolkit","createSqlAgent"],"sources":["../../../../src/agents/toolkits/sql/sql.d.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport { type ToolInterface, BaseToolkit } from \"@langchain/core/tools\";\nimport { ZeroShotCreatePromptArgs } from \"../../mrkl/index.js\";\nimport { AgentExecutor } from \"../../executor.js\";\nimport { SqlDatabase } from \"../../../sql_db.js\";\n/**\n * Interface that extends ZeroShotCreatePromptArgs and adds an optional\n * topK parameter for specifying the number of results to return.\n */\nexport interface SqlCreatePromptArgs extends ZeroShotCreatePromptArgs {\n    /** Number of results to return. */\n    topK?: number;\n}\n/**\n * Class that represents a toolkit for working with SQL databases. It\n * initializes SQL tools based on the provided SQL database.\n * @example\n * ```typescript\n * const model = new ChatOpenAI({ model: \"gpt-4o-mini\" });\n * const toolkit = new SqlToolkit(sqlDb, model);\n * const executor = createSqlAgent(model, toolkit);\n * const result = await executor.invoke({ input: 'List the total sales per country. Which country's customers spent the most?' });\n * console.log(`Got output ${result.output}`);\n * ```\n */\nexport declare class SqlToolkit extends BaseToolkit {\n    tools: ToolInterface[];\n    db: SqlDatabase;\n    dialect: string;\n    constructor(db: SqlDatabase, llm: BaseLanguageModelInterface);\n}\nexport declare function createSqlAgent(llm: BaseLanguageModelInterface, toolkit: SqlToolkit, args?: SqlCreatePromptArgs): AgentExecutor;\n"],"mappings":";;;;;;;;;;AASA;AAgBA;AAA+B,UAhBdM,mBAAAA,SAA4BH,wBAgBd,CAAA;EAAA;EACP,IAChBE,CAAAA,EAAAA,MAAAA;;;;AAF2C;AAMnD;;;;;;AAAuI;;;cANlHE,UAAAA,SAAmBL,WAAAA;SAC7BD;MACHI;;kBAEYA,kBAAkBL;;iBAEdQ,cAAAA,MAAoBR,qCAAqCO,mBAAmBD,sBAAsBF"}