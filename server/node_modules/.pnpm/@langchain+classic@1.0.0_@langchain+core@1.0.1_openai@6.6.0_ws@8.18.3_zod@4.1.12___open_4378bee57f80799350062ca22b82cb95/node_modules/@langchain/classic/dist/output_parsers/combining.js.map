{"version":3,"file":"combining.js","names":["fields: BaseOutputParser | CombiningOutputParserFields","input: string","callbacks?: Callbacks","ret: CombinedOutput"],"sources":["../../src/output_parsers/combining.ts"],"sourcesContent":["import { Callbacks } from \"@langchain/core/callbacks/manager\";\nimport { BaseOutputParser } from \"@langchain/core/output_parsers\";\n\n/**\n * Type for the combined output of the CombiningOutputParser class.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type CombinedOutput = Record<string, any>;\n\n/**\n * Interface for the fields required by the CombiningOutputParser class.\n */\nexport interface CombiningOutputParserFields {\n  parsers: BaseOutputParser[];\n}\n\n/**\n * Class to combine multiple output parsers\n * @augments BaseOutputParser\n */\nexport class CombiningOutputParser extends BaseOutputParser<object> {\n  static lc_name() {\n    return \"CombiningOutputParser\";\n  }\n\n  lc_namespace = [\"langchain\", \"output_parsers\", \"combining\"];\n\n  lc_serializable = true;\n\n  parsers: BaseOutputParser[];\n\n  outputDelimiter = \"-----\";\n\n  constructor(fields: CombiningOutputParserFields);\n\n  constructor(...parsers: BaseOutputParser[]);\n\n  constructor(\n    fields: BaseOutputParser | CombiningOutputParserFields,\n    ...parsers: BaseOutputParser[]\n  ) {\n    if (parsers.length > 0 || !(\"parsers\" in fields)) {\n      // eslint-disable-next-line no-param-reassign\n      fields = {\n        parsers: [fields as BaseOutputParser, ...parsers],\n      };\n    }\n    super(fields);\n    this.parsers = fields.parsers;\n  }\n\n  /**\n   * Method to parse an input string using the parsers in the parsers array.\n   * The parsed outputs are combined into a single object and returned.\n   * @param input The input string to parse.\n   * @param callbacks Optional Callbacks object.\n   * @returns A Promise that resolves to a CombinedOutput object.\n   */\n  async parse(input: string, callbacks?: Callbacks): Promise<CombinedOutput> {\n    const inputs = input\n      .trim()\n      .split(\n        new RegExp(`${this.outputDelimiter}Output \\\\d+${this.outputDelimiter}`)\n      )\n      .slice(1);\n    const ret: CombinedOutput = {};\n    for (const [i, p] of this.parsers.entries()) {\n      let parsed;\n      try {\n        let extracted = inputs[i].includes(\"```\")\n          ? inputs[i].trim().split(/```/)[1]\n          : inputs[i].trim();\n        if (extracted.endsWith(this.outputDelimiter)) {\n          extracted = extracted.slice(0, -this.outputDelimiter.length);\n        }\n        parsed = await p.parse(extracted, callbacks);\n      } catch {\n        parsed = await p.parse(input.trim(), callbacks);\n      }\n      Object.assign(ret, parsed);\n    }\n    return ret;\n  }\n\n  /**\n   * Method to get instructions on how to format the LLM output. The\n   * instructions are based on the parsers array and the outputDelimiter.\n   * @returns A string with format instructions.\n   */\n  getFormatInstructions(): string {\n    return `${[\n      `Return the following ${this.parsers.length} outputs, each formatted as described below. Include the delimiter characters \"${this.outputDelimiter}\" in your response:`,\n      ...this.parsers.map(\n        (p, i) =>\n          `${this.outputDelimiter}Output ${i + 1}${this.outputDelimiter}\\n${p\n            .getFormatInstructions()\n            .trim()}\\n${this.outputDelimiter}`\n      ),\n    ].join(\"\\n\\n\")}\\n`;\n  }\n}\n"],"mappings":";;;;;;;AAoBA,IAAa,wBAAb,cAA2C,iBAAyB;CAClE,OAAO,UAAU;AACf,SAAO;CACR;CAED,eAAe;EAAC;EAAa;EAAkB;CAAY;CAE3D,kBAAkB;CAElB;CAEA,kBAAkB;CAMlB,YACEA,QACA,GAAG,SACH;AACA,MAAI,QAAQ,SAAS,KAAK,EAAE,aAAa,SAEvC,SAAS,EACP,SAAS,CAAC,QAA4B,GAAG,OAAQ,EAClD;EAEH,MAAM,OAAO;EACb,KAAK,UAAU,OAAO;CACvB;;;;;;;;CASD,MAAM,MAAMC,OAAeC,WAAgD;EACzE,MAAM,SAAS,MACZ,MAAM,CACN,sBACC,IAAI,OAAO,GAAG,KAAK,gBAAgB,WAAW,EAAE,KAAK,iBAAiB,EACvE,CACA,MAAM,EAAE;EACX,MAAMC,MAAsB,CAAE;AAC9B,OAAK,MAAM,CAAC,GAAG,EAAE,IAAI,KAAK,QAAQ,SAAS,EAAE;GAC3C,IAAI;AACJ,OAAI;IACF,IAAI,YAAY,OAAO,GAAG,SAAS,MAAM,GACrC,OAAO,GAAG,MAAM,CAAC,MAAM,MAAM,CAAC,KAC9B,OAAO,GAAG,MAAM;AACpB,QAAI,UAAU,SAAS,KAAK,gBAAgB,EAC1C,YAAY,UAAU,MAAM,GAAG,CAAC,KAAK,gBAAgB,OAAO;IAE9D,SAAS,MAAM,EAAE,MAAM,WAAW,UAAU;GAC7C,QAAO;IACN,SAAS,MAAM,EAAE,MAAM,MAAM,MAAM,EAAE,UAAU;GAChD;GACD,OAAO,OAAO,KAAK,OAAO;EAC3B;AACD,SAAO;CACR;;;;;;CAOD,wBAAgC;AAC9B,SAAO,GAAG,CACR,CAAC,qBAAqB,EAAE,KAAK,QAAQ,OAAO,+EAA+E,EAAE,KAAK,gBAAgB,mBAAmB,CAAC,EACtK,GAAG,KAAK,QAAQ,IACd,CAAC,GAAG,MACF,GAAG,KAAK,gBAAgB,OAAO,EAAE,IAAI,IAAI,KAAK,gBAAgB,EAAE,EAAE,EAC/D,uBAAuB,CACvB,MAAM,CAAC,EAAE,EAAE,KAAK,iBAAiB,CACvC,AACF,EAAC,KAAK,OAAO,CAAC,EAAE,CAAC;CACnB;AACF"}