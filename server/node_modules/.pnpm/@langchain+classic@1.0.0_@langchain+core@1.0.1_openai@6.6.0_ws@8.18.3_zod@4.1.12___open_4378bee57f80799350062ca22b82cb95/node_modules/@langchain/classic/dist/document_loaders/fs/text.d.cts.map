{"version":3,"file":"text.d.cts","names":["readFile","ReadFileT","Document","BaseDocumentLoader","TextLoader","Blob","Promise"],"sources":["../../../src/document_loaders/fs/text.d.ts"],"sourcesContent":["import type { readFile as ReadFileT } from \"node:fs/promises\";\nimport { Document } from \"@langchain/core/documents\";\nimport { BaseDocumentLoader } from \"@langchain/core/document_loaders/base\";\n/**\n * A class that extends the `BaseDocumentLoader` class. It represents a\n * document loader that loads documents from a text file. The `load()`\n * method is implemented to read the text from the file or blob, parse it\n * using the `parse()` method, and create a `Document` instance for each\n * parsed page. The metadata includes the source of the text (file path or\n * blob) and, if there are multiple pages, the line number of each page.\n * @example\n * ```typescript\n * const loader = new TextLoader(\"src/document_loaders/example_data/example.txt\");\n * const docs = await loader.load();\n * ```\n */\nexport declare class TextLoader extends BaseDocumentLoader {\n    filePathOrBlob: string | Blob;\n    constructor(filePathOrBlob: string | Blob);\n    /**\n     * A protected method that takes a `raw` string as a parameter and returns\n     * a promise that resolves to an array containing the raw text as a single\n     * element.\n     * @param raw The raw text to be parsed.\n     * @returns A promise that resolves to an array containing the raw text as a single element.\n     */\n    protected parse(raw: string): Promise<string[]>;\n    /**\n     * A method that loads the text file or blob and returns a promise that\n     * resolves to an array of `Document` instances. It reads the text from\n     * the file or blob using the `readFile` function from the\n     * `node:fs/promises` module or the `text()` method of the blob. It then\n     * parses the text using the `parse()` method and creates a `Document`\n     * instance for each parsed page. The metadata includes the source of the\n     * text (file path or blob) and, if there are multiple pages, the line\n     * number of each page.\n     * @returns A promise that resolves to an array of `Document` instances.\n     */\n    load(): Promise<Document[]>;\n    /**\n     * A static method that imports the `readFile` function from the\n     * `node:fs/promises` module. It is used to dynamically import the\n     * function when needed. If the import fails, it throws an error\n     * indicating that the `fs/promises` module is not available in the\n     * current environment.\n     * @returns A promise that resolves to an object containing the `readFile` function from the `node:fs/promises` module.\n     */\n    static imports(): Promise<{\n        readFile: typeof ReadFileT;\n    }>;\n}\n"],"mappings":";;;;;;;;AAgBA;;;;;;;;;;AAA0D;cAArCI,UAAAA,SAAmBD,kBAAAA;2BACXE;uCACYA;;;;;;;;gCAQPC;;;;;;;;;;;;UAYtBA,QAAQJ;;;;;;;;;oBASEI;qBACGL"}