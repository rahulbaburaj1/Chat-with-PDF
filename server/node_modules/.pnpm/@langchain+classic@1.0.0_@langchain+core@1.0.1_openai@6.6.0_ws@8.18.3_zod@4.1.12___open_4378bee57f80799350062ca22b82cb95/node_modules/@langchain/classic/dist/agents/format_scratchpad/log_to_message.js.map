{"version":3,"file":"log_to_message.js","names":["intermediateSteps: AgentStep[]","thoughts: BaseMessage[]"],"sources":["../../../src/agents/format_scratchpad/log_to_message.ts"],"sourcesContent":["import type { AgentStep } from \"@langchain/core/agents\";\nimport {\n  type BaseMessage,\n  AIMessage,\n  HumanMessage,\n} from \"@langchain/core/messages\";\nimport { renderTemplate } from \"@langchain/core/prompts\";\n\nexport function formatLogToMessage(\n  intermediateSteps: AgentStep[],\n  templateToolResponse = \"{observation}\"\n): BaseMessage[] {\n  // Get all input variables, if there is more than one, throw an error.\n  const matches = [...templateToolResponse.matchAll(/{([^}]*)}/g)];\n  const stringsInsideBrackets = matches.map((match) => match[1]);\n  if (stringsInsideBrackets.length > 1) {\n    throw new Error(\n      `templateToolResponse must contain one input variable: ${templateToolResponse}`\n    );\n  }\n\n  const thoughts: BaseMessage[] = [];\n\n  for (const step of intermediateSteps) {\n    thoughts.push(new AIMessage(step.action.log));\n    thoughts.push(\n      new HumanMessage(\n        renderTemplate(templateToolResponse, \"f-string\", {\n          [stringsInsideBrackets[0]]: step.observation,\n        })\n      )\n    );\n  }\n  return thoughts;\n}\n"],"mappings":";;;;;;;AAQA,SAAgB,mBACdA,mBACA,uBAAuB,iBACR;CAEf,MAAM,UAAU,CAAC,GAAG,qBAAqB,SAAS,aAAa,AAAC;CAChE,MAAM,wBAAwB,QAAQ,IAAI,CAAC,UAAU,MAAM,GAAG;AAC9D,KAAI,sBAAsB,SAAS,EACjC,OAAM,IAAI,MACR,CAAC,sDAAsD,EAAE,sBAAsB;CAInF,MAAMC,WAA0B,CAAE;AAElC,MAAK,MAAM,QAAQ,mBAAmB;EACpC,SAAS,KAAK,IAAI,UAAU,KAAK,OAAO,KAAK;EAC7C,SAAS,KACP,IAAI,aACF,eAAe,sBAAsB,YAAY,GAC9C,sBAAsB,KAAK,KAAK,YAClC,EAAC,EAEL;CACF;AACD,QAAO;AACR"}