{"version":3,"file":"load.js","names":["loadChainFromFile: FileLoader<BaseChain>","file: string","path: string","values: LoadValues","uri: string"],"sources":["../../src/chains/load.ts"],"sourcesContent":["import { BaseChain } from \"./base.js\";\nimport { loadFromHub } from \"../util/hub.js\";\nimport { FileLoader, LoadValues, loadFromFile } from \"../util/load.js\";\nimport { parseFileConfig } from \"../util/parse.js\";\n\nconst loadChainFromFile: FileLoader<BaseChain> = async (\n  file: string,\n  path: string,\n  values: LoadValues = {}\n) => {\n  const serialized = parseFileConfig(file, path);\n  return BaseChain.deserialize(serialized, values);\n};\n\n/**\n * Load a chain from {@link https://github.com/hwchase17/langchain-hub | LangchainHub} or local filesystem.\n *\n * @example\n * Loading from LangchainHub:\n * ```ts\n * import { loadChain } from \"@langchain/classic/chains/load\";\n * const chain = await loadChain(\"lc://chains/hello-world/chain.json\");\n * const res = await chain.call({ topic: \"my favorite color\" });\n * ```\n *\n * @example\n * Loading from local filesystem:\n * ```ts\n * import { loadChain } from \"@langchain/classic/chains/load\";\n * const chain = await loadChain(\"/path/to/chain.json\");\n * ```\n */\nexport const loadChain = async (\n  uri: string,\n  values: LoadValues = {}\n): Promise<BaseChain> => {\n  const hubResult = await loadFromHub(\n    uri,\n    loadChainFromFile,\n    \"chains\",\n    new Set([\"json\", \"yaml\"]),\n    values\n  );\n  if (hubResult) {\n    return hubResult;\n  }\n\n  return loadFromFile(uri, loadChainFromFile, values);\n};\n"],"mappings":";;;;;;;;;AAKA,MAAMA,oBAA2C,OAC/CC,MACAC,MACAC,SAAqB,CAAE,MACpB;CACH,MAAM,aAAa,gBAAgB,MAAM,KAAK;AAC9C,QAAO,UAAU,YAAY,YAAY,OAAO;AACjD;;;;;;;;;;;;;;;;;;;AAoBD,MAAa,YAAY,OACvBC,KACAD,SAAqB,CAAE,MACA;CACvB,MAAM,YAAY,MAAM,YACtB,KACA,mBACA,UACA,IAAI,IAAI,CAAC,QAAQ,MAAO,IACxB,OACD;AACD,KAAI,UACF,QAAO;AAGT,QAAO,aAAa,KAAK,mBAAmB,OAAO;AACpD"}