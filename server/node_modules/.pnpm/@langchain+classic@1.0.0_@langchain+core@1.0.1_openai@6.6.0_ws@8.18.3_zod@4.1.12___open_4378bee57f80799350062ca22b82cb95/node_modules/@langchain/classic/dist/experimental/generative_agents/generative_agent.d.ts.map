{"version":3,"file":"generative_agent.d.ts","names":["BaseLanguageModelInterface","PromptTemplate","ChainValues","CallbackManagerForChainRun","Callbacks","LLMChain","GenerativeAgentMemory","BaseChain","GenerativeAgentConfig","GenerativeAgent","Promise","Date","Record"],"sources":["../../../src/experimental/generative_agents/generative_agent.d.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport { PromptTemplate } from \"@langchain/core/prompts\";\nimport { ChainValues } from \"@langchain/core/utils/types\";\nimport { CallbackManagerForChainRun, Callbacks } from \"@langchain/core/callbacks/manager\";\nimport { LLMChain } from \"../../chains/llm_chain.js\";\nimport { GenerativeAgentMemory } from \"./generative_agent_memory.js\";\nimport { BaseChain } from \"../../chains/base.js\";\n/**\n * Configuration for the GenerativeAgent class. Defines the character's\n * name, optional age, permanent traits, status, verbosity, and summary\n * refresh seconds.\n */\nexport type GenerativeAgentConfig = {\n    name: string;\n    age?: number;\n    traits: string;\n    status: string;\n    verbose?: boolean;\n    summaryRefreshSeconds?: number;\n};\n/**\n * Implementation of a generative agent that can learn and form new memories over\n * time. It extends the BaseChain class, which is a generic\n * sequence of calls to components, including other chains.\n * @example\n * ```typescript\n * const tommie: GenerativeAgent = new GenerativeAgent(\n *   new OpenAI({ temperature: 0.9, maxTokens: 1500 }),\n *   new GenerativeAgentMemory(\n *     new ChatOpenAI({ model: \"gpt-4o-mini\" }),\n *     new TimeWeightedVectorStoreRetriever({\n *       vectorStore: new MemoryVectorStore(new OpenAIEmbeddings()),\n *       otherScoreKeys: [\"importance\"],\n *       k: 15,\n *     }),\n *     { reflectionThreshold: 8 },\n *   ),\n *   {\n *     name: \"Tommie\",\n *     age: 25,\n *     traits: \"anxious, likes design, talkative\",\n *     status: \"looking for a job\",\n *   },\n * );\n *\n * await tommie.addMemory(\n *   \"Tommie remembers his dog, Bruno, from when he was a kid\",\n *   new Date(),\n * );\n * const summary = await tommie.getSummary({ forceRefresh: true });\n * const response = await tommie.generateDialogueResponse(\n *   \"USER says Hello Tommie, how are you today?\",\n * );\n * ```\n */\nexport declare class GenerativeAgent extends BaseChain {\n    static lc_name(): string;\n    // a character with memory and innate characterisitics\n    name: string; // the character's name\n    age?: number; // the optional age of the character\n    traits: string; // permanent traits to ascribe to the character\n    status: string; // the traits of the character you wish not to change\n    longTermMemory: GenerativeAgentMemory;\n    llm: BaseLanguageModelInterface; // the underlying language model\n    verbose: boolean; // false\n    private summary; // stateful self-summary generated via reflection on the character's memory.\n    private summaryRefreshSeconds;\n    private lastRefreshed; // the last time the character's summary was regenerated\n    // TODO: Add support for daily summaries\n    // private dailySummaries: string[] = []; // summary of the events in the plan that the agent took.\n    _chainType(): string;\n    get inputKeys(): string[];\n    get outputKeys(): string[];\n    constructor(llm: BaseLanguageModelInterface, longTermMemory: GenerativeAgentMemory, config: GenerativeAgentConfig);\n    // LLM methods\n    /**\n     * Parses a newline-separated string into a list of strings.\n     * @param text The string to parse.\n     * @returns An array of strings parsed from the input text.\n     */\n    parseList(text: string): string[];\n    /**\n     * Creates a new LLMChain with the given prompt and the agent's language\n     * model, verbosity, output key, and memory.\n     * @param prompt The prompt to use for the LLMChain.\n     * @returns A new LLMChain instance.\n     */\n    chain(prompt: PromptTemplate): LLMChain;\n    /**\n     * Extracts the observed entity from the given observation.\n     * @param observation The observation to extract the entity from.\n     * @param runManager Optional CallbackManagerForChainRun instance.\n     * @returns The extracted entity as a string.\n     */\n    getEntityFromObservations(observation: string, runManager?: CallbackManagerForChainRun): Promise<string>;\n    /**\n     * Extracts the action of the given entity from the given observation.\n     * @param observation The observation to extract the action from.\n     * @param entityName The name of the entity to extract the action for.\n     * @param runManager Optional CallbackManagerForChainRun instance.\n     * @returns The extracted action as a string.\n     */\n    getEntityAction(observation: string, entityName: string, runManager?: CallbackManagerForChainRun): Promise<string>;\n    /**\n     * Summarizes memories that are most relevant to an observation.\n     * @param observation The observation to summarize related memories for.\n     * @param runManager Optional CallbackManagerForChainRun instance.\n     * @returns The summarized memories as a string.\n     */\n    summarizeRelatedMemories(observation: string, runManager?: CallbackManagerForChainRun): Promise<string>;\n    _call(values: ChainValues, runManager?: CallbackManagerForChainRun): Promise<ChainValues>;\n    private _cleanResponse;\n    /**\n     * Generates a reaction to the given observation.\n     * @param observation The observation to generate a reaction for.\n     * @param now Optional current date.\n     * @returns A boolean indicating whether to continue the dialogue and the output string.\n     */\n    generateReaction(observation: string, now?: Date): Promise<[boolean, string]>;\n    /**\n     * Generates a dialogue response to the given observation.\n     * @param observation The observation to generate a dialogue response for.\n     * @param now Optional current date.\n     * @returns A boolean indicating whether to continue the dialogue and the output string.\n     */\n    generateDialogueResponse(observation: string, now?: Date): Promise<[boolean, string]>;\n    // Agent stateful' summary methods\n    // Each dialog or response prompt includes a header\n    // summarizing the agent's self-description. This is\n    // updated periodically through probing it's memories\n    /**\n     * Gets the agent's summary, which includes the agent's name, age, traits,\n     * and a summary of the agent's core characteristics. The summary is\n     * updated periodically through probing the agent's memories.\n     * @param config Optional configuration object with current date and a boolean to force refresh.\n     * @param runManager Optional CallbackManagerForChainRun instance.\n     * @returns The agent's summary as a string.\n     */\n    getSummary(config?: {\n        now?: Date;\n        forceRefresh?: boolean;\n    }, runManager?: CallbackManagerForChainRun): Promise<string>;\n    /**\n     * Computes the agent's summary by summarizing the agent's core\n     * characteristics given the agent's relevant memories.\n     * @param runManager Optional CallbackManagerForChainRun instance.\n     * @returns The computed summary as a string.\n     */\n    computeAgentSummary(runManager?: CallbackManagerForChainRun): Promise<string>;\n    /**\n     * Returns a full header of the agent's status, summary, and current time.\n     * @param config Optional configuration object with current date and a boolean to force refresh.\n     * @returns The full header as a string.\n     */\n    getFullHeader(config?: {\n        now?: Date;\n        forceRefresh?: boolean;\n    }): string;\n    /**\n     * Adds a memory to the agent's long-term memory.\n     * @param memoryContent The content of the memory to add.\n     * @param now Optional current date.\n     * @param metadata Optional metadata for the memory.\n     * @param callbacks Optional Callbacks instance.\n     * @returns The result of adding the memory to the agent's long-term memory.\n     */\n    addMemory(memoryContent: string, now?: Date, metadata?: Record<string, unknown>, callbacks?: Callbacks): Promise<ChainValues>;\n}\n"],"mappings":";;;;;;;;;;;;AAYA;AA2CA;;AAOoBM,KAlDRE,qBAAAA,GAkDQF;EAAqB,IAChCN,EAAAA,MAAAA;EAA0B,GAUdA,CAAAA,EAAAA,MAAAA;EAA0B,MAAkBM,EAAAA,MAAAA;EAAqB,MAAUE,EAAAA,MAAAA;EAAqB,OAcnGP,CAAAA,EAAAA,OAAAA;EAAc,qBAAGI,CAAAA,EAAAA,MAAAA;CAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;AAhCW;;;;;;;;;;cAAjCI,eAAAA,SAAwBF,SAAAA;;;;;;;kBAOzBD;OACXN;;;;;;;;;;mBAUYA,4CAA4CM,+BAA+BE;;;;;;;;;;;;;;gBAc9EP,iBAAiBI;;;;;;;8DAO6BF,6BAA6BO;;;;;;;;wEAQnBP,6BAA6BO;;;;;;;6DAOxCP,6BAA6BO;gBAC1ER,0BAA0BC,6BAA6BO,QAAQR;;;;;;;;8CAQjCS,OAAOD;;;;;;;sDAOCC,OAAOD;;;;;;;;;;;;;;UAcjDC;;kBAEMR,6BAA6BO;;;;;;;mCAOZP,6BAA6BO;;;;;;;UAOpDC;;;;;;;;;;;yCAW6BA,iBAAiBC,qCAAqCR,YAAYM,QAAQR"}