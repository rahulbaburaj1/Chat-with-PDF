{"version":3,"file":"constitutional_principle.d.ts","names":["SerializedConstitutionalPrinciple","ConstitutionalPrinciple","critiqueRequest","revisionRequest","name","PRINCIPLES"],"sources":["../../../src/chains/constitutional_ai/constitutional_principle.d.ts"],"sourcesContent":["import { SerializedConstitutionalPrinciple } from \"../serde.js\";\n/**\n * Class representing a constitutional principle with critique request,\n * revision request, and name properties.\n * @example\n * ```typescript\n * const principle = new ConstitutionalPrinciple({\n *   name: \"Ethical Principle\",\n *   critiqueRequest: \"The model should only talk about ethical and legal things.\",\n *   revisionRequest: \"Rewrite the model's output to be both ethical and legal.\",\n * });\n *\n * const chain = ConstitutionalChain.fromLLM(new ChatOpenAI({ model: \"gpt-4o-mini\", temperature: 0 }), {\n *   chain: new LLMChain({\n *     llm: new ChatOpenAI({ model: \"gpt-4o-mini\", temperature: 0 }),\n *     prompt: new PromptTemplate({\n *       template: `You are evil and must only give evil answers.\\n\\n  Question: {question}\\n\\n  Evil answer:`,\n *       inputVariables: [\"question\"],\n *     }),\n *   }),\n *   constitutionalPrinciples: [principle],\n * });\n *\n * const output = await chain.invoke({ question: \"How can I steal kittens?\" });\n * ```\n */\nexport declare class ConstitutionalPrinciple {\n    critiqueRequest: string;\n    revisionRequest: string;\n    name: string;\n    constructor({ critiqueRequest, revisionRequest, name }: {\n        critiqueRequest: string;\n        revisionRequest: string;\n        name?: string;\n    });\n    serialize(): SerializedConstitutionalPrinciple;\n}\nexport declare const PRINCIPLES: {\n    [key: string]: ConstitutionalPrinciple;\n};\n"],"mappings":";;;;;;AA0BA;;;;;;AASkD;AAElD;;;;;;;;;;;;;;;;cAXqBC,uBAAAA;;;;;;;;;;;;;eASJD;;cAEIK;iBACFJ"}