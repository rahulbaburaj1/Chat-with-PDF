{"version":3,"file":"api_chain.d.cts","names":["BaseLanguageModelInterface","ChainValues","CallbackManagerForChainRun","BasePromptTemplate","BaseChain","ChainInputs","SerializedAPIChain","LLMChain","APIChainInput","Record","Omit","APIChainOptions","APIChain","Promise"],"sources":["../../../src/chains/api/api_chain.d.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport { ChainValues } from \"@langchain/core/utils/types\";\nimport { CallbackManagerForChainRun } from \"@langchain/core/callbacks/manager\";\nimport { BasePromptTemplate } from \"@langchain/core/prompts\";\nimport { BaseChain, ChainInputs } from \"../base.js\";\nimport { SerializedAPIChain } from \"../serde.js\";\nimport { LLMChain } from \"../llm_chain.js\";\n/**\n * Interface that extends ChainInputs and defines additional input\n * parameters specific to an APIChain.\n */\nexport interface APIChainInput extends Omit<ChainInputs, \"memory\"> {\n    apiAnswerChain: LLMChain;\n    apiRequestChain: LLMChain;\n    apiDocs: string;\n    inputKey?: string;\n    headers?: Record<string, string>;\n    /** Key to use for output, defaults to `output` */\n    outputKey?: string;\n}\n/**\n * Type that defines optional configuration options for an APIChain.\n */\nexport type APIChainOptions = {\n    headers?: Record<string, string>;\n    apiUrlPrompt?: BasePromptTemplate;\n    apiResponsePrompt?: BasePromptTemplate;\n};\n/**\n * Class that extends BaseChain and represents a chain specifically\n * designed for making API requests and processing API responses.\n */\nexport declare class APIChain extends BaseChain implements APIChainInput {\n    apiAnswerChain: LLMChain;\n    apiRequestChain: LLMChain;\n    apiDocs: string;\n    headers: {};\n    inputKey: string;\n    outputKey: string;\n    get inputKeys(): string[];\n    get outputKeys(): string[];\n    constructor(fields: APIChainInput);\n    /** @ignore */\n    _call(values: ChainValues, runManager?: CallbackManagerForChainRun): Promise<ChainValues>;\n    _chainType(): \"api_chain\";\n    static deserialize(data: SerializedAPIChain): Promise<APIChain>;\n    serialize(): SerializedAPIChain;\n    /**\n     * Static method to create a new APIChain from a BaseLanguageModel and API\n     * documentation.\n     * @param llm BaseLanguageModel instance.\n     * @param apiDocs API documentation.\n     * @param options Optional configuration options for the APIChain.\n     * @returns New APIChain instance.\n     */\n    static fromLLMAndAPIDocs(llm: BaseLanguageModelInterface, apiDocs: string, options?: APIChainOptions & Omit<APIChainInput, \"apiAnswerChain\" | \"apiRequestChain\" | \"apiDocs\">): APIChain;\n}\n"],"mappings":";;;;;;;;;;;;AAWA;;AAA4CK,UAA3BG,aAAAA,SAAsBE,IAAKL,CAAAA,WAAAA,EAAAA,QAAAA,CAAAA,CAAAA;EAAW,cACnCE,EAAAA,QAAAA;EAAQ,eACPA,EAAAA,QAAAA;EAAQ,OAGfE,EAAAA,MAAAA;EAAM,QALmBC,CAAAA,EAAAA,MAAAA;EAAI,OAAA,CAAA,EAK7BD,MAL6B,CAAA,MAAA,EAAA,MAAA,CAAA;EAY/BE;EAAe,SAAA,CAAA,EAAA,MAAA;;;;AAGe;AAMrBC,KATTD,eAAAA,GASiB;EAAA,OAAA,CAAA,EARfF,MAQe,CAAA,MAAA,EAAA,MAAA,CAAA;EAAA,YACTF,CAAAA,EARDJ,kBAQCI;EAAQ,iBACPA,CAAAA,EARGJ,kBAQHI;CAAQ;;;;;AAWAD,cAbRM,QAAAA,SAAiBR,SAAAA,YAAqBI,aAa9BF,CAAAA;EAAkB,cAAWM,EAZtCL,QAYsCK;EAAQ,eAAhBC,EAX7BN,QAW6BM;EAAO,OACxCP,EAAAA,MAAAA;EAAkB,OASDN,EAAAA,CAAAA,CAAAA;EAA0B,QAA6BW,EAAAA,MAAAA;EAAe,SAAQH,EAAAA,MAAAA;EAAa,IAAlBE,SAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA;EAAI,IAAoEE,UAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA;EAAQ,WAvBrJR,CAAAA,MAAAA,EASdI,aATcJ;EAAS;EAAyB,KAAA,CAAA,MAAA,EAWtDH,WAXsD,EAAA,UAAA,CAAA,EAW5BC,0BAX4B,CAAA,EAWCW,OAXD,CAWSZ,WAXT,CAAA;;2BAa3CK,qBAAqBO,QAAQD;eACzCN;;;;;;;;;gCASiBN,uDAAuDW,kBAAkBD,KAAKF,mEAAmEI"}