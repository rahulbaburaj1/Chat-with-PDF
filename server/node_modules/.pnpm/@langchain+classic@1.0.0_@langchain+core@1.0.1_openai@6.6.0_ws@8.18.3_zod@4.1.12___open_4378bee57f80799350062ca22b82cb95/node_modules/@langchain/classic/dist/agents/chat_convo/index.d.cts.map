{"version":3,"file":"index.d.cts","names":["BaseLanguageModelInterface","ToolInterface","ChatPromptTemplate","AgentStep","BaseMessage","Optional","Agent","AgentArgs","OutputParserArgs","AgentActionOutputParser","AgentInput","ChatConversationalCreatePromptArgs","ChatConversationalAgentInput","ChatConversationalAgent","Promise"],"sources":["../../../src/agents/chat_convo/index.d.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport type { ToolInterface } from \"@langchain/core/tools\";\nimport { ChatPromptTemplate } from \"@langchain/core/prompts\";\nimport type { AgentStep } from \"@langchain/core/agents\";\nimport { type BaseMessage } from \"@langchain/core/messages\";\nimport { Optional } from \"../../types/type-utils.js\";\nimport { Agent, AgentArgs, OutputParserArgs } from \"../agent.js\";\nimport { AgentActionOutputParser, AgentInput } from \"../types.js\";\n/**\n * Interface defining the structure of arguments used to create a prompt\n * for the ChatConversationalAgent class.\n */\nexport interface ChatConversationalCreatePromptArgs {\n    /** String to put after the list of tools. */\n    systemMessage?: string;\n    /** String to put before the list of tools. */\n    humanMessage?: string;\n    /** List of input variables the final prompt will expect. */\n    inputVariables?: string[];\n    /** Output parser to use for formatting. */\n    outputParser?: AgentActionOutputParser;\n}\n/**\n * Type that extends the AgentInput interface for the\n * ChatConversationalAgent class, making the outputParser property\n * optional.\n */\nexport type ChatConversationalAgentInput = Optional<AgentInput, \"outputParser\">;\n/**\n * Agent for the MRKL chain.\n * @augments Agent\n */\nexport declare class ChatConversationalAgent extends Agent {\n    static lc_name(): string;\n    lc_namespace: string[];\n    ToolType: ToolInterface;\n    constructor(input: ChatConversationalAgentInput);\n    _agentType(): \"chat-conversational-react-description\";\n    observationPrefix(): string;\n    llmPrefix(): string;\n    _stop(): string[];\n    static validateTools(tools: ToolInterface[]): void;\n    /**\n     * Constructs the agent scratchpad based on the agent steps. It returns an\n     * array of base messages representing the thoughts of the agent.\n     * @param steps The agent steps to construct the scratchpad from.\n     * @returns An array of base messages representing the thoughts of the agent.\n     */\n    constructScratchPad(steps: AgentStep[]): Promise<BaseMessage[]>;\n    /**\n     * Returns the default output parser for the ChatConversationalAgent\n     * class. It takes optional fields as arguments to customize the output\n     * parser.\n     * @param fields Optional fields to customize the output parser.\n     * @returns The default output parser for the ChatConversationalAgent class.\n     */\n    static getDefaultOutputParser(fields?: OutputParserArgs & {\n        toolNames: string[];\n    }): AgentActionOutputParser;\n    /**\n     * Create prompt in the style of the ChatConversationAgent.\n     *\n     * @param tools - List of tools the agent will have access to, used to format the prompt.\n     * @param args - Arguments to create the prompt with.\n     * @param args.systemMessage - String to put before the list of tools.\n     * @param args.humanMessage - String to put after the list of tools.\n     * @param args.outputParser - Output parser to use for formatting.\n     */\n    static createPrompt(tools: ToolInterface[], args?: ChatConversationalCreatePromptArgs): ChatPromptTemplate<any, any>;\n    /**\n     * Creates an instance of the ChatConversationalAgent class from a\n     * BaseLanguageModel and a set of tools. It takes optional arguments to\n     * customize the agent.\n     * @param llm The BaseLanguageModel to create the agent from.\n     * @param tools The set of tools to create the agent from.\n     * @param args Optional arguments to customize the agent.\n     * @returns An instance of the ChatConversationalAgent class.\n     */\n    static fromLLMAndTools(llm: BaseLanguageModelInterface, tools: ToolInterface[], args?: ChatConversationalCreatePromptArgs & AgentArgs): ChatConversationalAgent;\n}\n"],"mappings":";;;;;;;;;;;;;AAYA;AAeA;AAAwC,UAfvBW,kCAAAA,CAeuB;EAAA;EAAsB,aAAnBN,CAAAA,EAAAA,MAAAA;EAAQ;EAK9BQ,YAAAA,CAAAA,EAAAA,MAAAA;EAAuB;EAAA,cAG9BZ,CAAAA,EAAAA,MAAAA,EAAAA;EAAa;EACwB,YAKnBA,CAAAA,EArBbQ,uBAqBaR;;;;;;;AA2BuBU,KAzC3CC,4BAAAA,GAA+BP,QAyCYM,CAzCHD,UAyCGC,EAAAA,cAAAA,CAAAA;;;;;AAUyEJ,cA9C3GM,uBAAAA,SAAgCP,KAAAA,CA8C2EC;EAAS,OAAGM,OAAAA,CAAAA,CAAAA,EAAAA,MAAAA;EAAuB,YA9C9GP,EAAAA,MAAAA,EAAAA;EAAK,QAAA,EAG5CL,aAH4C;qBAInCW;;;;;8BAKSX;;;;;;;6BAODE,cAAcW,QAAQV;;;;;;;;yCAQVI;;MAEnCC;;;;;;;;;;6BAUuBR,wBAAwBU,qCAAqCT;;;;;;;;;;8BAU5DF,mCAAmCC,wBAAwBU,qCAAqCJ,YAAYM"}