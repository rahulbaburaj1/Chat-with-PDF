{"version":3,"file":"types.d.ts","names":["ArgumentsType","IdentifierType","StringLiteralType","NumericLiteralType","ArrayLiteralType","ObjectLiteralType","CallExpressionType","BooleanLiteralType","ParsedType","PropertyAssignmentType","MemberExpressionType"],"sources":["../../../src/output_parsers/expression_type_handlers/types.d.ts"],"sourcesContent":["/**\n * Represents the different types of arguments that can be used in\n * LangChain.\n */\nexport type ArgumentsType = IdentifierType | StringLiteralType | NumericLiteralType | ArrayLiteralType | ObjectLiteralType | CallExpressionType | BooleanLiteralType;\n/**\n * Represents the parsed types in LangChain, which can be either an\n * ArgumentsType or a PropertyAssignmentType.\n */\nexport type ParsedType = ArgumentsType | PropertyAssignmentType;\n/**\n * Represents an array literal in LangChain. It has a type property set to\n * 'array_literal' and a values property which is an array of\n * ArgumentsType.\n */\nexport type ArrayLiteralType = {\n    type: \"array_literal\";\n    values: ArgumentsType[];\n};\n/**\n * Represents a boolean literal in LangChain. It has a type property set\n * to 'boolean_literal' and a value property which is a boolean.\n */\nexport type BooleanLiteralType = {\n    type: \"boolean_literal\";\n    value: boolean;\n};\n/**\n * Represents a call expression in LangChain. It has a type property set\n * to 'call_expression', a funcCall property which can be a string or a\n * MemberExpressionType, and an optional args property which is an array\n * of ArgumentsType.\n */\nexport type CallExpressionType = {\n    type: \"call_expression\";\n    funcCall: string | MemberExpressionType;\n    args?: ArgumentsType[];\n};\n/**\n * Represents a numeric literal in LangChain. It has a type property set\n * to 'numeric_literal' and a value property which is a number.\n */\nexport type NumericLiteralType = {\n    type: \"numeric_literal\";\n    value: number;\n};\n/**\n * Represents an object literal in LangChain. It has a type property set\n * to 'object_literal' and a values property which is an array of\n * PropertyAssignmentType.\n */\nexport type ObjectLiteralType = {\n    type: \"object_literal\";\n    values: PropertyAssignmentType[];\n};\n/**\n * Represents a member expression in LangChain. It has a type property set\n * to 'member_expression', an identifier property which is a string, and a\n * property property which is also a string.\n */\nexport type MemberExpressionType = {\n    type: \"member_expression\";\n    identifier: string;\n    property: string;\n};\n/**\n * Represents a property assignment in LangChain. It has a type property\n * set to 'property_assignment', an identifier property which is a string,\n * and a value property which is an ArgumentsType.\n */\nexport type PropertyAssignmentType = {\n    type: \"property_assignment\";\n    identifier: string;\n    value: ArgumentsType;\n};\n/**\n * Represents a string literal in LangChain. It has a type property set to\n * 'string_literal' and a value property which is a string.\n */\nexport type StringLiteralType = {\n    type: \"string_literal\";\n    value: string;\n};\n/**\n * Represents an identifier in LangChain. It has a type property set to\n * 'identifier' and a value property which is a string.\n */\nexport type IdentifierType = {\n    type: \"identifier\";\n    value: string;\n};\n"],"mappings":";;AAIA;;;AAA6CE,KAAjCF,aAAAA,GAAgBC,cAAiBC,GAAAA,iBAAAA,GAAoBC,kBAApBD,GAAyCE,gBAAzCF,GAA4DG,iBAA5DH,GAAgFI,kBAAhFJ,GAAqGK,kBAArGL;;;;;AAAqGK,KAKtIC,UAAAA,GAAaR,aALyHO,GAKzGE,sBALyGF;AAAkB;AAKpK;;;;AAA+D,KAMnDH,gBAAAA,GANmD;EAMnDA,IAAAA,EAAAA,eAAgB;EAQhBG,MAAAA,EANAP,aAMkB,EAAA;AAU9B,CAAA;;;;AAGwB;AAMZG,KAnBAI,kBAAAA,GAmBkB;EASlBF,IAAAA,EAAAA,iBAAiB;EASjBK,KAAAA,EAAAA,OAAAA;AAUZ,CAAA;AASA;AAQA;;;;;KAtDYJ,kBAAAA;;qBAEWI;SACZV;;;;;;KAMCG,kBAAAA;;;;;;;;;KASAE,iBAAAA;;UAEAI;;;;;;;KAOAC,oBAAAA;;;;;;;;;;KAUAD,sBAAAA;;;SAGDT;;;;;;KAMCE,iBAAAA;;;;;;;;KAQAD,cAAAA"}