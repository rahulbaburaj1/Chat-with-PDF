{"version":3,"file":"factory.d.ts","names":["NodeHandler","ParsedType","ExpressionNode","CallExpression","MasterHandler","Promise"],"sources":["../../../src/output_parsers/expression_type_handlers/factory.d.ts"],"sourcesContent":["import { NodeHandler } from \"./base.js\";\nimport { ParsedType } from \"./types.js\";\nimport type { ExpressionNode, CallExpression } from \"../../types/expression-parser.js\";\n/**\n * The MasterHandler class is responsible for managing a collection of\n * node handlers in the LangChain Expression Language. Each node handler\n * is capable of handling a specific type of node in the expression\n * language. The MasterHandler class uses these node handlers to process\n * nodes in the expression language.\n */\nexport declare class MasterHandler extends NodeHandler {\n    nodeHandlers: NodeHandler[];\n    accepts(node: ExpressionNode): Promise<ExpressionNode | boolean>;\n    /**\n     * This method is responsible for handling a node. It iterates over the\n     * collection of node handlers and uses the first handler that accepts the\n     * node to handle it. If no handler accepts the node, the method throws an\n     * error.\n     * @param node The node to be handled.\n     * @returns The result of the node handling, or throws an error if no handler can handle the node.\n     */\n    handle(node: CallExpression): Promise<ParsedType>;\n    /**\n     * This static method creates an instance of the MasterHandler class and\n     * initializes it with instances of all the node handlers.\n     * @returns An instance of the MasterHandler class.\n     */\n    static createMasterHandler(): MasterHandler;\n}\n"],"mappings":";;;;;;;;AAUA;;;;;AAEmCK,cAFdD,aAAAA,SAAsBJ,WAAAA,CAERK;EAAO,YASzBF,EAVCH,WAUDG,EAAAA;EAAc,OAAWF,CAAAA,IAAAA,EATxBC,cASwBD,CAAAA,EATPI,OASOJ,CATCC,cASDD,GAAAA,OAAAA,CAAAA;EAAU;;;AAXE;;;;;eAWrCE,iBAAiBE,QAAQJ;;;;;;gCAMRG"}