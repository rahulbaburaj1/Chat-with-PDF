{"version":3,"file":"webbrowser.cjs","names":["inputs: string","html: string","baseUrl: string","summary: boolean","elem: any","h: Headers","config: RequestConfig","fetchOptions: RequestInit","Tool","RecursiveCharacterTextSplitter","runManager?: CallbackManagerForToolRun","Document","MemoryVectorStore","formatDocumentsAsString","RunnableSequence","StringOutputParser"],"sources":["../../src/tools/webbrowser.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport { Document } from \"@langchain/core/documents\";\nimport type { EmbeddingsInterface } from \"@langchain/core/embeddings\";\n\nimport * as cheerio from \"cheerio\";\nimport {\n  CallbackManager,\n  CallbackManagerForToolRun,\n} from \"@langchain/core/callbacks/manager\";\n\nimport { Tool, ToolParams } from \"@langchain/core/tools\";\nimport { RunnableSequence } from \"@langchain/core/runnables\";\nimport { StringOutputParser } from \"@langchain/core/output_parsers\";\nimport {\n  RecursiveCharacterTextSplitter,\n  TextSplitter,\n} from \"@langchain/textsplitters\";\nimport { MemoryVectorStore } from \"../vectorstores/memory.js\";\n\nimport { formatDocumentsAsString } from \"../util/document.js\";\n\nexport const parseInputs = (inputs: string): [string, string] => {\n  const [baseUrl, task] = inputs.split(\",\").map((input) => {\n    let t = input.trim();\n    t = t.startsWith('\"') ? t.slice(1) : t;\n    t = t.endsWith('\"') ? t.slice(0, -1) : t;\n    // it likes to put / at the end of urls, wont matter for task\n    t = t.endsWith(\"/\") ? t.slice(0, -1) : t;\n    return t.trim();\n  });\n\n  return [baseUrl, task];\n};\n\nexport const getText = (\n  html: string,\n  baseUrl: string,\n  summary: boolean\n): string => {\n  // scriptingEnabled so noscript elements are parsed\n  const $ = cheerio.load(html, { scriptingEnabled: true });\n\n  let text = \"\";\n\n  // lets only get the body if its a summary, dont need to summarize header or footer etc\n  const rootElement = summary ? \"body \" : \"*\";\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  $(`${rootElement}:not(style):not(script):not(svg)`).each((_i, elem: any) => {\n    // we dont want duplicated content as we drill down so remove children\n    let content = $(elem).clone().children().remove().end().text().trim();\n    const $el = $(elem);\n\n    // if its an ahref, print the content and url\n    let href = $el.attr(\"href\");\n    if ($el.prop(\"tagName\")?.toLowerCase() === \"a\" && href) {\n      if (!href.startsWith(\"http\")) {\n        try {\n          href = new URL(href, baseUrl).toString();\n        } catch {\n          // if this fails thats fine, just no url for this\n          href = \"\";\n        }\n      }\n\n      const imgAlt = $el.find(\"img[alt]\").attr(\"alt\")?.trim();\n      if (imgAlt) {\n        content += ` ${imgAlt}`;\n      }\n\n      text += ` [${content}](${href})`;\n    }\n    // otherwise just print the content\n    else if (content !== \"\") {\n      text += ` ${content}`;\n    }\n  });\n\n  return text.trim().replace(/\\n+/g, \" \");\n};\n\nconst getHtml = async (baseUrl: string, h: Headers, config: RequestConfig) => {\n  const domain = new URL(baseUrl).hostname;\n\n  const headers = { ...h };\n  // these appear to be positional, which means they have to exist in the headers passed in\n  headers.Host = domain;\n  headers[\"Alt-Used\"] = domain;\n\n  let htmlResponse;\n  try {\n    const fetchOptions: RequestInit = {\n      method: \"GET\",\n      headers,\n      credentials: config.withCredentials ? \"include\" : \"same-origin\",\n      ...config,\n    };\n\n    htmlResponse = await fetch(baseUrl, fetchOptions);\n\n    if (!htmlResponse.ok) {\n      throw new Error(`http response ${htmlResponse.status}`);\n    }\n  } catch (e) {\n    if (\n      e &&\n      typeof e === \"object\" &&\n      \"message\" in e &&\n      typeof e.message === \"string\" &&\n      e.message.includes(\"http response\")\n    ) {\n      throw e;\n    }\n    throw e;\n  }\n\n  const allowedContentTypes = [\n    \"text/html\",\n    \"application/json\",\n    \"application/xml\",\n    \"application/javascript\",\n    \"text/plain\",\n  ];\n\n  const contentType = htmlResponse.headers.get(\"content-type\") || \"\";\n  const contentTypeArray = contentType.split(\";\");\n  if (\n    contentTypeArray[0] &&\n    !allowedContentTypes.includes(contentTypeArray[0])\n  ) {\n    throw new Error(\"returned page was not utf8\");\n  }\n  return htmlResponse.text();\n};\n\nconst DEFAULT_HEADERS = {\n  Accept:\n    \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\",\n  \"Accept-Encoding\": \"gzip, deflate\",\n  \"Accept-Language\": \"en-US,en;q=0.5\",\n  \"Alt-Used\": \"LEAVE-THIS-KEY-SET-BY-TOOL\",\n  Connection: \"keep-alive\",\n  Host: \"LEAVE-THIS-KEY-SET-BY-TOOL\",\n  Referer: \"https://www.google.com/\",\n  \"Sec-Fetch-Dest\": \"document\",\n  \"Sec-Fetch-Mode\": \"navigate\",\n  \"Sec-Fetch-Site\": \"cross-site\",\n  \"Upgrade-Insecure-Requests\": \"1\",\n  \"User-Agent\":\n    \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/111.0\",\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Headers = Record<string, any>;\n\n/**\n * Configuration options for fetch requests, similar to axios config but for fetch\n */\nexport interface RequestConfig extends Omit<RequestInit, \"headers\"> {\n  withCredentials?: boolean;\n}\n\n/**\n * Defines the arguments that can be passed to the WebBrowser constructor.\n * It extends the ToolParams interface and includes properties for a\n * language model, embeddings, HTTP headers, an Axios configuration, a\n * callback manager, and a text splitter.\n */\nexport interface WebBrowserArgs extends ToolParams {\n  model: BaseLanguageModelInterface;\n\n  embeddings: EmbeddingsInterface;\n\n  headers?: Headers;\n\n  requestConfig?: RequestConfig;\n\n  /** @deprecated */\n  callbackManager?: CallbackManager;\n\n  textSplitter?: TextSplitter;\n}\n\n/**\n * A class designed to interact with web pages, either to extract\n * information from them or to summarize their content. It uses the native\n * fetch API to send HTTP requests and the cheerio library to parse the\n * returned HTML.\n * @example\n * ```typescript\n * const browser = new WebBrowser({\n *   model: new ChatOpenAI({ model: \"gpt-4o-mini\", temperature: 0 }),\n *   embeddings: new OpenAIEmbeddings({}),\n * });\n * const result = await browser.invoke(\"https:exampleurl.com\");\n * ```\n */\nexport class WebBrowser extends Tool {\n  static lc_name() {\n    return \"WebBrowser\";\n  }\n\n  get lc_namespace() {\n    return [...super.lc_namespace, \"webbrowser\"];\n  }\n\n  private model: BaseLanguageModelInterface;\n\n  private embeddings: EmbeddingsInterface;\n\n  private headers: Headers;\n\n  private requestConfig: RequestConfig;\n\n  private textSplitter: TextSplitter;\n\n  constructor({\n    model,\n    headers,\n    embeddings,\n    requestConfig,\n    textSplitter,\n  }: WebBrowserArgs) {\n    super(...arguments);\n\n    this.model = model;\n    this.embeddings = embeddings;\n    this.headers = headers ?? DEFAULT_HEADERS;\n    this.requestConfig = {\n      withCredentials: true,\n      ...requestConfig,\n    };\n    this.textSplitter =\n      textSplitter ??\n      new RecursiveCharacterTextSplitter({\n        chunkSize: 2000,\n        chunkOverlap: 200,\n      });\n  }\n\n  /** @ignore */\n  async _call(inputs: string, runManager?: CallbackManagerForToolRun) {\n    const [baseUrl, task] = parseInputs(inputs);\n    const doSummary = !task;\n\n    let text;\n    try {\n      const html = await getHtml(baseUrl, this.headers, this.requestConfig);\n      text = getText(html, baseUrl, doSummary);\n    } catch (e) {\n      if (e) {\n        return e.toString();\n      }\n      return \"There was a problem connecting to the site\";\n    }\n\n    const texts = await this.textSplitter.splitText(text);\n\n    let context;\n    // if we want a summary grab first 4\n    if (doSummary) {\n      context = texts.slice(0, 4).join(\"\\n\");\n    }\n    // search term well embed and grab top 4\n    else {\n      const docs = texts.map(\n        (pageContent) =>\n          new Document({\n            pageContent,\n            metadata: [],\n          })\n      );\n\n      const vectorStore = await MemoryVectorStore.fromDocuments(\n        docs,\n        this.embeddings\n      );\n      const results = await vectorStore.similaritySearch(\n        task,\n        4,\n        undefined,\n        runManager?.getChild(\"vectorstore\")\n      );\n      context = formatDocumentsAsString(results);\n    }\n\n    const input = `Text:${context}\\n\\nI need ${\n      doSummary ? \"a summary\" : task\n    } from the above text, also provide up to 5 markdown links from within that would be of interest (always including URL and text). Links should be provided, if present, in markdown syntax as a list under the heading \"Relevant Links:\".`;\n\n    const chain = RunnableSequence.from([this.model, new StringOutputParser()]);\n    return chain.invoke(input, runManager?.getChild());\n  }\n\n  name = \"web-browser\";\n\n  description = `useful for when you need to find something on or summarize a webpage. input should be a comma separated list of \"ONE valid http URL including protocol\",\"what you want to find on the page or empty string for a summary\".`;\n}\n"],"mappings":"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"}