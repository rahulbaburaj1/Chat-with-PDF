{"version":3,"file":"openapi.js","names":["headers?: Headers","jsonSpec: JsonSpec","llm: BaseLanguageModelInterface","input: string","openApiToolkit: OpenApiToolkit","args?: ZeroShotCreatePromptArgs"],"sources":["../../../../src/agents/toolkits/openapi/openapi.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport type { ToolInterface } from \"@langchain/core/tools\";\nimport { DynamicTool, BaseToolkit } from \"@langchain/core/tools\";\nimport { JsonSpec } from \"../../../tools/json.js\";\nimport { AgentExecutor } from \"../../executor.js\";\nimport {\n  OPENAPI_PREFIX,\n  OPENAPI_SUFFIX,\n  JSON_EXPLORER_DESCRIPTION,\n} from \"./prompt.js\";\nimport { LLMChain } from \"../../../chains/llm_chain.js\";\nimport { ZeroShotCreatePromptArgs, ZeroShotAgent } from \"../../mrkl/index.js\";\nimport {\n  Headers,\n  RequestsGetTool,\n  RequestsPostTool,\n} from \"../../../tools/requests.js\";\nimport { createJsonAgent, JsonToolkit } from \"../json/json.js\";\n\n/**\n * Represents a toolkit for making HTTP requests. It initializes the\n * request tools based on the provided headers.\n */\nexport class RequestsToolkit extends BaseToolkit {\n  tools: ToolInterface[];\n\n  constructor(headers?: Headers) {\n    super();\n    this.tools = [new RequestsGetTool(headers), new RequestsPostTool(headers)];\n  }\n}\n\n/**\n * Extends the `RequestsToolkit` class and adds a dynamic tool for\n * exploring JSON data. It creates a JSON agent using the `JsonToolkit`\n * and the provided language model, and adds the JSON explorer tool to the\n * toolkit.\n * @example\n * ```typescript\n * const toolkit = new OpenApiToolkit(\n *   new JsonSpec({\n *   }),\n *   new ChatOpenAI({ model: \"gpt-4o-mini\", temperature: 0 }),\n *   {\n *     \"Content-Type\": \"application/json\",\n *     Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,\n *   },\n * );\n *\n * const result = await toolkit.invoke({\n *   input:\n *     \"Make a POST request to openai /completions. The prompt should be 'tell me a joke.'\",\n * });\n * console.log(`Got output ${result.output}`);\n * ```\n */\nexport class OpenApiToolkit extends RequestsToolkit {\n  constructor(\n    jsonSpec: JsonSpec,\n    llm: BaseLanguageModelInterface,\n    headers?: Headers\n  ) {\n    super(headers);\n    const jsonAgent = createJsonAgent(llm, new JsonToolkit(jsonSpec));\n    this.tools = [\n      ...this.tools,\n      new DynamicTool({\n        name: \"json_explorer\",\n        func: async (input: string) => {\n          const result = await jsonAgent.call({ input });\n          return result.output as string;\n        },\n        description: JSON_EXPLORER_DESCRIPTION,\n      }),\n    ];\n  }\n}\n\n/**\n * Creates an OpenAPI agent using a language model, an OpenAPI toolkit,\n * and optional prompt arguments. It creates a prompt for the agent using\n * the OpenAPI tools and the provided prefix and suffix. It then creates a\n * ZeroShotAgent with the prompt and the OpenAPI tools, and returns an\n * AgentExecutor for executing the agent with the tools.\n * @param llm The language model to use.\n * @param openApiToolkit The OpenAPI toolkit to use.\n * @param args Optional arguments for creating the prompt.\n * @returns An AgentExecutor for executing the agent with the tools.\n *\n * @security **Security Notice** This agent provides access to external APIs.\n * Use with caution as this agent can make API calls with arbitrary headers.\n * Exposing this agent to users could lead to security vulnerabilities. Consider\n * limiting access to what endpoints it can hit, what actions can be taken, and\n * more.\n *\n * @link See https://js.langchain.com/docs/security for more information.\n */\nexport function createOpenApiAgent(\n  llm: BaseLanguageModelInterface,\n  openApiToolkit: OpenApiToolkit,\n  args?: ZeroShotCreatePromptArgs\n) {\n  const {\n    prefix = OPENAPI_PREFIX,\n    suffix = OPENAPI_SUFFIX,\n    inputVariables = [\"input\", \"agent_scratchpad\"],\n  } = args ?? {};\n\n  const { tools } = openApiToolkit;\n  const prompt = ZeroShotAgent.createPrompt(tools, {\n    prefix,\n    suffix,\n    inputVariables,\n  });\n  const chain = new LLMChain({\n    prompt,\n    llm,\n  });\n  const toolNames = tools.map((tool) => tool.name);\n  const agent = new ZeroShotAgent({ llmChain: chain, allowedTools: toolNames });\n  return AgentExecutor.fromAgentAndTools({\n    agent,\n    tools,\n    returnIntermediateSteps: true,\n  });\n}\n"],"mappings":";;;;;;;;;;;;;AAuBA,IAAa,kBAAb,cAAqC,YAAY;CAC/C;CAEA,YAAYA,SAAmB;EAC7B,OAAO;EACP,KAAK,QAAQ,CAAC,IAAI,gBAAgB,UAAU,IAAI,iBAAiB,QAAS;CAC3E;AACF;;;;;;;;;;;;;;;;;;;;;;;;;AA0BD,IAAa,iBAAb,cAAoC,gBAAgB;CAClD,YACEC,UACAC,KACAF,SACA;EACA,MAAM,QAAQ;EACd,MAAM,YAAY,gBAAgB,KAAK,IAAI,YAAY,UAAU;EACjE,KAAK,QAAQ,CACX,GAAG,KAAK,OACR,IAAI,YAAY;GACd,MAAM;GACN,MAAM,OAAOG,UAAkB;IAC7B,MAAM,SAAS,MAAM,UAAU,KAAK,EAAE,MAAO,EAAC;AAC9C,WAAO,OAAO;GACf;GACD,aAAa;EACd,EACF;CACF;AACF;;;;;;;;;;;;;;;;;;;;AAqBD,SAAgB,mBACdD,KACAE,gBACAC,MACA;CACA,MAAM,EACJ,SAAS,gBACT,SAAS,gBACT,iBAAiB,CAAC,SAAS,kBAAmB,GAC/C,GAAG,QAAQ,CAAE;CAEd,MAAM,EAAE,OAAO,GAAG;CAClB,MAAM,SAAS,cAAc,aAAa,OAAO;EAC/C;EACA;EACA;CACD,EAAC;CACF,MAAM,QAAQ,IAAI,SAAS;EACzB;EACA;CACD;CACD,MAAM,YAAY,MAAM,IAAI,CAAC,SAAS,KAAK,KAAK;CAChD,MAAM,QAAQ,IAAI,cAAc;EAAE,UAAU;EAAO,cAAc;CAAW;AAC5E,QAAO,cAAc,kBAAkB;EACrC;EACA;EACA,yBAAyB;CAC1B,EAAC;AACH"}