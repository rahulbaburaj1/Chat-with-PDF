{"version":3,"file":"api_chain.js","names":["fields: APIChainInput","values: ChainValues","runManager?: CallbackManagerForChainRun","question: string","data: SerializedAPIChain","llm: BaseLanguageModelInterface","apiDocs: string","options: APIChainOptions &\n      Omit<APIChainInput, \"apiAnswerChain\" | \"apiRequestChain\" | \"apiDocs\">"],"sources":["../../../src/chains/api/api_chain.ts"],"sourcesContent":["import type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport { ChainValues } from \"@langchain/core/utils/types\";\nimport { CallbackManagerForChainRun } from \"@langchain/core/callbacks/manager\";\nimport { BasePromptTemplate } from \"@langchain/core/prompts\";\nimport { BaseChain, ChainInputs } from \"../base.js\";\nimport { SerializedAPIChain } from \"../serde.js\";\nimport { LLMChain } from \"../llm_chain.js\";\nimport {\n  API_URL_PROMPT_TEMPLATE,\n  API_RESPONSE_PROMPT_TEMPLATE,\n} from \"./prompts.js\";\n\n/**\n * Interface that extends ChainInputs and defines additional input\n * parameters specific to an APIChain.\n */\nexport interface APIChainInput extends Omit<ChainInputs, \"memory\"> {\n  apiAnswerChain: LLMChain;\n  apiRequestChain: LLMChain;\n  apiDocs: string;\n  inputKey?: string;\n  headers?: Record<string, string>;\n  /** Key to use for output, defaults to `output` */\n  outputKey?: string;\n}\n\n/**\n * Type that defines optional configuration options for an APIChain.\n */\nexport type APIChainOptions = {\n  headers?: Record<string, string>;\n  apiUrlPrompt?: BasePromptTemplate;\n  apiResponsePrompt?: BasePromptTemplate;\n};\n\n/**\n * Class that extends BaseChain and represents a chain specifically\n * designed for making API requests and processing API responses.\n */\nexport class APIChain extends BaseChain implements APIChainInput {\n  apiAnswerChain: LLMChain;\n\n  apiRequestChain: LLMChain;\n\n  apiDocs: string;\n\n  headers = {};\n\n  inputKey = \"question\";\n\n  outputKey = \"output\";\n\n  get inputKeys() {\n    return [this.inputKey];\n  }\n\n  get outputKeys() {\n    return [this.outputKey];\n  }\n\n  constructor(fields: APIChainInput) {\n    super(fields);\n    this.apiRequestChain = fields.apiRequestChain;\n    this.apiAnswerChain = fields.apiAnswerChain;\n    this.apiDocs = fields.apiDocs;\n    this.inputKey = fields.inputKey ?? this.inputKey;\n    this.outputKey = fields.outputKey ?? this.outputKey;\n    this.headers = fields.headers ?? this.headers;\n  }\n\n  /** @ignore */\n  async _call(\n    values: ChainValues,\n    runManager?: CallbackManagerForChainRun\n  ): Promise<ChainValues> {\n    const question: string = values[this.inputKey];\n\n    const api_url = await this.apiRequestChain.predict(\n      { question, api_docs: this.apiDocs },\n      runManager?.getChild(\"request\")\n    );\n\n    const res = await fetch(api_url, { headers: this.headers });\n    const api_response = await res.text();\n\n    const answer = await this.apiAnswerChain.predict(\n      { question, api_docs: this.apiDocs, api_url, api_response },\n      runManager?.getChild(\"response\")\n    );\n\n    return { [this.outputKey]: answer };\n  }\n\n  _chainType() {\n    return \"api_chain\" as const;\n  }\n\n  static async deserialize(data: SerializedAPIChain) {\n    const { api_request_chain, api_answer_chain, api_docs } = data;\n\n    if (!api_request_chain) {\n      throw new Error(\"LLMChain must have api_request_chain\");\n    }\n    if (!api_answer_chain) {\n      throw new Error(\"LLMChain must have api_answer_chain\");\n    }\n\n    if (!api_docs) {\n      throw new Error(\"LLMChain must have api_docs\");\n    }\n\n    return new APIChain({\n      apiAnswerChain: await LLMChain.deserialize(api_answer_chain),\n      apiRequestChain: await LLMChain.deserialize(api_request_chain),\n      apiDocs: api_docs,\n    });\n  }\n\n  serialize(): SerializedAPIChain {\n    return {\n      _type: this._chainType(),\n      api_answer_chain: this.apiAnswerChain.serialize(),\n      api_request_chain: this.apiRequestChain.serialize(),\n      api_docs: this.apiDocs,\n    };\n  }\n\n  /**\n   * Static method to create a new APIChain from a BaseLanguageModel and API\n   * documentation.\n   * @param llm BaseLanguageModel instance.\n   * @param apiDocs API documentation.\n   * @param options Optional configuration options for the APIChain.\n   * @returns New APIChain instance.\n   */\n  static fromLLMAndAPIDocs(\n    llm: BaseLanguageModelInterface,\n    apiDocs: string,\n    options: APIChainOptions &\n      Omit<APIChainInput, \"apiAnswerChain\" | \"apiRequestChain\" | \"apiDocs\"> = {}\n  ): APIChain {\n    const {\n      apiUrlPrompt = API_URL_PROMPT_TEMPLATE,\n      apiResponsePrompt = API_RESPONSE_PROMPT_TEMPLATE,\n    } = options;\n    const apiRequestChain = new LLMChain({ prompt: apiUrlPrompt, llm });\n    const apiAnswerChain = new LLMChain({ prompt: apiResponsePrompt, llm });\n    return new this({\n      apiAnswerChain,\n      apiRequestChain,\n      apiDocs,\n      ...options,\n    });\n  }\n}\n"],"mappings":";;;;;;;;;AAuCA,IAAa,WAAb,MAAa,iBAAiB,UAAmC;CAC/D;CAEA;CAEA;CAEA,UAAU,CAAE;CAEZ,WAAW;CAEX,YAAY;CAEZ,IAAI,YAAY;AACd,SAAO,CAAC,KAAK,QAAS;CACvB;CAED,IAAI,aAAa;AACf,SAAO,CAAC,KAAK,SAAU;CACxB;CAED,YAAYA,QAAuB;EACjC,MAAM,OAAO;EACb,KAAK,kBAAkB,OAAO;EAC9B,KAAK,iBAAiB,OAAO;EAC7B,KAAK,UAAU,OAAO;EACtB,KAAK,WAAW,OAAO,YAAY,KAAK;EACxC,KAAK,YAAY,OAAO,aAAa,KAAK;EAC1C,KAAK,UAAU,OAAO,WAAW,KAAK;CACvC;;CAGD,MAAM,MACJC,QACAC,YACsB;EACtB,MAAMC,WAAmB,OAAO,KAAK;EAErC,MAAM,UAAU,MAAM,KAAK,gBAAgB,QACzC;GAAE;GAAU,UAAU,KAAK;EAAS,GACpC,YAAY,SAAS,UAAU,CAChC;EAED,MAAM,MAAM,MAAM,MAAM,SAAS,EAAE,SAAS,KAAK,QAAS,EAAC;EAC3D,MAAM,eAAe,MAAM,IAAI,MAAM;EAErC,MAAM,SAAS,MAAM,KAAK,eAAe,QACvC;GAAE;GAAU,UAAU,KAAK;GAAS;GAAS;EAAc,GAC3D,YAAY,SAAS,WAAW,CACjC;AAED,SAAO,GAAG,KAAK,YAAY,OAAQ;CACpC;CAED,aAAa;AACX,SAAO;CACR;CAED,aAAa,YAAYC,MAA0B;EACjD,MAAM,EAAE,mBAAmB,kBAAkB,UAAU,GAAG;AAE1D,MAAI,CAAC,kBACH,OAAM,IAAI,MAAM;AAElB,MAAI,CAAC,iBACH,OAAM,IAAI,MAAM;AAGlB,MAAI,CAAC,SACH,OAAM,IAAI,MAAM;AAGlB,SAAO,IAAI,SAAS;GAClB,gBAAgB,MAAM,SAAS,YAAY,iBAAiB;GAC5D,iBAAiB,MAAM,SAAS,YAAY,kBAAkB;GAC9D,SAAS;EACV;CACF;CAED,YAAgC;AAC9B,SAAO;GACL,OAAO,KAAK,YAAY;GACxB,kBAAkB,KAAK,eAAe,WAAW;GACjD,mBAAmB,KAAK,gBAAgB,WAAW;GACnD,UAAU,KAAK;EAChB;CACF;;;;;;;;;CAUD,OAAO,kBACLC,KACAC,SACAC,UAC0E,CAAE,GAClE;EACV,MAAM,EACJ,eAAe,yBACf,oBAAoB,8BACrB,GAAG;EACJ,MAAM,kBAAkB,IAAI,SAAS;GAAE,QAAQ;GAAc;EAAK;EAClE,MAAM,iBAAiB,IAAI,SAAS;GAAE,QAAQ;GAAmB;EAAK;AACtE,SAAO,IAAI,KAAK;GACd;GACA;GACA;GACA,GAAG;EACJ;CACF;AACF"}