{"version":3,"file":"sqlite.d.ts","names":["Database","DatabaseType","ListKeyOptions","RecordManagerInterface","UpdateOptions","SQLiteRecordManagerOptions","SQLiteRecordManager","Promise"],"sources":["../../src/indexes/sqlite.d.ts"],"sourcesContent":["import { Database as DatabaseType } from \"better-sqlite3\";\nimport { ListKeyOptions, RecordManagerInterface, UpdateOptions } from \"@langchain/core/indexing\";\n/**\n * Options for configuring the SQLiteRecordManager class.\n */\nexport type SQLiteRecordManagerOptions = {\n    /**\n     * The file path of the SQLite database.\n     * One of either `localPath` or `connectionString` is required.\n     */\n    localPath?: string;\n    /**\n     * The connection string of the SQLite database.\n     * One of either `localPath` or `connectionString` is required.\n     */\n    connectionString?: string;\n    /**\n     * The name of the table in the SQLite database.\n     */\n    tableName: string;\n};\nexport declare class SQLiteRecordManager implements RecordManagerInterface {\n    lc_namespace: string[];\n    tableName: string;\n    db: DatabaseType;\n    namespace: string;\n    constructor(namespace: string, config: SQLiteRecordManagerOptions);\n    createSchema(): Promise<void>;\n    getTime(): Promise<number>;\n    update(keys: string[], updateOptions?: UpdateOptions): Promise<void>;\n    exists(keys: string[]): Promise<boolean[]>;\n    listKeys(options?: ListKeyOptions): Promise<string[]>;\n    deleteKeys(keys: string[]): Promise<void>;\n}\n"],"mappings":";;;;;;;;;;KAKYK,0BAAAA;;;;;EAAAA,SAAAA,CAAAA,EAAAA,MAAAA;EAgBSC;;;;EAKgD,gBACjDC,CAAAA,EAAAA,MAAAA;EAAO;;;EAEuC,SACtCA,EAAAA,MAAAA;CAAO;AACKA,cAVnBD,mBAAAA,YAA+BH,sBAUZI,CAAAA;EAAO,YACfA,EAAAA,MAAAA,EAAAA;EAAO,SAXaJ,EAAAA,MAAAA;EAAsB,EAAA,EAGlEF,UAHkE;;yCAK/BI;kBACvBE;aACLA;yCAC4BH,gBAAgBG;0BAC/BA;qBACLL,iBAAiBK;8BACRA"}