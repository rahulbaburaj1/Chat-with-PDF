{"version":3,"file":"configProfile.js","names":[],"sources":["../../../../../../../../../node_modules/.pnpm/couchbase@4.5.0/node_modules/couchbase/dist/configProfile.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.knownProfiles = exports.ConfigProfiles = exports.WanDevelopmentProfile = void 0;\n/**\n * The WAN Development profile sets various timeout options that are useful\n * when working in a WAN environment.\n *\n * Volatile: This API is subject to change at any time.\n */\nclass WanDevelopmentProfile {\n    /**\n     * Applies the ConfigProfile options to the provided ConnectOptions.\n     *\n     * Volatile: This API is subject to change at any time.\n     *\n     * @param options The Connect options the ConfigProfile should be applied toward.\n     */\n    apply(options) {\n        // the profile should override previously set values\n        options.timeouts = {\n            ...options.timeouts,\n            ...{\n                kvTimeout: 20000,\n                kvDurableTimeout: 20000,\n                analyticsTimeout: 120000,\n                managementTimeout: 120000,\n                queryTimeout: 120000,\n                searchTimeout: 120000,\n                viewTimeout: 120000,\n                bootstrapTimeout: 120000,\n                connectTimeout: 20000,\n                resolveTimeout: 20000,\n            },\n        };\n        options.dnsConfig = { ...options.dnsConfig, ...{ dnsSrvTimeout: 20000 } };\n    }\n}\nexports.WanDevelopmentProfile = WanDevelopmentProfile;\n/**\n * The ConfigProfiles class keeps track of registered/known Configuration Profiles.\n *\n * Volatile: This API is subject to change at any time.\n */\nclass ConfigProfiles {\n    constructor() {\n        this._profiles = {};\n        this.registerProfile('wanDevelopment', new WanDevelopmentProfile());\n    }\n    /**\n     * Applies the specified registered ConfigProfile to the provided ConnectOptions.\n     *\n     * Volatile: This API is subject to change at any time.\n     *\n     *  @param profileName The name of the ConfigProfile to apply.\n     *  @param options The Connect options the ConfigProfile should be applied toward.\n     */\n    applyProfile(profileName, options) {\n        if (!(profileName in this._profiles)) {\n            throw new Error(`${profileName} is not a registered profile.`);\n        }\n        this._profiles[profileName].apply(options);\n    }\n    /**\n     * Registers a ConfigProfile under the specified name.\n     *\n     * Volatile: This API is subject to change at any time.\n     *\n     *  @param profileName The name the ConfigProfile should be registered under.\n     *  @param profile The ConfigProfile to register.\n     */\n    registerProfile(profileName, profile) {\n        this._profiles[profileName] = profile;\n    }\n    /**\n     * Unregisters the specified ConfigProfile.\n     *\n     * Volatile: This API is subject to change at any time.\n     *\n     *  @param profileName The name of the ConfigProfile to unregister.\n     */\n    unregisterProfile(profileName) {\n        delete this._profiles[profileName];\n    }\n}\nexports.ConfigProfiles = ConfigProfiles;\nexports.knownProfiles = new ConfigProfiles();\n"],"x_google_ignoreList":[0],"mappings":";;;;;;CACA,OAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAM,EAAC;CAC7D,QAAQ,gBAAgB,QAAQ,iBAAiB,QAAQ,wBAAwB,KAAK;;;;;;;CAOtF,IAAM,wBAAN,MAA4B;;;;;;;;EAQxB,MAAM,SAAS;GAEX,QAAQ,WAAW;IACf,GAAG,QAAQ;IAEP,WAAW;IACX,kBAAkB;IAClB,kBAAkB;IAClB,mBAAmB;IACnB,cAAc;IACd,eAAe;IACf,aAAa;IACb,kBAAkB;IAClB,gBAAgB;IAChB,gBAAgB;GAEvB;GACD,QAAQ,YAAY;IAAE,GAAG,QAAQ;IAAgB,eAAe;GAAS;EAC5E;CACJ;CACD,QAAQ,wBAAwB;;;;;;CAMhC,IAAM,iBAAN,MAAqB;EACjB,cAAc;GACV,KAAK,YAAY,CAAE;GACnB,KAAK,gBAAgB,kBAAkB,IAAI,wBAAwB;EACtE;;;;;;;;;EASD,aAAa,aAAa,SAAS;AAC/B,OAAI,EAAE,eAAe,KAAK,WACtB,OAAM,IAAI,MAAM,GAAG,YAAY,6BAA6B,CAAC;GAEjE,KAAK,UAAU,aAAa,MAAM,QAAQ;EAC7C;;;;;;;;;EASD,gBAAgB,aAAa,SAAS;GAClC,KAAK,UAAU,eAAe;EACjC;;;;;;;;EAQD,kBAAkB,aAAa;GAC3B,OAAO,KAAK,UAAU;EACzB;CACJ;CACD,QAAQ,iBAAiB;CACzB,QAAQ,gBAAgB,IAAI"}