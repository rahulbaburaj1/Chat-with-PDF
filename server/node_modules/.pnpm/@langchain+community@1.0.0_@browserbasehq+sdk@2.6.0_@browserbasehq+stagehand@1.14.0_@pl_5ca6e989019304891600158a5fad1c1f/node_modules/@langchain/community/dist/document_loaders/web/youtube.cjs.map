{"version":3,"file":"youtube.cjs","names":["BaseDocumentLoader","config: YoutubeConfig","url: string","config?: Omit<YoutubeConfig, \"videoId\">","transcript: string | undefined","metadata: VideoMetadata","Innertube","e: unknown","Document"],"sources":["../../../src/document_loaders/web/youtube.ts"],"sourcesContent":["import { Innertube } from \"youtubei.js\";\nimport { Document } from \"@langchain/core/documents\";\nimport { BaseDocumentLoader } from \"@langchain/core/document_loaders/base\";\n\n/**\n * Configuration options for the YoutubeLoader class. Includes properties\n * such as the videoId, language, and addVideoInfo.\n */\ninterface YoutubeConfig {\n  videoId: string;\n  language?: string;\n  addVideoInfo?: boolean;\n}\n\n/**\n * Metadata of a YouTube video. Includes properties such as the source\n * (videoId), description, title, view_count, author, and category.\n */\ninterface VideoMetadata {\n  source: string;\n  description?: string;\n  title?: string;\n  view_count?: number;\n  author?: string;\n  category?: string;\n}\n\n/**\n * A document loader for loading data from YouTube videos. It uses the\n * youtubei.js library to fetch the transcript and video metadata.\n * @example\n * ```typescript\n * const loader = new YoutubeLoader(\n *   \"https:\n *   \"en\",\n *   true,\n * );\n * const docs = await loader.load();\n * ```\n */\nexport class YoutubeLoader extends BaseDocumentLoader {\n  private videoId: string;\n\n  private language?: string;\n\n  private addVideoInfo: boolean;\n\n  constructor(config: YoutubeConfig) {\n    super();\n    this.videoId = config.videoId;\n    this.language = config?.language;\n    this.addVideoInfo = config?.addVideoInfo ?? false;\n  }\n\n  /**\n   * Extracts the videoId from a YouTube video URL.\n   * @param url The URL of the YouTube video.\n   * @returns The videoId of the YouTube video.\n   */\n  private static getVideoID(url: string): string {\n    const match = url.match(\n      /.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=)([^#&?]*).*/\n    );\n    if (match !== null && match[1].length === 11) {\n      return match[1];\n    } else {\n      throw new Error(\"Failed to get youtube video id from the url\");\n    }\n  }\n\n  /**\n   * Creates a new instance of the YoutubeLoader class from a YouTube video\n   * URL.\n   * @param url The URL of the YouTube video.\n   * @param config Optional configuration options for the YoutubeLoader instance, excluding the videoId.\n   * @returns A new instance of the YoutubeLoader class.\n   */\n  static createFromUrl(\n    url: string,\n    config?: Omit<YoutubeConfig, \"videoId\">\n  ): YoutubeLoader {\n    const videoId = YoutubeLoader.getVideoID(url);\n    return new YoutubeLoader({ ...config, videoId });\n  }\n\n  /**\n   * Loads the transcript and video metadata from the specified YouTube\n   * video. It uses the youtubei.js library to fetch the video metadata and transcripts.\n   * @returns An array of Documents representing the retrieved data.\n   */\n  async load(): Promise<Document[]> {\n    let transcript: string | undefined;\n    const metadata: VideoMetadata = {\n      source: this.videoId,\n    };\n    try {\n      const youtube = await Innertube.create({\n        lang: this.language,\n        retrieve_player: false,\n      });\n      const info = await youtube.getInfo(this.videoId);\n      const transcriptData = await info.getTranscript();\n      transcript =\n        transcriptData.transcript.content?.body?.initial_segments\n          .map((segment) => segment.snippet.text)\n          .join(\" \") ?? \"\";\n      if (transcript === undefined) {\n        throw new Error(\"Transcription not found\");\n      }\n      if (this.addVideoInfo) {\n        const basicInfo = info.basic_info;\n        metadata.description = basicInfo.short_description;\n        metadata.title = basicInfo.title;\n        metadata.view_count = basicInfo.view_count;\n        metadata.author = basicInfo.author;\n      }\n    } catch (e: unknown) {\n      throw new Error(\n        `Failed to get YouTube video transcription: ${(e as Error).message}`\n      );\n    }\n    const document = new Document({\n      pageContent: transcript,\n      metadata,\n    });\n\n    return [document];\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAwCA,IAAa,gBAAb,MAAa,sBAAsBA,0DAAmB;CACpD,AAAQ;CAER,AAAQ;CAER,AAAQ;CAER,YAAYC,QAAuB;EACjC,OAAO;EACP,KAAK,UAAU,OAAO;EACtB,KAAK,WAAW,QAAQ;EACxB,KAAK,eAAe,QAAQ,gBAAgB;CAC7C;;;;;;CAOD,OAAe,WAAWC,KAAqB;EAC7C,MAAM,QAAQ,IAAI,MAChB,4DACD;AACD,MAAI,UAAU,QAAQ,MAAM,GAAG,WAAW,GACxC,QAAO,MAAM;MAEb,OAAM,IAAI,MAAM;CAEnB;;;;;;;;CASD,OAAO,cACLA,KACAC,QACe;EACf,MAAM,UAAU,cAAc,WAAW,IAAI;AAC7C,SAAO,IAAI,cAAc;GAAE,GAAG;GAAQ;EAAS;CAChD;;;;;;CAOD,MAAM,OAA4B;EAChC,IAAIC;EACJ,MAAMC,WAA0B,EAC9B,QAAQ,KAAK,QACd;AACD,MAAI;GACF,MAAM,UAAU,MAAMC,sBAAU,OAAO;IACrC,MAAM,KAAK;IACX,iBAAiB;GAClB,EAAC;GACF,MAAM,OAAO,MAAM,QAAQ,QAAQ,KAAK,QAAQ;GAChD,MAAM,iBAAiB,MAAM,KAAK,eAAe;GACjD,aACE,eAAe,WAAW,SAAS,MAAM,iBACtC,IAAI,CAAC,YAAY,QAAQ,QAAQ,KAAK,CACtC,KAAK,IAAI,IAAI;AAClB,OAAI,eAAe,OACjB,OAAM,IAAI,MAAM;AAElB,OAAI,KAAK,cAAc;IACrB,MAAM,YAAY,KAAK;IACvB,SAAS,cAAc,UAAU;IACjC,SAAS,QAAQ,UAAU;IAC3B,SAAS,aAAa,UAAU;IAChC,SAAS,SAAS,UAAU;GAC7B;EACF,SAAQC,GAAY;AACnB,SAAM,IAAI,MACR,CAAC,2CAA2C,EAAG,EAAY,SAAS;EAEvE;EACD,MAAM,WAAW,IAAIC,oCAAS;GAC5B,aAAa;GACb;EACD;AAED,SAAO,CAAC,QAAS;CAClB;AACF"}