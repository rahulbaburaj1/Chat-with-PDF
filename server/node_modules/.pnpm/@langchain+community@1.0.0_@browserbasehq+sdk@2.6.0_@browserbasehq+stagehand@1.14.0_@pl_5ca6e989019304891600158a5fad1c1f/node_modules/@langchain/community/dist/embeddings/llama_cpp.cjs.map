{"version":3,"file":"llama_cpp.cjs","names":["Embeddings","inputs: LlamaCppEmbeddingsParams","inputs: LlamaBaseCppInputs","createLlamaModel","createLlamaContext","texts: string[]","embeddings: number[][]","embedArray: number[]","nToken: number","text: string","tokens: number[]","token: number"],"sources":["../../src/embeddings/llama_cpp.ts"],"sourcesContent":["import { LlamaModel, LlamaContext, getLlama } from \"node-llama-cpp\";\nimport { Embeddings, type EmbeddingsParams } from \"@langchain/core/embeddings\";\nimport {\n  LlamaBaseCppInputs,\n  createLlamaModel,\n  createLlamaContext,\n} from \"../utils/llama_cpp.js\";\n\n/**\n * Note that the modelPath is the only required parameter. For testing you\n * can set this in the environment variable `LLAMA_PATH`.\n */\nexport interface LlamaCppEmbeddingsParams\n  extends LlamaBaseCppInputs,\n    EmbeddingsParams {}\n\n/**\n * @example\n * ```typescript\n * // Initialize LlamaCppEmbeddings with the path to the model file\n * const embeddings = await LlamaCppEmbeddings.initialize({\n *   modelPath: llamaPath,\n * });\n *\n * // Embed a query string using the Llama embeddings\n * const res = embeddings.embedQuery(\"Hello Llama!\");\n *\n * // Output the resulting embeddings\n * console.log(res);\n *\n * ```\n */\nexport class LlamaCppEmbeddings extends Embeddings {\n  _model: LlamaModel;\n\n  _context: LlamaContext;\n\n  public constructor(inputs: LlamaCppEmbeddingsParams) {\n    super(inputs);\n    const _inputs = inputs;\n    _inputs.embedding = true;\n  }\n\n  /**\n   * Initializes the llama_cpp model for usage in the embeddings wrapper.\n   * @param inputs - the inputs passed onto the model.\n   * @returns A Promise that resolves to the LlamaCppEmbeddings type class.\n   */\n  public static async initialize(\n    inputs: LlamaBaseCppInputs\n  ): Promise<LlamaCppEmbeddings> {\n    const instance = new LlamaCppEmbeddings(inputs);\n    const llama = await getLlama();\n\n    instance._model = await createLlamaModel(inputs, llama);\n    instance._context = await createLlamaContext(instance._model, inputs);\n\n    return instance;\n  }\n\n  /**\n   * Generates embeddings for an array of texts.\n   * @param texts - An array of strings to generate embeddings for.\n   * @returns A Promise that resolves to an array of embeddings.\n   */\n  async embedDocuments(texts: string[]): Promise<number[][]> {\n    const tokensArray = [];\n\n    for (const text of texts) {\n      const encodings = await this.caller.call(\n        () =>\n          new Promise((resolve) => {\n            resolve(this._model.tokenize(text));\n          })\n      );\n      tokensArray.push(encodings);\n    }\n\n    const embeddings: number[][] = [];\n\n    for (const tokens of tokensArray) {\n      const embedArray: number[] = [];\n\n      for (let i = 0; i < tokens.length; i += 1) {\n        const nToken: number = +tokens[i];\n        embedArray.push(nToken);\n      }\n\n      embeddings.push(embedArray);\n    }\n\n    return embeddings;\n  }\n\n  /**\n   * Generates an embedding for a single text.\n   * @param text - A string to generate an embedding for.\n   * @returns A Promise that resolves to an array of numbers representing the embedding.\n   */\n  async embedQuery(text: string): Promise<number[]> {\n    const tokens: number[] = [];\n\n    const encodings = await this.caller.call(\n      () =>\n        new Promise((resolve) => {\n          resolve(this._model.tokenize(text));\n        })\n    );\n\n    for (let i = 0; i < encodings.length; i += 1) {\n      const token: number = +encodings[i];\n      tokens.push(token);\n    }\n\n    return tokens;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAgCA,IAAa,qBAAb,MAAa,2BAA2BA,uCAAW;CACjD;CAEA;CAEA,AAAO,YAAYC,QAAkC;EACnD,MAAM,OAAO;EACb,MAAM,UAAU;EAChB,QAAQ,YAAY;CACrB;;;;;;CAOD,aAAoB,WAClBC,QAC6B;EAC7B,MAAM,WAAW,IAAI,mBAAmB;EACxC,MAAM,QAAQ,oCAAgB;EAE9B,SAAS,SAAS,MAAMC,mCAAiB,QAAQ,MAAM;EACvD,SAAS,WAAW,MAAMC,qCAAmB,SAAS,QAAQ,OAAO;AAErE,SAAO;CACR;;;;;;CAOD,MAAM,eAAeC,OAAsC;EACzD,MAAM,cAAc,CAAE;AAEtB,OAAK,MAAM,QAAQ,OAAO;GACxB,MAAM,YAAY,MAAM,KAAK,OAAO,KAClC,MACE,IAAI,QAAQ,CAAC,YAAY;IACvB,QAAQ,KAAK,OAAO,SAAS,KAAK,CAAC;GACpC,GACJ;GACD,YAAY,KAAK,UAAU;EAC5B;EAED,MAAMC,aAAyB,CAAE;AAEjC,OAAK,MAAM,UAAU,aAAa;GAChC,MAAMC,aAAuB,CAAE;AAE/B,QAAK,IAAI,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK,GAAG;IACzC,MAAMC,SAAiB,CAAC,OAAO;IAC/B,WAAW,KAAK,OAAO;GACxB;GAED,WAAW,KAAK,WAAW;EAC5B;AAED,SAAO;CACR;;;;;;CAOD,MAAM,WAAWC,MAAiC;EAChD,MAAMC,SAAmB,CAAE;EAE3B,MAAM,YAAY,MAAM,KAAK,OAAO,KAClC,MACE,IAAI,QAAQ,CAAC,YAAY;GACvB,QAAQ,KAAK,OAAO,SAAS,KAAK,CAAC;EACpC,GACJ;AAED,OAAK,IAAI,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK,GAAG;GAC5C,MAAMC,QAAgB,CAAC,UAAU;GACjC,OAAO,KAAK,MAAM;EACnB;AAED,SAAO;CACR;AACF"}