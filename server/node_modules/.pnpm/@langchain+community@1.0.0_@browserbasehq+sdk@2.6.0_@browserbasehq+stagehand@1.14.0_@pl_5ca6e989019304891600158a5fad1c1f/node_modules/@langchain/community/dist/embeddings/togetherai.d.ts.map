{"version":3,"file":"togetherai.d.ts","names":["Embeddings","EmbeddingsParams","TogetherAIEmbeddingsParams","TogetherAIEmbeddings","Partial","Promise"],"sources":["../../src/embeddings/togetherai.d.ts"],"sourcesContent":["import { Embeddings, type EmbeddingsParams } from \"@langchain/core/embeddings\";\n/**\n * Interface for TogetherAIEmbeddingsParams parameters. Extends EmbeddingsParams and\n * defines additional parameters specific to the TogetherAIEmbeddings class.\n */\nexport interface TogetherAIEmbeddingsParams extends EmbeddingsParams {\n    /**\n     * The API key to use for the TogetherAI API.\n     * @default {process.env.TOGETHER_AI_API_KEY}\n     */\n    apiKey?: string;\n    /**\n     * Model name to use\n     * Alias for `model`\n     * @default {\"togethercomputer/m2-bert-80M-8k-retrieval\"}\n     */\n    modelName?: string;\n    /**\n     * Model name to use\n     * @default {\"togethercomputer/m2-bert-80M-8k-retrieval\"}\n     */\n    model?: string;\n    /**\n     * Timeout to use when making requests to TogetherAI.\n     * @default {undefined}\n     */\n    timeout?: number;\n    /**\n     * The maximum number of documents to embed in a single request.\n     * @default {512}\n     */\n    batchSize?: number;\n    /**\n     * Whether to strip new lines from the input text. May not be suitable\n     * for all use cases.\n     * @default {false}\n     */\n    stripNewLines?: boolean;\n}\n/**\n * Class for generating embeddings using the TogetherAI API. Extends the\n * Embeddings class and implements TogetherAIEmbeddingsParams.\n * @example\n * ```typescript\n * const embeddings = new TogetherAIEmbeddings({\n *   apiKey: process.env.TOGETHER_AI_API_KEY, // Default value\n *   model: \"togethercomputer/m2-bert-80M-8k-retrieval\", // Default value\n * });\n * const res = await embeddings.embedQuery(\n *   \"What would be a good company name a company that makes colorful socks?\"\n * );\n * ```\n */\nexport declare class TogetherAIEmbeddings extends Embeddings implements TogetherAIEmbeddingsParams {\n    modelName: string;\n    model: string;\n    apiKey: string;\n    batchSize: number;\n    stripNewLines: boolean;\n    timeout?: number;\n    private embeddingsAPIUrl;\n    constructor(fields?: Partial<TogetherAIEmbeddingsParams>);\n    private constructHeaders;\n    private constructBody;\n    /**\n     * Method to generate embeddings for an array of documents. Splits the\n     * documents into batches and makes requests to the TogetherAI API to generate\n     * embeddings.\n     * @param texts Array of documents to generate embeddings for.\n     * @returns Promise that resolves to a 2D array of embeddings for each document.\n     */\n    embedDocuments(texts: string[]): Promise<number[][]>;\n    /**\n     * Method to generate an embedding for a single document. Calls the\n     * embeddingWithRetry method with the document as the input.\n     * @param {string} text Document to generate an embedding for.\n     * @returns {Promise<number[]>} Promise that resolves to an embedding for the document.\n     */\n    embedQuery(text: string): Promise<number[]>;\n    private embeddingWithRetry;\n}\n"],"mappings":";;;;;;;;;;UAKiBE,0BAAAA,SAAmCD;;;;AAApD;EAgDqBE,MAAAA,CAAAA,EAAAA,MAAAA;EAAoB;;;;;EAyBJ,SAzBaH,CAAAA,EAAAA,MAAAA;EAAU;AAAsC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAA7EG,oBAAAA,SAA6BH,UAAAA,YAAsBE;;;;;;;;uBAQ/CE,QAAQF;;;;;;;;;;mCAUIG;;;;;;;4BAOPA"}