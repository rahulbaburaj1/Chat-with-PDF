{"version":3,"file":"bucket.js","names":[],"sources":["../../../../../../../../../node_modules/.pnpm/couchbase@4.5.0/node_modules/couchbase/dist/bucket.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Bucket = void 0;\nconst collection_1 = require(\"./collection\");\nconst collectionmanager_1 = require(\"./collectionmanager\");\nconst diagnosticsexecutor_1 = require(\"./diagnosticsexecutor\");\nconst scope_1 = require(\"./scope\");\nconst utilities_1 = require(\"./utilities\");\nconst viewexecutor_1 = require(\"./viewexecutor\");\nconst viewindexmanager_1 = require(\"./viewindexmanager\");\n/**\n * Exposes the operations which are available to be performed against a bucket.\n * Namely the ability to access to Collections as well as performing management\n * operations against the bucket.\n *\n * @category Core\n */\nclass Bucket {\n    /**\n    @internal\n    */\n    constructor(cluster, bucketName) {\n        this._cluster = cluster;\n        this._name = bucketName;\n        this._conn = cluster.conn;\n    }\n    /**\n    @internal\n    */\n    get conn() {\n        return this._conn;\n    }\n    /**\n    @internal\n    */\n    get cluster() {\n        return this._cluster;\n    }\n    /**\n    @internal\n    */\n    get transcoder() {\n        return this._cluster.transcoder;\n    }\n    /**\n     * The name of the bucket this Bucket object references.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Creates a Scope object reference to a specific scope.\n     *\n     * @param scopeName The name of the scope to reference.\n     */\n    scope(scopeName) {\n        return new scope_1.Scope(this, scopeName);\n    }\n    /**\n     * Creates a Scope object reference to the default scope.\n     */\n    defaultScope() {\n        return this.scope(scope_1.Scope.DEFAULT_NAME);\n    }\n    /**\n     * Creates a Collection object reference to a specific collection.\n     *\n     * @param collectionName The name of the collection to reference.\n     */\n    collection(collectionName) {\n        const scope = this.defaultScope();\n        return scope.collection(collectionName);\n    }\n    /**\n     * Creates a Collection object reference to the default collection.\n     */\n    defaultCollection() {\n        return this.collection(collection_1.Collection.DEFAULT_NAME);\n    }\n    /**\n     * Returns a ViewIndexManager which can be used to manage the view indexes\n     * of this bucket.\n     */\n    viewIndexes() {\n        return new viewindexmanager_1.ViewIndexManager(this);\n    }\n    /**\n     * Returns a CollectionManager which can be used to manage the collections\n     * of this bucket.\n     */\n    collections() {\n        return new collectionmanager_1.CollectionManager(this);\n    }\n    /**\n     * Executes a view query.\n     *\n     * @param designDoc The name of the design document containing the view to execute.\n     * @param viewName The name of the view to execute.\n     * @param options Optional parameters for this operation.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    viewQuery(designDoc, viewName, options, callback) {\n        if (options instanceof Function) {\n            callback = arguments[2];\n            options = undefined;\n        }\n        if (!options) {\n            options = {};\n        }\n        const exec = new viewexecutor_1.ViewExecutor(this);\n        const options_ = options;\n        return utilities_1.PromiseHelper.wrapAsync(() => exec.query(designDoc, viewName, options_), callback);\n    }\n    /**\n     * Performs a ping operation against the cluster.  Pinging the bucket services\n     * which are specified (or all services if none are specified).  Returns a report\n     * which describes the outcome of the ping operations which were performed.\n     *\n     * @param options Optional parameters for this operation.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    ping(options, callback) {\n        if (options instanceof Function) {\n            callback = arguments[0];\n            options = undefined;\n        }\n        if (!options) {\n            options = {};\n        }\n        const exec = new diagnosticsexecutor_1.PingExecutor(this._cluster);\n        const options_ = options;\n        return utilities_1.PromiseHelper.wrapAsync(() => exec.ping({\n            ...options_,\n            bucket: this.name,\n        }), callback);\n    }\n}\nexports.Bucket = Bucket;\n"],"x_google_ignoreList":[0],"mappings":";;;;;;;;;;;;;CACA,OAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAM,EAAC;CAC7D,QAAQ,SAAS,KAAK;CACtB,MAAM;CACN,MAAM;CACN,MAAM;CACN,MAAM;CACN,MAAM;CACN,MAAM;CACN,MAAM;;;;;;;;CAQN,IAAM,SAAN,MAAa;;;;EAIT,YAAY,SAAS,YAAY;GAC7B,KAAK,WAAW;GAChB,KAAK,QAAQ;GACb,KAAK,QAAQ,QAAQ;EACxB;;;;EAID,IAAI,OAAO;AACP,UAAO,KAAK;EACf;;;;EAID,IAAI,UAAU;AACV,UAAO,KAAK;EACf;;;;EAID,IAAI,aAAa;AACb,UAAO,KAAK,SAAS;EACxB;;;;EAID,IAAI,OAAO;AACP,UAAO,KAAK;EACf;;;;;;EAMD,MAAM,WAAW;AACb,UAAO,IAAI,QAAQ,MAAM,MAAM;EAClC;;;;EAID,eAAe;AACX,UAAO,KAAK,MAAM,QAAQ,MAAM,aAAa;EAChD;;;;;;EAMD,WAAW,gBAAgB;GACvB,MAAM,QAAQ,KAAK,cAAc;AACjC,UAAO,MAAM,WAAW,eAAe;EAC1C;;;;EAID,oBAAoB;AAChB,UAAO,KAAK,WAAW,aAAa,WAAW,aAAa;EAC/D;;;;;EAKD,cAAc;AACV,UAAO,IAAI,mBAAmB,iBAAiB;EAClD;;;;;EAKD,cAAc;AACV,UAAO,IAAI,oBAAoB,kBAAkB;EACpD;;;;;;;;;EASD,UAAU,WAAW,UAAU,SAAS,UAAU;AAC9C,OAAI,mBAAmB,UAAU;IAC7B,WAAW,UAAU;IACrB,UAAU;GACb;AACD,OAAI,CAAC,SACD,UAAU,CAAE;GAEhB,MAAM,OAAO,IAAI,eAAe,aAAa;GAC7C,MAAM,WAAW;AACjB,UAAO,YAAY,cAAc,UAAU,MAAM,KAAK,MAAM,WAAW,UAAU,SAAS,EAAE,SAAS;EACxG;;;;;;;;;EASD,KAAK,SAAS,UAAU;AACpB,OAAI,mBAAmB,UAAU;IAC7B,WAAW,UAAU;IACrB,UAAU;GACb;AACD,OAAI,CAAC,SACD,UAAU,CAAE;GAEhB,MAAM,OAAO,IAAI,sBAAsB,aAAa,KAAK;GACzD,MAAM,WAAW;AACjB,UAAO,YAAY,cAAc,UAAU,MAAM,KAAK,KAAK;IACvD,GAAG;IACH,QAAQ,KAAK;GAChB,EAAC,EAAE,SAAS;EAChB;CACJ;CACD,QAAQ,SAAS"}