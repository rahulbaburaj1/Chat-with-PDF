{"version":3,"file":"searchquery.js","names":["MatchOperator"],"sources":["../../../../../../../../../node_modules/.pnpm/couchbase@4.5.0/node_modules/couchbase/dist/searchquery.js"],"sourcesContent":["\"use strict\";\n/* eslint jsdoc/require-jsdoc: off */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GeoPolygonSearchQuery = exports.GeoBoundingBoxSearchQuery = exports.GeoDistanceSearchQuery = exports.MatchNoneSearchQuery = exports.MatchAllSearchQuery = exports.PrefixSearchQuery = exports.PhraseSearchQuery = exports.TermSearchQuery = exports.BooleanFieldSearchQuery = exports.DocIdSearchQuery = exports.WildcardSearchQuery = exports.BooleanSearchQuery = exports.DisjunctionSearchQuery = exports.ConjunctionSearchQuery = exports.DateRangeSearchQuery = exports.NumericRangeSearchQuery = exports.QueryStringSearchQuery = exports.RegexpSearchQuery = exports.MatchPhraseSearchQuery = exports.MatchSearchQuery = exports.SearchQuery = exports.MatchOperator = void 0;\n/**\n * Specifies how the individual match terms should be logically concatenated.\n *\n * @experimental This API is subject to change without notice.\n * @category Full Text Search\n */\nvar MatchOperator;\n(function (MatchOperator) {\n    /**\n     * Specifies that individual match terms are concatenated with a logical OR - this is the default if not provided.\n     */\n    MatchOperator[\"Or\"] = \"or\";\n    /**\n     * Specifies that individual match terms are concatenated with a logical AND.\n     */\n    MatchOperator[\"And\"] = \"and\";\n})(MatchOperator || (exports.MatchOperator = MatchOperator = {}));\nfunction _parseGeoPoint(v) {\n    if (Array.isArray(v)) {\n        return v;\n    }\n    else if (v instanceof Object) {\n        const latLonObj = v;\n        if (latLonObj.lon || latLonObj.lat) {\n            return [latLonObj.lon, latLonObj.lat];\n        }\n        else if (latLonObj.longitude || latLonObj.latitude) {\n            return [latLonObj.longitude, latLonObj.latitude];\n        }\n    }\n    throw new Error('invalid geopoint specified');\n}\n/**\n * @internal\n */\nfunction _unpackListArgs(args) {\n    if (Array.isArray(args[0])) {\n        return args[0];\n    }\n    return args;\n}\n/**\n * Provides the ability to specify the query for a search query.\n *\n * @category Full Text Search\n */\nclass SearchQuery {\n    constructor(data) {\n        if (!data) {\n            data = {};\n        }\n        this._data = data;\n    }\n    toJSON() {\n        return this._data;\n    }\n    /**\n     * @internal\n     */\n    static toJSON(query) {\n        if (query.toJSON) {\n            return query.toJSON();\n        }\n        return query;\n    }\n    /**\n     * @internal\n     */\n    static hasProp(query, prop) {\n        const json = this.toJSON(query);\n        return json[prop] !== undefined;\n    }\n    static match(match) {\n        return new MatchSearchQuery(match);\n    }\n    static matchPhrase(phrase) {\n        return new MatchPhraseSearchQuery(phrase);\n    }\n    static regexp(regexp) {\n        return new RegexpSearchQuery(regexp);\n    }\n    static queryString(query) {\n        return new QueryStringSearchQuery(query);\n    }\n    static numericRange() {\n        return new NumericRangeSearchQuery();\n    }\n    static dateRange() {\n        return new DateRangeSearchQuery();\n    }\n    /**\n     * @internal\n     */\n    static conjuncts(...args) {\n        const queries = _unpackListArgs(args);\n        return new ConjunctionSearchQuery(...queries);\n    }\n    /**\n     * @internal\n     */\n    static disjuncts(...args) {\n        const queries = _unpackListArgs(args);\n        return new DisjunctionSearchQuery(...queries);\n    }\n    static boolean() {\n        return new BooleanSearchQuery();\n    }\n    static wildcard(wildcard) {\n        return new WildcardSearchQuery(wildcard);\n    }\n    /**\n     * @internal\n     */\n    static docIds(...args) {\n        const queries = _unpackListArgs(args);\n        return new DocIdSearchQuery(...queries);\n    }\n    static booleanField(val) {\n        return new BooleanFieldSearchQuery(val);\n    }\n    static term(term) {\n        return new TermSearchQuery(term);\n    }\n    static phrase(terms) {\n        return new PhraseSearchQuery(terms);\n    }\n    static prefix(prefix) {\n        return new PrefixSearchQuery(prefix);\n    }\n    static matchAll() {\n        return new MatchAllSearchQuery();\n    }\n    static matchNone() {\n        return new MatchNoneSearchQuery();\n    }\n    static geoDistance(lon, lat, distance) {\n        return new GeoDistanceSearchQuery(lon, lat, distance);\n    }\n    static geoBoundingBox(tl_lon, tl_lat, br_lon, br_lat) {\n        return new GeoBoundingBoxSearchQuery(tl_lon, tl_lat, br_lon, br_lat);\n    }\n    static geoPolygon(points) {\n        return new GeoPolygonSearchQuery(points);\n    }\n}\nexports.SearchQuery = SearchQuery;\n/**\n * Represents a match search query.\n *\n * @category Full Text Search\n */\nclass MatchSearchQuery extends SearchQuery {\n    /**\n     * @internal\n     */\n    constructor(match) {\n        super({\n            match: match,\n        });\n    }\n    operator(op) {\n        this._data.operator = op;\n        return this;\n    }\n    field(field) {\n        this._data.field = field;\n        return this;\n    }\n    analyzer(analyzer) {\n        this._data.analyzer = analyzer;\n        return this;\n    }\n    prefixLength(prefixLength) {\n        this._data.prefix_length = prefixLength;\n        return this;\n    }\n    fuzziness(fuzziness) {\n        this._data.fuzziness = fuzziness;\n        return this;\n    }\n    boost(boost) {\n        this._data.boost = boost;\n        return this;\n    }\n}\nexports.MatchSearchQuery = MatchSearchQuery;\n/**\n * Represents a match-phrase search query.\n *\n * @category Full Text Search\n */\nclass MatchPhraseSearchQuery extends SearchQuery {\n    /**\n     * @internal\n     */\n    constructor(phrase) {\n        super({\n            match_phrase: phrase,\n        });\n    }\n    field(field) {\n        this._data.field = field;\n        return this;\n    }\n    analyzer(analyzer) {\n        this._data.analyzer = analyzer;\n        return this;\n    }\n    boost(boost) {\n        this._data.boost = boost;\n        return this;\n    }\n}\nexports.MatchPhraseSearchQuery = MatchPhraseSearchQuery;\n/**\n * Represents a regexp search query.\n *\n * @category Full Text Search\n */\nclass RegexpSearchQuery extends SearchQuery {\n    /**\n     * @internal\n     */\n    constructor(regexp) {\n        super({\n            regexp: regexp,\n        });\n    }\n    field(field) {\n        this._data.field = field;\n        return this;\n    }\n    boost(boost) {\n        this._data.boost = boost;\n        return this;\n    }\n}\nexports.RegexpSearchQuery = RegexpSearchQuery;\n/**\n * Represents a query-string search query.\n *\n * @category Full Text Search\n */\nclass QueryStringSearchQuery extends SearchQuery {\n    /**\n     * @internal\n     */\n    constructor(query) {\n        super({\n            query: query,\n        });\n    }\n    boost(boost) {\n        this._data.boost = boost;\n        return this;\n    }\n}\nexports.QueryStringSearchQuery = QueryStringSearchQuery;\n/**\n * Represents a numeric-range search query.\n *\n * @category Full Text Search\n */\nclass NumericRangeSearchQuery extends SearchQuery {\n    /**\n     * @internal\n     */\n    constructor() {\n        super({});\n    }\n    min(min, inclusive) {\n        if (inclusive === undefined) {\n            inclusive = true;\n        }\n        this._data.min = min;\n        this._data.inclusive_min = inclusive;\n        return this;\n    }\n    max(max, inclusive) {\n        if (inclusive === undefined) {\n            inclusive = false;\n        }\n        this._data.max = max;\n        this._data.inclusive_max = inclusive;\n        return this;\n    }\n    field(field) {\n        this._data.field = field;\n        return this;\n    }\n    boost(boost) {\n        this._data.boost = boost;\n        return this;\n    }\n}\nexports.NumericRangeSearchQuery = NumericRangeSearchQuery;\n/**\n * Represents a date-range search query.\n *\n * @category Full Text Search\n */\nclass DateRangeSearchQuery extends SearchQuery {\n    /**\n     * @internal\n     */\n    constructor() {\n        super({});\n    }\n    start(start, inclusive) {\n        if (inclusive === undefined) {\n            inclusive = true;\n        }\n        if (start instanceof Date) {\n            this._data.start = start.toISOString();\n        }\n        else {\n            this._data.start = start;\n        }\n        this._data.inclusive_start = inclusive;\n        return this;\n    }\n    end(end, inclusive) {\n        if (inclusive === undefined) {\n            inclusive = false;\n        }\n        if (end instanceof Date) {\n            this._data.end = end.toISOString();\n        }\n        else {\n            this._data.end = end;\n        }\n        this._data.inclusive_end = inclusive;\n        return this;\n    }\n    field(field) {\n        this._data.field = field;\n        return this;\n    }\n    dateTimeParser(parser) {\n        this._data.datetime_parser = parser;\n        return this;\n    }\n    boost(boost) {\n        this._data.boost = boost;\n        return this;\n    }\n}\nexports.DateRangeSearchQuery = DateRangeSearchQuery;\n/**\n * Represents a conjunction search query.\n *\n * @category Full Text Search\n */\nclass ConjunctionSearchQuery extends SearchQuery {\n    /**\n     * @internal\n     */\n    constructor(...queries) {\n        super({\n            conjuncts: [],\n        });\n        this.and(...queries);\n    }\n    /**\n     * @internal\n     */\n    and(...args) {\n        const queries = _unpackListArgs(args);\n        for (let i = 0; i < queries.length; ++i) {\n            this._data.conjuncts.push(queries[i]);\n        }\n        return this;\n    }\n    boost(boost) {\n        this._data.boost = boost;\n        return this;\n    }\n}\nexports.ConjunctionSearchQuery = ConjunctionSearchQuery;\n/**\n * Represents a disjunction search query.\n *\n * @category Full Text Search\n */\nclass DisjunctionSearchQuery extends SearchQuery {\n    /**\n     * @internal\n     */\n    constructor(...queries) {\n        super({\n            disjuncts: [],\n        });\n        this.or(...queries);\n    }\n    /**\n     * @internal\n     */\n    or(...args) {\n        const queries = _unpackListArgs(args);\n        for (let i = 0; i < queries.length; ++i) {\n            this._data.disjuncts.push(queries[i]);\n        }\n        return this;\n    }\n    boost(boost) {\n        this._data.boost = boost;\n        return this;\n    }\n}\nexports.DisjunctionSearchQuery = DisjunctionSearchQuery;\n/**\n * Represents a boolean search query.\n *\n * @category Full Text Search\n */\nclass BooleanSearchQuery extends SearchQuery {\n    /**\n     * @internal\n     */\n    constructor() {\n        super({});\n        this._shouldMin = undefined;\n    }\n    must(query) {\n        if (!SearchQuery.hasProp(query, 'conjuncts')) {\n            query = new ConjunctionSearchQuery(query);\n        }\n        this._data.must = query;\n        return this;\n    }\n    should(query) {\n        if (!SearchQuery.hasProp(query, 'disjuncts')) {\n            query = new DisjunctionSearchQuery(query);\n        }\n        this._data.should = query;\n        return this;\n    }\n    mustNot(query) {\n        if (!SearchQuery.hasProp(query, 'disjuncts')) {\n            query = new DisjunctionSearchQuery(query);\n        }\n        this._data.must_not = query;\n        return this;\n    }\n    shouldMin(shouldMin) {\n        this._shouldMin = shouldMin;\n        return this;\n    }\n    boost(boost) {\n        this._data.boost = boost;\n        return this;\n    }\n    toJSON() {\n        const out = {};\n        if (this._data.must) {\n            out.must = SearchQuery.toJSON(this._data.must);\n        }\n        if (this._data.should) {\n            out.should = SearchQuery.toJSON(this._data.should);\n            if (this._shouldMin) {\n                out.should.min = this._shouldMin;\n            }\n        }\n        if (this._data.must_not) {\n            out.must_not = SearchQuery.toJSON(this._data.must_not);\n        }\n        return out;\n    }\n}\nexports.BooleanSearchQuery = BooleanSearchQuery;\n/**\n * Represents a wildcard search query.\n *\n * @category Full Text Search\n */\nclass WildcardSearchQuery extends SearchQuery {\n    /**\n     * @internal\n     */\n    constructor(wildcard) {\n        super({\n            wildcard: wildcard,\n        });\n    }\n    field(field) {\n        this._data.field = field;\n        return this;\n    }\n    boost(boost) {\n        this._data.boost = boost;\n        return this;\n    }\n}\nexports.WildcardSearchQuery = WildcardSearchQuery;\n/**\n * Represents a document-id search query.\n *\n * @category Full Text Search\n */\nclass DocIdSearchQuery extends SearchQuery {\n    /**\n     * @internal\n     */\n    constructor(...ids) {\n        super({\n            ids: [],\n        });\n        this.addDocIds(...ids);\n    }\n    /**\n     * @internal\n     */\n    addDocIds(...args) {\n        const ids = _unpackListArgs(args);\n        for (let i = 0; i < ids.length; ++i) {\n            this._data.ids.push(ids[i]);\n        }\n        return this;\n    }\n    field(field) {\n        this._data.field = field;\n        return this;\n    }\n    boost(boost) {\n        this._data.boost = boost;\n        return this;\n    }\n}\nexports.DocIdSearchQuery = DocIdSearchQuery;\n/**\n * Represents a boolean-field search query.\n *\n * @category Full Text Search\n */\nclass BooleanFieldSearchQuery extends SearchQuery {\n    /**\n     * @internal\n     */\n    constructor(val) {\n        super({\n            bool: val,\n        });\n    }\n    field(field) {\n        this._data.field = field;\n        return this;\n    }\n    boost(boost) {\n        this._data.boost = boost;\n        return this;\n    }\n}\nexports.BooleanFieldSearchQuery = BooleanFieldSearchQuery;\n/**\n * Represents a term search query.\n *\n * @category Full Text Search\n */\nclass TermSearchQuery extends SearchQuery {\n    /**\n     * @internal\n     */\n    constructor(term) {\n        super({\n            term: term,\n        });\n    }\n    field(field) {\n        this._data.field = field;\n        return this;\n    }\n    prefixLength(prefixLength) {\n        this._data.prefix_length = prefixLength;\n        return this;\n    }\n    fuzziness(fuzziness) {\n        this._data.fuzziness = fuzziness;\n        return this;\n    }\n    boost(boost) {\n        this._data.boost = boost;\n        return this;\n    }\n}\nexports.TermSearchQuery = TermSearchQuery;\n/**\n * Represents a phrase search query.\n *\n * @category Full Text Search\n */\nclass PhraseSearchQuery extends SearchQuery {\n    /**\n     * @internal\n     */\n    constructor(terms) {\n        super({\n            terms: terms,\n        });\n    }\n    field(field) {\n        this._data.field = field;\n        return this;\n    }\n    boost(boost) {\n        this._data.boost = boost;\n        return this;\n    }\n}\nexports.PhraseSearchQuery = PhraseSearchQuery;\n/**\n * Represents a prefix search query.\n *\n * @category Full Text Search\n */\nclass PrefixSearchQuery extends SearchQuery {\n    /**\n     * @internal\n     */\n    constructor(prefix) {\n        super({\n            prefix: prefix,\n        });\n    }\n    field(field) {\n        this._data.field = field;\n        return this;\n    }\n    boost(boost) {\n        this._data.boost = boost;\n        return this;\n    }\n}\nexports.PrefixSearchQuery = PrefixSearchQuery;\n/**\n * Represents a match-all search query.\n *\n * @category Full Text Search\n */\nclass MatchAllSearchQuery extends SearchQuery {\n    /**\n     * @internal\n     */\n    constructor() {\n        super({\n            match_all: null,\n        });\n    }\n}\nexports.MatchAllSearchQuery = MatchAllSearchQuery;\n/**\n * Represents a match-none search query.\n *\n * @category Full Text Search\n */\nclass MatchNoneSearchQuery extends SearchQuery {\n    /**\n     * @internal\n     */\n    constructor() {\n        super({\n            match_none: true,\n        });\n    }\n}\nexports.MatchNoneSearchQuery = MatchNoneSearchQuery;\n/**\n * Represents a geo-distance search query.\n *\n * @category Full Text Search\n */\nclass GeoDistanceSearchQuery extends SearchQuery {\n    /**\n     * @internal\n     */\n    constructor(lon, lat, distance) {\n        super({\n            location: [lon, lat],\n            distance: distance,\n        });\n    }\n    field(field) {\n        this._data.field = field;\n        return this;\n    }\n    boost(boost) {\n        this._data.boost = boost;\n        return this;\n    }\n}\nexports.GeoDistanceSearchQuery = GeoDistanceSearchQuery;\n/**\n * Represents a geo-bounding-box search query.\n *\n * @category Full Text Search\n */\nclass GeoBoundingBoxSearchQuery extends SearchQuery {\n    /**\n     * @internal\n     */\n    constructor(tl_lon, tl_lat, br_lon, br_lat) {\n        super({\n            top_left: [tl_lon, tl_lat],\n            bottom_right: [br_lon, br_lat],\n        });\n    }\n    field(field) {\n        this._data.field = field;\n        return this;\n    }\n    boost(boost) {\n        this._data.boost = boost;\n        return this;\n    }\n}\nexports.GeoBoundingBoxSearchQuery = GeoBoundingBoxSearchQuery;\n/**\n * Represents a geo-polygon search query.\n *\n * @category Full Text Search\n */\nclass GeoPolygonSearchQuery extends SearchQuery {\n    /**\n     * @internal\n     */\n    constructor(points) {\n        const mappedPoints = points.map((v) => _parseGeoPoint(v));\n        super({\n            polygon_points: mappedPoints,\n        });\n    }\n    field(field) {\n        this._data.field = field;\n        return this;\n    }\n    boost(boost) {\n        this._data.boost = boost;\n        return this;\n    }\n}\nexports.GeoPolygonSearchQuery = GeoPolygonSearchQuery;\n"],"x_google_ignoreList":[0],"mappings":"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"}