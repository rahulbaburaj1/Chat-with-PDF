{"version":3,"file":"cassandra.d.ts","names":["BaseListChatMessageHistory","BaseMessage","CassandraClientArgs","CassandraChatMessageHistoryOptions","CassandraChatMessageHistory","Promise"],"sources":["../../../src/stores/message/cassandra.d.ts"],"sourcesContent":["import { BaseListChatMessageHistory } from \"@langchain/core/chat_history\";\nimport { BaseMessage } from \"@langchain/core/messages\";\nimport { CassandraClientArgs } from \"../../utils/cassandra.js\";\nexport interface CassandraChatMessageHistoryOptions extends CassandraClientArgs {\n    keyspace: string;\n    table: string;\n    sessionId: string;\n}\n/**\n * Class for storing chat message history within Cassandra. It extends the\n * BaseListChatMessageHistory class and provides methods to get, add, and\n * clear messages.\n * @example\n * ```typescript\n * const chatHistory = new CassandraChatMessageHistory({\n *   cloud: {\n *     secureConnectBundle: \"<path to your secure bundle>\",\n *   },\n *   credentials: {\n *     username: \"token\",\n *     password: \"<your Cassandra access token>\",\n *   },\n *   keyspace: \"langchain\",\n *   table: \"message_history\",\n *   sessionId: \"<some unique session identifier>\",\n * });\n *\n * const chain = new ConversationChain({\n *   llm: new ChatOpenAI({ model: \"gpt-4o-mini\" }),\n *   memory: chatHistory,\n * });\n *\n * const response = await chain.invoke({\n *   input: \"What did I just say my name was?\",\n * });\n * console.log({ response });\n * ```\n */\nexport declare class CassandraChatMessageHistory extends BaseListChatMessageHistory {\n    lc_namespace: string[];\n    private cassandraTable;\n    private sessionId;\n    private options;\n    private colSessionId;\n    private colMessageTs;\n    private colMessageType;\n    private colData;\n    constructor(options: CassandraChatMessageHistoryOptions);\n    /**\n     * Method to get all the messages stored in the Cassandra database.\n     * @returns Array of stored BaseMessage instances.\n     */\n    getMessages(): Promise<BaseMessage[]>;\n    /**\n     * Method to add a new message to the Cassandra database.\n     * @param message The BaseMessage instance to add.\n     * @returns A promise that resolves when the message has been added.\n     */\n    addMessage(message: BaseMessage): Promise<void>;\n    /**\n     * Method to clear all the messages from the Cassandra database.\n     * @returns A promise that resolves when all messages have been cleared.\n     */\n    clear(): Promise<void>;\n    private ensureTable;\n}\n"],"mappings":";;;;;;;;UAGiBG,kCAAAA,SAA2CD;;;;;;;;AAA5D;AAmCA;;;;;;;;;AAAmF;;;;;;;;;;;;;;;;;cAA9DE,2BAAAA,SAAoCJ,0BAAAA;;;;;;;;;uBAShCG;;;;;iBAKNE,QAAQJ;;;;;;sBAMHA,cAAcI;;;;;WAKzBA"}