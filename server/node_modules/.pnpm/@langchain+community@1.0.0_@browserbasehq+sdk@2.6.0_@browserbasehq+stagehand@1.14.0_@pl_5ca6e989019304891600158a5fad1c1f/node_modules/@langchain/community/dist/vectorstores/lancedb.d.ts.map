{"version":3,"file":"lancedb.d.ts","names":["Table","EmbeddingsInterface","VectorStore","Document","LanceDBArgs","LanceDB","Promise"],"sources":["../../src/vectorstores/lancedb.d.ts"],"sourcesContent":["import { Table } from \"@lancedb/lancedb\";\nimport type { EmbeddingsInterface } from \"@langchain/core/embeddings\";\nimport { VectorStore } from \"@langchain/core/vectorstores\";\nimport { Document } from \"@langchain/core/documents\";\n/**\n * Defines the arguments for the LanceDB class constructor. It includes a\n * table and an optional textKey.\n */\nexport type LanceDBArgs = {\n    table?: Table;\n    textKey?: string;\n    uri?: string;\n    tableName?: string;\n    mode?: \"create\" | \"overwrite\";\n};\n/**\n * A wrapper for an open-source database for vector-search with persistent\n * storage. It simplifies retrieval, filtering, and management of\n * embeddings.\n */\nexport declare class LanceDB extends VectorStore {\n    private table?;\n    private textKey;\n    private uri;\n    private tableName;\n    private mode?;\n    constructor(embeddings: EmbeddingsInterface, args?: LanceDBArgs);\n    /**\n     * Adds documents to the database.\n     * @param documents The documents to be added.\n     * @returns A Promise that resolves when the documents have been added.\n     */\n    addDocuments(documents: Document[]): Promise<void>;\n    _vectorstoreType(): string;\n    /**\n     * Adds vectors and their corresponding documents to the database.\n     * @param vectors The vectors to be added.\n     * @param documents The corresponding documents to be added.\n     * @returns A Promise that resolves when the vectors and documents have been added.\n     */\n    addVectors(vectors: number[][], documents: Document[]): Promise<void>;\n    /**\n     * Performs a similarity search on the vectors in the database and returns\n     * the documents and their scores.\n     * @param query The query vector.\n     * @param k The number of results to return.\n     * @returns A Promise that resolves with an array of tuples, each containing a Document and its score.\n     */\n    similaritySearchVectorWithScore(query: number[], k: number): Promise<[Document, number][]>;\n    /**\n     * Creates a new instance of LanceDB from texts.\n     * @param texts The texts to be converted into documents.\n     * @param metadatas The metadata for the texts.\n     * @param embeddings The embeddings to be managed.\n     * @param dbConfig The configuration for the LanceDB instance.\n     * @returns A Promise that resolves with a new instance of LanceDB.\n     */\n    static fromTexts(texts: string[], metadatas: object[] | object, embeddings: EmbeddingsInterface, dbConfig?: LanceDBArgs): Promise<LanceDB>;\n    /**\n     * Creates a new instance of LanceDB from documents.\n     * @param docs The documents to be added to the database.\n     * @param embeddings The embeddings to be managed.\n     * @param dbConfig The configuration for the LanceDB instance.\n     * @returns A Promise that resolves with a new instance of LanceDB.\n     */\n    static fromDocuments(docs: Document[], embeddings: EmbeddingsInterface, dbConfig?: LanceDBArgs): Promise<LanceDB>;\n}\n"],"mappings":";;;;;;;;;;;;;KAQYI,WAAAA;UACAJ;;;EADAI,SAAAA,CAAAA,EAAAA,MAAW;EAYFC,IAAAA,CAAAA,EAAAA,QAAO,GAAA,WAAA;CAAA;;;;;;AAoBgCC,cApBvCD,OAAAA,SAAgBH,WAAAA,CAoBuBI;EAAO,QAQOH,KAAAA;EAAQ,QAAjBG,OAAAA;EAAO,QASQL,GAAAA;EAAmB,QAAaG,SAAAA;EAAW,QAAWC,IAAAA;EAAO,WAAfC,CAAAA,UAAAA,EA/BlGL,mBA+BkGK,EAAAA,IAAAA,CAAAA,EA/BtEF,WA+BsEE;EAAO;;;;;EAQzB,YA7CvEJ,CAAAA,SAAAA,EAYTC,QAZSD,EAAAA,CAAAA,EAYII,OAZJJ,CAAAA,IAAAA,CAAAA;EAAW,gBAAA,CAAA,CAAA,EAAA,MAAA;;;;;;;6CAoBDC,aAAaG;;;;;;;;+DAQKA,SAASH;;;;;;;;;8EASMF,gCAAgCG,cAAcE,QAAQD;;;;;;;;6BAQvGF,wBAAwBF,gCAAgCG,cAAcE,QAAQD"}