{"version":3,"file":"cluster.cjs","names":[],"sources":["../../../../../../../../../node_modules/.pnpm/couchbase@4.5.0/node_modules/couchbase/dist/cluster.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Cluster = void 0;\nconst analyticsexecutor_1 = require(\"./analyticsexecutor\");\nconst analyticsindexmanager_1 = require(\"./analyticsindexmanager\");\nconst binding_1 = __importDefault(require(\"./binding\"));\nconst bindingutilities_1 = require(\"./bindingutilities\");\nconst bucket_1 = require(\"./bucket\");\nconst bucketmanager_1 = require(\"./bucketmanager\");\nconst configProfile_1 = require(\"./configProfile\");\nconst connspec_1 = require(\"./connspec\");\nconst diagnosticsexecutor_1 = require(\"./diagnosticsexecutor\");\nconst eventingfunctionmanager_1 = require(\"./eventingfunctionmanager\");\nconst queryexecutor_1 = require(\"./queryexecutor\");\nconst queryindexmanager_1 = require(\"./queryindexmanager\");\nconst searchexecutor_1 = require(\"./searchexecutor\");\nconst searchindexmanager_1 = require(\"./searchindexmanager\");\nconst transactions_1 = require(\"./transactions\");\nconst transcoders_1 = require(\"./transcoders\");\nconst usermanager_1 = require(\"./usermanager\");\nconst utilities_1 = require(\"./utilities\");\nconst utilities_internal_1 = require(\"./utilities_internal\");\nconst util_1 = require(\"util\");\n/**\n * Exposes the operations which are available to be performed against a cluster.\n * Namely the ability to access to Buckets as well as performing management\n * operations against the cluster.\n *\n * @category Core\n */\nclass Cluster {\n    /**\n     * @internal\n     */\n    get conn() {\n        return this._conn;\n    }\n    /**\n    @internal\n    */\n    get transcoder() {\n        return this._transcoder;\n    }\n    /**\n    @internal\n    */\n    get kvTimeout() {\n        return this._kvTimeout;\n    }\n    /**\n    @internal\n    */\n    get kvDurableTimeout() {\n        return this._kvDurableTimeout;\n    }\n    /**\n    @internal\n    */\n    get viewTimeout() {\n        return this._viewTimeout;\n    }\n    /**\n    @internal\n    */\n    get queryTimeout() {\n        return this._queryTimeout;\n    }\n    /**\n    @internal\n    */\n    get analyticsTimeout() {\n        return this._analyticsTimeout;\n    }\n    /**\n    @internal\n    */\n    get searchTimeout() {\n        return this._searchTimeout;\n    }\n    /**\n    @internal\n    */\n    get managementTimeout() {\n        return this._managementTimeout;\n    }\n    /**\n    @internal\n    */\n    get bootstrapTimeout() {\n        return this._bootstrapTimeout;\n    }\n    /**\n    @internal\n    */\n    get connectTimeout() {\n        return this._connectTimeout;\n    }\n    /**\n    @internal\n    */\n    get resolveTimeout() {\n        return this._resolveTimeout;\n    }\n    /**\n     * @internal\n     */\n    [util_1.inspect.custom]() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { _auth, ...rest } = this;\n        return { ...rest, _auth: '***hidden***' };\n    }\n    /**\n     * @internal\n     */\n    toJSON() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { _auth, ...rest } = this;\n        return { ...rest, _auth: '***hidden***' };\n    }\n    /**\n    @internal\n    @deprecated Use the static sdk-level {@link connect} method instead.\n    */\n    constructor(connStr, options) {\n        var _a, _b, _c;\n        if (!options) {\n            options = {};\n        }\n        if (!options.security) {\n            options.security = {};\n        }\n        if (!options.timeouts) {\n            options.timeouts = {};\n        }\n        this._connStr = connStr;\n        this._trustStorePath = options.security.trustStorePath || '';\n        if (options.configProfile) {\n            configProfile_1.knownProfiles.applyProfile(options.configProfile, options);\n        }\n        this._kvTimeout = options.timeouts.kvTimeout || 2500;\n        this._kvDurableTimeout = options.timeouts.kvDurableTimeout || 10000;\n        this._viewTimeout = options.timeouts.viewTimeout || 75000;\n        this._queryTimeout = options.timeouts.queryTimeout || 75000;\n        this._analyticsTimeout = options.timeouts.analyticsTimeout || 75000;\n        this._searchTimeout = options.timeouts.searchTimeout || 75000;\n        this._managementTimeout = options.timeouts.managementTimeout || 75000;\n        this._bootstrapTimeout = (_a = options.timeouts) === null || _a === void 0 ? void 0 : _a.bootstrapTimeout;\n        this._connectTimeout = (_b = options.timeouts) === null || _b === void 0 ? void 0 : _b.connectTimeout;\n        this._resolveTimeout = (_c = options.timeouts) === null || _c === void 0 ? void 0 : _c.resolveTimeout;\n        if (options.transcoder) {\n            this._transcoder = options.transcoder;\n        }\n        else {\n            this._transcoder = new transcoders_1.DefaultTranscoder();\n        }\n        if (options.preferredServerGroup) {\n            this._preferredServerGroup = options.preferredServerGroup;\n        }\n        if (options.transactions) {\n            this._txnConfig = options.transactions;\n        }\n        else {\n            this._txnConfig = {};\n        }\n        if (options.username || options.password) {\n            if (options.authenticator) {\n                throw new Error('Cannot specify authenticator along with username/password.');\n            }\n            this._auth = {\n                username: options.username || '',\n                password: options.password || '',\n            };\n        }\n        else if (options.authenticator) {\n            this._auth = options.authenticator;\n        }\n        else {\n            this._auth = {\n                username: '',\n                password: '',\n            };\n        }\n        if (options.dnsConfig &&\n            (options.dnsConfig.nameserver ||\n                options.dnsConfig.port ||\n                options.dnsConfig.dnsSrvTimeout)) {\n            this._dnsConfig = {\n                nameserver: options.dnsConfig.nameserver,\n                port: options.dnsConfig.port,\n                dnsSrvTimeout: options.dnsConfig.dnsSrvTimeout || 500,\n            };\n        }\n        else {\n            this._dnsConfig = null;\n        }\n        if (options.appTelemetryConfig) {\n            this._appTelemetryConfig = {\n                enabled: options.appTelemetryConfig.enabled,\n                endpoint: options.appTelemetryConfig.endpoint,\n                backoff: options.appTelemetryConfig.backoff,\n                pingInterval: options.appTelemetryConfig.pingInterval,\n                pingTimeout: options.appTelemetryConfig.pingTimeout,\n            };\n        }\n        else {\n            this._appTelemetryConfig = null;\n        }\n        this._openBuckets = [];\n        this._conn = new binding_1.default.Connection();\n    }\n    /**\n    @internal\n    */\n    static async connect(connStr, options, callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            const cluster = new Cluster(connStr, options);\n            await cluster._connect();\n            return cluster;\n        }, callback);\n    }\n    /**\n     * Creates a Bucket object reference to a specific bucket.\n     *\n     * @param bucketName The name of the bucket to reference.\n     */\n    bucket(bucketName) {\n        if (!this._openBuckets.includes(bucketName)) {\n            this._conn.openBucket(bucketName, (err) => {\n                if (err) {\n                    // BUG(JSCBC-1011): Move this to log framework once it is implemented.\n                    console.error('failed to open bucket: %O', err);\n                }\n            });\n            this._openBuckets.push(bucketName);\n        }\n        return new bucket_1.Bucket(this, bucketName);\n    }\n    /**\n     * Returns a UserManager which can be used to manage the users\n     * of this cluster.\n     */\n    users() {\n        return new usermanager_1.UserManager(this);\n    }\n    /**\n     * Returns a BucketManager which can be used to manage the buckets\n     * of this cluster.\n     */\n    buckets() {\n        return new bucketmanager_1.BucketManager(this);\n    }\n    /**\n     * Returns a QueryIndexManager which can be used to manage the query indexes\n     * of this cluster.\n     */\n    queryIndexes() {\n        return new queryindexmanager_1.QueryIndexManager(this);\n    }\n    /**\n     * Returns a AnalyticsIndexManager which can be used to manage the analytics\n     * indexes of this cluster.\n     */\n    analyticsIndexes() {\n        return new analyticsindexmanager_1.AnalyticsIndexManager(this);\n    }\n    /**\n     * Returns a SearchIndexManager which can be used to manage the search\n     * indexes of this cluster.\n     */\n    searchIndexes() {\n        return new searchindexmanager_1.SearchIndexManager(this);\n    }\n    /**\n     * Returns a EventingFunctionManager which can be used to manage the eventing\n     * functions of this cluster.\n     * Uncommitted: This API is subject to change in the future.\n     */\n    eventingFunctions() {\n        return new eventingfunctionmanager_1.EventingFunctionManager(this);\n    }\n    /**\n     * Returns a Transactions object which can be used to perform transactions\n     * on this cluster.\n     */\n    transactions() {\n        if (!this._transactions) {\n            this._transactions = new transactions_1.Transactions(this, this._txnConfig);\n        }\n        return this._transactions;\n    }\n    /**\n     * Executes a N1QL query against the cluster.\n     *\n     * @param statement The N1QL statement to execute.\n     * @param options Optional parameters for this operation.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    query(statement, options, callback) {\n        if (options instanceof Function) {\n            callback = arguments[1];\n            options = undefined;\n        }\n        if (!options) {\n            options = {};\n        }\n        const exec = new queryexecutor_1.QueryExecutor(this);\n        const options_ = options;\n        return utilities_1.PromiseHelper.wrapAsync(() => exec.query(statement, options_), callback);\n    }\n    /**\n     * Executes an analytics query against the cluster.\n     *\n     * @param statement The analytics statement to execute.\n     * @param options Optional parameters for this operation.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    analyticsQuery(statement, options, callback) {\n        if (options instanceof Function) {\n            callback = arguments[1];\n            options = undefined;\n        }\n        if (!options) {\n            options = {};\n        }\n        const exec = new analyticsexecutor_1.AnalyticsExecutor(this);\n        const options_ = options;\n        return utilities_1.PromiseHelper.wrapAsync(() => exec.query(statement, options_), callback);\n    }\n    /**\n     * Executes a search query against the cluster.\n     *\n     * @param indexName The name of the index to query.\n     * @param query The SearchQuery describing the query to execute.\n     * @param options Optional parameters for this operation.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    searchQuery(indexName, query, options, callback) {\n        if (options instanceof Function) {\n            callback = arguments[2];\n            options = undefined;\n        }\n        if (!options) {\n            options = {};\n        }\n        const exec = new searchexecutor_1.SearchExecutor(this);\n        const options_ = options;\n        return utilities_1.PromiseHelper.wrapAsync(() => exec.query(indexName, query, options_), callback);\n    }\n    /**\n     * Executes a search query against the cluster.\n     *\n     * @param indexName The name of the index to query.\n     * @param request The SearchRequest describing the search to execute.\n     * @param options Optional parameters for this operation.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    search(indexName, request, options, callback) {\n        if (options instanceof Function) {\n            callback = arguments[2];\n            options = undefined;\n        }\n        if (!options) {\n            options = {};\n        }\n        const exec = new searchexecutor_1.SearchExecutor(this);\n        const options_ = options;\n        return utilities_1.PromiseHelper.wrapAsync(() => exec.query(indexName, request, options_), callback);\n    }\n    /**\n     * Returns a diagnostics report about the currently active connections with the\n     * cluster.  Includes information about remote and local addresses, last activity,\n     * and other diagnostics information.\n     *\n     * @param options Optional parameters for this operation.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    diagnostics(options, callback) {\n        if (options instanceof Function) {\n            callback = arguments[0];\n            options = undefined;\n        }\n        if (!options) {\n            options = {};\n        }\n        const exec = new diagnosticsexecutor_1.DiagnoticsExecutor(this);\n        const options_ = options;\n        return utilities_1.PromiseHelper.wrapAsync(() => exec.diagnostics(options_), callback);\n    }\n    /**\n     * Performs a ping operation against the cluster.  Pinging the services which\n     * are specified (or all services if none are specified).  Returns a report\n     * which describes the outcome of the ping operations which were performed.\n     *\n     * @param options Optional parameters for this operation.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    ping(options, callback) {\n        if (options instanceof Function) {\n            callback = arguments[0];\n            options = undefined;\n        }\n        if (!options) {\n            options = {};\n        }\n        const exec = new diagnosticsexecutor_1.PingExecutor(this);\n        const options_ = options;\n        return utilities_1.PromiseHelper.wrapAsync(() => exec.ping(options_), callback);\n    }\n    /**\n     * Shuts down this cluster object.  Cleaning up all resources associated with it.\n     *\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async close(callback) {\n        if (this._transactions) {\n            await this._transactions._close();\n            this._transactions = undefined;\n        }\n        return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n            this._conn.shutdown((cppErr) => {\n                wrapCallback((0, bindingutilities_1.errorFromCpp)(cppErr));\n            });\n        }, callback);\n    }\n    async _connect() {\n        return new Promise((resolve, reject) => {\n            const dsnObj = connspec_1.ConnSpec.parse(this._connStr);\n            dsnObj.options.user_agent_extra = (0, utilities_internal_1.generateClientString)();\n            //trust_store_path is legacy, C++ SDK expects trust_certificate\n            if ('trust_store_path' in dsnObj.options &&\n                !('trust_certificate' in dsnObj.options)) {\n                dsnObj.options.trust_certificate = dsnObj.options.trust_store_path;\n                delete dsnObj.options['trust_store_path'];\n            }\n            //if trust store was passed in via `SecurityConfig` override connstr\n            if (this._trustStorePath) {\n                dsnObj.options.trust_certificate = this._trustStorePath;\n            }\n            if (this.bootstrapTimeout) {\n                dsnObj.options['bootstrap_timeout'] = this.bootstrapTimeout.toString();\n            }\n            if (this.connectTimeout) {\n                dsnObj.options['kv_connect_timeout'] = this.connectTimeout.toString();\n            }\n            if (this.resolveTimeout) {\n                dsnObj.options['resolve_timeout'] = this.resolveTimeout.toString();\n            }\n            if (this._preferredServerGroup) {\n                dsnObj.options['server_group'] = this._preferredServerGroup;\n            }\n            const connStr = dsnObj.toString();\n            const authOpts = {};\n            // lets allow `allowed_sasl_mechanisms` to override legacy connstr option\n            for (const saslKey of ['sasl_mech_force', 'allowed_sasl_mechanisms']) {\n                if (!(saslKey in dsnObj.options)) {\n                    continue;\n                }\n                if (typeof dsnObj.options[saslKey] === 'string') {\n                    authOpts.allowed_sasl_mechanisms = [dsnObj.options[saslKey]];\n                }\n                else {\n                    authOpts.allowed_sasl_mechanisms = dsnObj.options[saslKey];\n                }\n                delete dsnObj.options[saslKey];\n            }\n            if (this._auth) {\n                const passAuth = this._auth;\n                if (passAuth.username || passAuth.password) {\n                    authOpts.username = passAuth.username;\n                    authOpts.password = passAuth.password;\n                    if (passAuth.allowed_sasl_mechanisms) {\n                        authOpts.allowed_sasl_mechanisms = passAuth.allowed_sasl_mechanisms;\n                    }\n                }\n                const certAuth = this._auth;\n                if (certAuth.certificatePath || certAuth.keyPath) {\n                    authOpts.certificate_path = certAuth.certificatePath;\n                    authOpts.key_path = certAuth.keyPath;\n                }\n            }\n            this._conn.connect(connStr, authOpts, this._dnsConfig, this._appTelemetryConfig, (cppErr) => {\n                if (cppErr) {\n                    const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                    return reject(err);\n                }\n                resolve(null);\n            });\n        });\n    }\n}\nexports.Cluster = Cluster;\n"],"x_google_ignoreList":[0],"mappings":"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"}