{"version":3,"file":"async_caller.js","names":["PQueueMod"],"sources":["../../../../../../../../../../node_modules/.pnpm/langsmith@0.3.74_@opentelemetry+api@1.9.0_openai@5.12.2_ws@8.18.3_bufferutil@4.0.9_utf-8-validate@6.0.5__zod@3.25.76_/node_modules/langsmith/dist/utils/async_caller.js"],"sourcesContent":["import pRetry from \"p-retry\";\nimport PQueueMod from \"p-queue\";\nconst STATUS_RETRYABLE = [\n    429, // Too Many Requests\n    500, // Internal Server Error\n    502, // Bad Gateway\n    503, // Service Unavailable\n    504, // Gateway Timeout\n];\n/**\n * A class that can be used to make async calls with concurrency and retry logic.\n *\n * This is useful for making calls to any kind of \"expensive\" external resource,\n * be it because it's rate-limited, subject to network issues, etc.\n *\n * Concurrent calls are limited by the `maxConcurrency` parameter, which defaults\n * to `Infinity`. This means that by default, all calls will be made in parallel.\n *\n * Retries are limited by the `maxRetries` parameter, which defaults to 6. This\n * means that by default, each call will be retried up to 6 times, with an\n * exponential backoff between each attempt.\n */\nexport class AsyncCaller {\n    constructor(params) {\n        Object.defineProperty(this, \"maxConcurrency\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxRetries\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"queue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"onFailedResponseHook\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxConcurrency = params.maxConcurrency ?? Infinity;\n        this.maxRetries = params.maxRetries ?? 6;\n        if (\"default\" in PQueueMod) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.queue = new PQueueMod.default({\n                concurrency: this.maxConcurrency,\n            });\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.queue = new PQueueMod({ concurrency: this.maxConcurrency });\n        }\n        this.onFailedResponseHook = params?.onFailedResponseHook;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    call(callable, ...args) {\n        const onFailedResponseHook = this.onFailedResponseHook;\n        return this.queue.add(() => pRetry(() => callable(...args).catch((error) => {\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (error instanceof Error) {\n                throw error;\n            }\n            else {\n                throw new Error(error);\n            }\n        }), {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            async onFailedAttempt(error) {\n                if (error.message.startsWith(\"Cancel\") ||\n                    error.message.startsWith(\"TimeoutError\") ||\n                    error.name === \"TimeoutError\" ||\n                    error.message.startsWith(\"AbortError\")) {\n                    throw error;\n                }\n                if (error?.code === \"ECONNABORTED\") {\n                    throw error;\n                }\n                const response = error?.response;\n                if (onFailedResponseHook) {\n                    const handled = await onFailedResponseHook(response);\n                    if (handled) {\n                        return;\n                    }\n                }\n                const status = response?.status ?? error?.status;\n                if (status) {\n                    if (!STATUS_RETRYABLE.includes(+status)) {\n                        throw error;\n                    }\n                }\n            },\n            retries: this.maxRetries,\n            randomize: true,\n        }), { throwOnTimeout: true });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callWithOptions(options, callable, ...args) {\n        // Note this doesn't cancel the underlying request,\n        // when available prefer to use the signal option of the underlying call\n        if (options.signal) {\n            return Promise.race([\n                this.call(callable, ...args),\n                new Promise((_, reject) => {\n                    options.signal?.addEventListener(\"abort\", () => {\n                        reject(new Error(\"AbortError\"));\n                    });\n                }),\n            ]);\n        }\n        return this.call(callable, ...args);\n    }\n}\n"],"x_google_ignoreList":[0],"mappings":";;;;;;;AAEA,MAAM,mBAAmB;CACrB;CACA;CACA;CACA;CACA;AACH;;;;;;;;;;;;;;AAcD,IAAa,cAAb,MAAyB;CACrB,YAAY,QAAQ;EAChB,OAAO,eAAe,MAAM,kBAAkB;GAC1C,YAAY;GACZ,cAAc;GACd,UAAU;GACV,OAAO,KAAK;EACf,EAAC;EACF,OAAO,eAAe,MAAM,cAAc;GACtC,YAAY;GACZ,cAAc;GACd,UAAU;GACV,OAAO,KAAK;EACf,EAAC;EACF,OAAO,eAAe,MAAM,SAAS;GACjC,YAAY;GACZ,cAAc;GACd,UAAU;GACV,OAAO,KAAK;EACf,EAAC;EACF,OAAO,eAAe,MAAM,wBAAwB;GAChD,YAAY;GACZ,cAAc;GACd,UAAU;GACV,OAAO,KAAK;EACf,EAAC;EACF,KAAK,iBAAiB,OAAO,kBAAkB;EAC/C,KAAK,aAAa,OAAO,cAAc;AACvC,MAAI,aAAaA,qBAEb,KAAK,QAAQ,wBAAI,QAAkB,EAC/B,aAAa,KAAK,eACrB;OAID,KAAK,QAAQ,IAAIA,oBAAU,EAAE,aAAa,KAAK,eAAgB;EAEnE,KAAK,uBAAuB,QAAQ;CACvC;CAED,KAAK,UAAU,GAAG,MAAM;EACpB,MAAM,uBAAuB,KAAK;AAClC,SAAO,KAAK,MAAM,IAAI,kCAAa,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,UAAU;AAExE,OAAI,iBAAiB,MACjB,OAAM;OAGN,OAAM,IAAI,MAAM;EAEvB,EAAC,EAAE;GAEA,MAAM,gBAAgB,OAAO;AACzB,QAAI,MAAM,QAAQ,WAAW,SAAS,IAClC,MAAM,QAAQ,WAAW,eAAe,IACxC,MAAM,SAAS,kBACf,MAAM,QAAQ,WAAW,aAAa,CACtC,OAAM;AAEV,QAAI,OAAO,SAAS,eAChB,OAAM;IAEV,MAAM,WAAW,OAAO;AACxB,QAAI,sBAAsB;KACtB,MAAM,UAAU,MAAM,qBAAqB,SAAS;AACpD,SAAI,QACA;IAEP;IACD,MAAM,SAAS,UAAU,UAAU,OAAO;AAC1C,QAAI,QACA;SAAI,CAAC,iBAAiB,SAAS,CAAC,OAAO,CACnC,OAAM;IACT;GAER;GACD,SAAS,KAAK;GACd,WAAW;EACd,EAAC,EAAE,EAAE,gBAAgB,KAAM,EAAC;CAChC;CAED,gBAAgB,SAAS,UAAU,GAAG,MAAM;AAGxC,MAAI,QAAQ,OACR,QAAO,QAAQ,KAAK,CAChB,KAAK,KAAK,UAAU,GAAG,KAAK,EAC5B,IAAI,QAAQ,CAAC,GAAG,WAAW;GACvB,QAAQ,QAAQ,iBAAiB,SAAS,MAAM;IAC5C,uBAAO,IAAI,MAAM,cAAc;GAClC,EAAC;EACL,EACJ,EAAC;AAEN,SAAO,KAAK,KAAK,UAAU,GAAG,KAAK;CACtC;AACJ"}