{"version":3,"file":"env.cjs","names":["__version__"],"sources":["../../../../../../../../../../node_modules/.pnpm/langsmith@0.3.74_@opentelemetry+api@1.9.0_openai@5.12.2_ws@8.18.3_bufferutil@4.0.9_utf-8-validate@6.0.5__zod@3.25.76_/node_modules/langsmith/dist/utils/env.js"],"sourcesContent":["// Inlined from https://github.com/flexdinesh/browser-or-node\nimport { __version__ } from \"../index.js\";\nlet globalEnv;\nexport const isBrowser = () => typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\nexport const isWebWorker = () => typeof globalThis === \"object\" &&\n    globalThis.constructor &&\n    globalThis.constructor.name === \"DedicatedWorkerGlobalScope\";\nexport const isJsDom = () => (typeof window !== \"undefined\" && window.name === \"nodejs\") ||\n    (typeof navigator !== \"undefined\" && navigator.userAgent.includes(\"jsdom\"));\n// Supabase Edge Function provides a `Deno` global object\n// without `version` property\nexport const isDeno = () => typeof Deno !== \"undefined\";\n// Mark not-as-node if in Supabase Edge Function\nexport const isNode = () => typeof process !== \"undefined\" &&\n    typeof process.versions !== \"undefined\" &&\n    typeof process.versions.node !== \"undefined\" &&\n    !isDeno();\nexport const getEnv = () => {\n    if (globalEnv) {\n        return globalEnv;\n    }\n    // @ts-expect-error Bun types are not imported due to conflicts with Node types\n    if (typeof Bun !== \"undefined\") {\n        globalEnv = \"bun\";\n    }\n    else if (isBrowser()) {\n        globalEnv = \"browser\";\n    }\n    else if (isNode()) {\n        globalEnv = \"node\";\n    }\n    else if (isWebWorker()) {\n        globalEnv = \"webworker\";\n    }\n    else if (isJsDom()) {\n        globalEnv = \"jsdom\";\n    }\n    else if (isDeno()) {\n        globalEnv = \"deno\";\n    }\n    else {\n        globalEnv = \"other\";\n    }\n    return globalEnv;\n};\nlet runtimeEnvironment;\nexport function getRuntimeEnvironment() {\n    if (runtimeEnvironment === undefined) {\n        const env = getEnv();\n        const releaseEnv = getShas();\n        runtimeEnvironment = {\n            library: \"langsmith\",\n            runtime: env,\n            sdk: \"langsmith-js\",\n            sdk_version: __version__,\n            ...releaseEnv,\n        };\n    }\n    return runtimeEnvironment;\n}\n/**\n * Retrieves the LangSmith-specific metadata from the current runtime environment.\n *\n * @returns {Record<string, string>}\n *  - A record of LangSmith-specific metadata environment variables.\n */\nexport function getLangSmithEnvVarsMetadata() {\n    const allEnvVars = getLangSmithEnvironmentVariables();\n    const envVars = {};\n    const excluded = [\n        \"LANGCHAIN_API_KEY\",\n        \"LANGCHAIN_ENDPOINT\",\n        \"LANGCHAIN_TRACING_V2\",\n        \"LANGCHAIN_PROJECT\",\n        \"LANGCHAIN_SESSION\",\n        \"LANGSMITH_API_KEY\",\n        \"LANGSMITH_ENDPOINT\",\n        \"LANGSMITH_TRACING_V2\",\n        \"LANGSMITH_PROJECT\",\n        \"LANGSMITH_SESSION\",\n    ];\n    for (const [key, value] of Object.entries(allEnvVars)) {\n        if (typeof value === \"string\" &&\n            !excluded.includes(key) &&\n            !key.toLowerCase().includes(\"key\") &&\n            !key.toLowerCase().includes(\"secret\") &&\n            !key.toLowerCase().includes(\"token\")) {\n            if (key === \"LANGCHAIN_REVISION_ID\") {\n                envVars[\"revision_id\"] = value;\n            }\n            else {\n                envVars[key] = value;\n            }\n        }\n    }\n    return envVars;\n}\n/**\n * Retrieves only the LangChain/LangSmith-prefixed environment variables from the current runtime environment.\n * This is more efficient than copying all environment variables.\n *\n * @returns {Record<string, string>}\n *  - A record of LangChain/LangSmith environment variables.\n */\nexport function getLangSmithEnvironmentVariables() {\n    const envVars = {};\n    try {\n        // Check for Node.js environment\n        // eslint-disable-next-line no-process-env\n        if (typeof process !== \"undefined\" && process.env) {\n            // eslint-disable-next-line no-process-env\n            for (const [key, value] of Object.entries(process.env)) {\n                if ((key.startsWith(\"LANGCHAIN_\") || key.startsWith(\"LANGSMITH_\")) &&\n                    value != null) {\n                    if ((key.toLowerCase().includes(\"key\") ||\n                        key.toLowerCase().includes(\"secret\") ||\n                        key.toLowerCase().includes(\"token\")) &&\n                        typeof value === \"string\") {\n                        envVars[key] =\n                            value.slice(0, 2) +\n                                \"*\".repeat(value.length - 4) +\n                                value.slice(-2);\n                    }\n                    else {\n                        envVars[key] = value;\n                    }\n                }\n            }\n        }\n    }\n    catch (e) {\n        // Catch any errors that might occur while trying to access environment variables\n    }\n    return envVars;\n}\nexport function getEnvironmentVariable(name) {\n    // Certain Deno setups will throw an error if you try to access environment variables\n    // https://github.com/hwchase17/langchainjs/issues/1412\n    try {\n        return typeof process !== \"undefined\"\n            ? // eslint-disable-next-line no-process-env\n                process.env?.[name]\n            : undefined;\n    }\n    catch (e) {\n        return undefined;\n    }\n}\nexport function getLangSmithEnvironmentVariable(name) {\n    return (getEnvironmentVariable(`LANGSMITH_${name}`) ||\n        getEnvironmentVariable(`LANGCHAIN_${name}`));\n}\nexport function setEnvironmentVariable(name, value) {\n    if (typeof process !== \"undefined\") {\n        // eslint-disable-next-line no-process-env\n        process.env[name] = value;\n    }\n}\nlet cachedCommitSHAs;\n/**\n * Get the Git commit SHA from common environment variables\n * used by different CI/CD platforms.\n * @returns {string | undefined} The Git commit SHA or undefined if not found.\n */\nexport function getShas() {\n    if (cachedCommitSHAs !== undefined) {\n        return cachedCommitSHAs;\n    }\n    const common_release_envs = [\n        \"VERCEL_GIT_COMMIT_SHA\",\n        \"NEXT_PUBLIC_VERCEL_GIT_COMMIT_SHA\",\n        \"COMMIT_REF\",\n        \"RENDER_GIT_COMMIT\",\n        \"CI_COMMIT_SHA\",\n        \"CIRCLE_SHA1\",\n        \"CF_PAGES_COMMIT_SHA\",\n        \"REACT_APP_GIT_SHA\",\n        \"SOURCE_VERSION\",\n        \"GITHUB_SHA\",\n        \"TRAVIS_COMMIT\",\n        \"GIT_COMMIT\",\n        \"BUILD_VCS_NUMBER\",\n        \"bamboo_planRepository_revision\",\n        \"Build.SourceVersion\",\n        \"BITBUCKET_COMMIT\",\n        \"DRONE_COMMIT_SHA\",\n        \"SEMAPHORE_GIT_SHA\",\n        \"BUILDKITE_COMMIT\",\n    ];\n    const shas = {};\n    for (const env of common_release_envs) {\n        const envVar = getEnvironmentVariable(env);\n        if (envVar !== undefined) {\n            shas[env] = envVar;\n        }\n    }\n    cachedCommitSHAs = shas;\n    return shas;\n}\nexport function getOtelEnabled() {\n    return (getEnvironmentVariable(\"OTEL_ENABLED\") === \"true\" ||\n        getLangSmithEnvironmentVariable(\"OTEL_ENABLED\") === \"true\");\n}\n"],"x_google_ignoreList":[0],"mappings":"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"}