{"version":3,"file":"fetch.js","names":[],"sources":["../../../../../../../../../../node_modules/.pnpm/langsmith@0.3.74_@opentelemetry+api@1.9.0_openai@5.12.2_ws@8.18.3_bufferutil@4.0.9_utf-8-validate@6.0.5__zod@3.25.76_/node_modules/langsmith/dist/singletons/fetch.js"],"sourcesContent":["import { getLangSmithEnvironmentVariable } from \"../utils/env.js\";\n// Wrap the default fetch call due to issues with illegal invocations\n// in some environments:\n// https://stackoverflow.com/questions/69876859/why-does-bind-fix-failed-to-execute-fetch-on-window-illegal-invocation-err\n// @ts-expect-error Broad typing to support a range of fetch implementations\nconst DEFAULT_FETCH_IMPLEMENTATION = (...args) => fetch(...args);\nconst LANGSMITH_FETCH_IMPLEMENTATION_KEY = Symbol.for(\"ls:fetch_implementation\");\n/**\n * Overrides the fetch implementation used for LangSmith calls.\n * You should use this if you need to use an implementation of fetch\n * other than the default global (e.g. for dealing with proxies).\n * @param fetch The new fetch functino to use.\n */\nexport const overrideFetchImplementation = (fetch) => {\n    globalThis[LANGSMITH_FETCH_IMPLEMENTATION_KEY] = fetch;\n};\nexport const clearFetchImplementation = () => {\n    delete globalThis[LANGSMITH_FETCH_IMPLEMENTATION_KEY];\n};\nexport const _globalFetchImplementationIsNodeFetch = () => {\n    const fetchImpl = globalThis[LANGSMITH_FETCH_IMPLEMENTATION_KEY];\n    if (!fetchImpl)\n        return false;\n    // Check if the implementation has node-fetch specific properties\n    return (typeof fetchImpl === \"function\" &&\n        \"Headers\" in fetchImpl &&\n        \"Request\" in fetchImpl &&\n        \"Response\" in fetchImpl);\n};\n/**\n * @internal\n */\nexport const _getFetchImplementation = (debug) => {\n    return async (...args) => {\n        if (debug || getLangSmithEnvironmentVariable(\"DEBUG\") === \"true\") {\n            const [url, options] = args;\n            console.log(`→ ${options?.method || \"GET\"} ${url}`);\n        }\n        const res = await (globalThis[LANGSMITH_FETCH_IMPLEMENTATION_KEY] ??\n            DEFAULT_FETCH_IMPLEMENTATION)(...args);\n        if (debug || getLangSmithEnvironmentVariable(\"DEBUG\") === \"true\") {\n            console.log(`← ${res.status} ${res.statusText} ${res.url}`);\n        }\n        return res;\n    };\n};\n"],"x_google_ignoreList":[0],"mappings":";;;AAKA,MAAM,+BAA+B,CAAC,GAAG,SAAS,MAAM,GAAG,KAAK;AAChE,MAAM,qCAAqC,OAAO,IAAI,0BAA0B;AAahF,MAAa,wCAAwC,MAAM;CACvD,MAAM,YAAY,WAAW;AAC7B,KAAI,CAAC,UACD,QAAO;AAEX,QAAQ,OAAO,cAAc,cACzB,aAAa,aACb,aAAa,aACb,cAAc;AACrB;;;;AAID,MAAa,0BAA0B,CAAC,UAAU;AAC9C,QAAO,OAAO,GAAG,SAAS;AACtB,MAAI,SAAS,gCAAgC,QAAQ,KAAK,QAAQ;GAC9D,MAAM,CAAC,KAAK,QAAQ,GAAG;GACvB,QAAQ,IAAI,CAAC,EAAE,EAAE,SAAS,UAAU,MAAM,CAAC,EAAE,KAAK,CAAC;EACtD;EACD,MAAM,MAAM,OAAO,WAAW,uCAC1B,8BAA8B,GAAG,KAAK;AAC1C,MAAI,SAAS,gCAAgC,QAAQ,KAAK,QACtD,QAAQ,IAAI,CAAC,EAAE,EAAE,IAAI,OAAO,CAAC,EAAE,IAAI,WAAW,CAAC,EAAE,IAAI,KAAK,CAAC;AAE/D,SAAO;CACV;AACJ"}