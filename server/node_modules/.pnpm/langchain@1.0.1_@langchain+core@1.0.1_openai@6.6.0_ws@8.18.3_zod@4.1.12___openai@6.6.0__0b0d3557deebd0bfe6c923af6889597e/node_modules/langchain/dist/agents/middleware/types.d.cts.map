{"version":3,"file":"types.d.cts","names":["InteropZodObject","InteropZodDefault","InteropZodOptional","InferInteropZodInput","InferInteropZodOutput","InteropZodToStateDefinition","AnnotationRoot","AIMessage","ToolMessage","ToolCall","Command","JumpToTarget","ClientTool","ServerTool","Runtime","AgentBuiltInState","ModelRequest","PromiseOrValue","T","Promise","AnyAnnotationRoot","NormalizedSchemaInput","TSchema","MiddlewareResult","TState","ToolCallRequest","Record","TContext","ToolCallHandler","WrapToolCallHook","WrapModelCallHandler","WrapModelCallHook","BeforeAgentHandler","Partial","BeforeAgentHook","BeforeModelHandler","BeforeModelHook","AfterModelHandler","AfterModelHook","AfterAgentHandler","AfterAgentHook","AgentMiddleware","TContextSchema","TFullContext","FilterPrivateProps","K","InferChannelType","ToAnnotationRoot","InferMiddlewareState","S","InferMiddlewareInputState","InferMiddlewareStates","First","Rest","InferMiddlewareInputStates","InferMergedState","InferMergedInputState","InferMiddlewareContext","C","InferMiddlewareContextInput","Inner","InferMiddlewareContexts","MergeContextTypes","A","B","InferMiddlewareContextInputs","InferContextInput","ContextSchema","InferSchemaInput"],"sources":["../../../src/agents/middleware/types.d.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { InteropZodObject, InteropZodDefault, InteropZodOptional, InferInteropZodInput, InferInteropZodOutput } from \"@langchain/core/utils/types\";\nimport type { InteropZodToStateDefinition } from \"@langchain/langgraph/zod\";\nimport type { AnnotationRoot } from \"@langchain/langgraph\";\nimport type { AIMessage, ToolMessage } from \"@langchain/core/messages\";\nimport type { ToolCall } from \"@langchain/core/messages/tool\";\nimport type { Command } from \"@langchain/langgraph\";\nimport type { JumpToTarget } from \"../constants.js\";\nimport type { ClientTool, ServerTool } from \"../tools.js\";\nimport type { Runtime, AgentBuiltInState } from \"../runtime.js\";\nimport type { ModelRequest } from \"../nodes/types.js\";\ntype PromiseOrValue<T> = T | Promise<T>;\nexport type AnyAnnotationRoot = AnnotationRoot<any>;\ntype NormalizedSchemaInput<TSchema extends InteropZodObject | undefined = any> = TSchema extends InteropZodObject ? InferInteropZodInput<TSchema> : {};\n/**\n * Result type for middleware functions.\n */\nexport type MiddlewareResult<TState> = TState | void;\n/**\n * Represents a tool call request for the wrapToolCall hook.\n * Contains the tool call information along with the agent's current state and runtime.\n */\nexport interface ToolCallRequest<TState extends Record<string, unknown> = Record<string, unknown>, TContext = unknown> {\n    /**\n     * The tool call to be executed\n     */\n    toolCall: ToolCall;\n    /**\n     * The BaseTool instance being invoked.\n     * Provides access to tool metadata like name, description, schema, etc.\n     */\n    tool: ClientTool | ServerTool;\n    /**\n     * The current agent state (includes both middleware state and built-in state).\n     */\n    state: TState & AgentBuiltInState;\n    /**\n     * The runtime context containing metadata, signal, writer, interrupt, etc.\n     */\n    runtime: Runtime<TContext>;\n}\n/**\n * Handler function type for wrapping tool calls.\n * Takes a tool call request and returns the tool result or a command.\n */\nexport type ToolCallHandler<TSchema extends InteropZodObject | undefined = any, TContext = unknown> = (request: ToolCallRequest<NormalizedSchemaInput<TSchema> & AgentBuiltInState, TContext>) => PromiseOrValue<ToolMessage | Command>;\n/**\n * Wrapper function type for the wrapToolCall hook.\n * Allows middleware to intercept and modify tool execution.\n */\nexport type WrapToolCallHook<TSchema extends InteropZodObject | undefined = any, TContext = unknown> = (request: ToolCallRequest<NormalizedSchemaInput<TSchema> & AgentBuiltInState, TContext>, handler: ToolCallHandler<TSchema, TContext>) => PromiseOrValue<ToolMessage | Command>;\n/**\n * Handler function type for wrapping model calls.\n * Takes a model request and returns the AI message response.\n *\n * @param request - The model request containing model, messages, systemPrompt, tools, state, and runtime\n * @returns The AI message response from the model\n */\nexport type WrapModelCallHandler<TSchema extends InteropZodObject | undefined = any, TContext = unknown> = (request: ModelRequest<NormalizedSchemaInput<TSchema> & AgentBuiltInState, TContext>) => PromiseOrValue<AIMessage>;\n/**\n * Wrapper function type for the wrapModelCall hook.\n * Allows middleware to intercept and modify model execution.\n * This enables you to:\n * - Modify the request before calling the model (e.g., change system prompt, add/remove tools)\n * - Handle errors and retry with different parameters\n * - Post-process the response\n * - Implement custom caching, logging, or other cross-cutting concerns\n *\n * @param request - The model request containing all parameters needed for the model call\n * @param handler - The function that invokes the model. Call this with a ModelRequest to get the response\n * @returns The AI message response from the model (or a modified version)\n */\nexport type WrapModelCallHook<TSchema extends InteropZodObject | undefined = any, TContext = unknown> = (request: ModelRequest<NormalizedSchemaInput<TSchema> & AgentBuiltInState, TContext>, handler: WrapModelCallHandler<TSchema, TContext>) => PromiseOrValue<AIMessage>;\n/**\n * Handler function type for the beforeAgent hook.\n * Called once at the start of agent invocation before any model calls or tool executions.\n *\n * @param state - The current agent state (includes both middleware state and built-in state)\n * @param runtime - The runtime context containing metadata, signal, writer, interrupt, etc.\n * @returns A middleware result containing partial state updates or undefined to pass through\n */\nexport type BeforeAgentHandler<TSchema extends InteropZodObject | undefined = any, TContext = unknown> = (state: NormalizedSchemaInput<TSchema> & AgentBuiltInState, runtime: Runtime<TContext>) => PromiseOrValue<MiddlewareResult<Partial<NormalizedSchemaInput<TSchema>>>>;\n/**\n * Hook type for the beforeAgent lifecycle event.\n * Can be either a handler function or an object with a handler and optional jump targets.\n * This hook is called once at the start of the agent invocation.\n */\nexport type BeforeAgentHook<TSchema extends InteropZodObject | undefined = any, TContext = unknown> = BeforeAgentHandler<TSchema, TContext> | {\n    hook: BeforeAgentHandler<TSchema, TContext>;\n    canJumpTo?: JumpToTarget[];\n};\n/**\n * Handler function type for the beforeModel hook.\n * Called before the model is invoked and before the wrapModelCall hook.\n *\n * @param state - The current agent state (includes both middleware state and built-in state)\n * @param runtime - The runtime context containing metadata, signal, writer, interrupt, etc.\n * @returns A middleware result containing partial state updates or undefined to pass through\n */\nexport type BeforeModelHandler<TSchema extends InteropZodObject | undefined = any, TContext = unknown> = (state: NormalizedSchemaInput<TSchema> & AgentBuiltInState, runtime: Runtime<TContext>) => PromiseOrValue<MiddlewareResult<Partial<NormalizedSchemaInput<TSchema>>>>;\n/**\n * Hook type for the beforeModel lifecycle event.\n * Can be either a handler function or an object with a handler and optional jump targets.\n * This hook is called before each model invocation.\n */\nexport type BeforeModelHook<TSchema extends InteropZodObject | undefined = any, TContext = unknown> = BeforeModelHandler<TSchema, TContext> | {\n    hook: BeforeModelHandler<TSchema, TContext>;\n    canJumpTo?: JumpToTarget[];\n};\n/**\n * Handler function type for the afterModel hook.\n * Called after the model is invoked and before any tools are called.\n * Allows modifying the agent state after model invocation, e.g., to update tool call parameters.\n *\n * @param state - The current agent state (includes both middleware state and built-in state)\n * @param runtime - The runtime context containing metadata, signal, writer, interrupt, etc.\n * @returns A middleware result containing partial state updates or undefined to pass through\n */\nexport type AfterModelHandler<TSchema extends InteropZodObject | undefined = any, TContext = unknown> = (state: NormalizedSchemaInput<TSchema> & AgentBuiltInState, runtime: Runtime<TContext>) => PromiseOrValue<MiddlewareResult<Partial<NormalizedSchemaInput<TSchema>>>>;\n/**\n * Hook type for the afterModel lifecycle event.\n * Can be either a handler function or an object with a handler and optional jump targets.\n * This hook is called after each model invocation.\n */\nexport type AfterModelHook<TSchema extends InteropZodObject | undefined = any, TContext = unknown> = AfterModelHandler<TSchema, TContext> | {\n    hook: AfterModelHandler<TSchema, TContext>;\n    canJumpTo?: JumpToTarget[];\n};\n/**\n * Handler function type for the afterAgent hook.\n * Called once at the end of agent invocation after all model calls and tool executions are complete.\n *\n * @param state - The current agent state (includes both middleware state and built-in state)\n * @param runtime - The runtime context containing metadata, signal, writer, interrupt, etc.\n * @returns A middleware result containing partial state updates or undefined to pass through\n */\nexport type AfterAgentHandler<TSchema extends InteropZodObject | undefined = any, TContext = unknown> = (state: NormalizedSchemaInput<TSchema> & AgentBuiltInState, runtime: Runtime<TContext>) => PromiseOrValue<MiddlewareResult<Partial<NormalizedSchemaInput<TSchema>>>>;\n/**\n * Hook type for the afterAgent lifecycle event.\n * Can be either a handler function or an object with a handler and optional jump targets.\n * This hook is called once at the end of the agent invocation.\n */\nexport type AfterAgentHook<TSchema extends InteropZodObject | undefined = any, TContext = unknown> = AfterAgentHandler<TSchema, TContext> | {\n    hook: AfterAgentHandler<TSchema, TContext>;\n    canJumpTo?: JumpToTarget[];\n};\n/**\n * Base middleware interface.\n */\nexport interface AgentMiddleware<TSchema extends InteropZodObject | undefined = any, TContextSchema extends InteropZodObject | InteropZodDefault<InteropZodObject> | InteropZodOptional<InteropZodObject> | undefined = any, TFullContext = any> {\n    /**\n     * The name of the middleware.\n     */\n    name: string;\n    /**\n     * The schema of the middleware state. Middleware state is persisted between multiple invocations. It can be either:\n     * - A Zod object\n     * - A Zod optional object\n     * - A Zod default object\n     * - Undefined\n     */\n    stateSchema?: TSchema;\n    /**\n     * The schema of the middleware context. Middleware context is read-only and not persisted between multiple invocations. It can be either:\n     * - A Zod object\n     * - A Zod optional object\n     * - A Zod default object\n     * - Undefined\n     */\n    contextSchema?: TContextSchema;\n    /**\n     * Additional tools registered by the middleware.\n     */\n    tools?: (ClientTool | ServerTool)[];\n    /**\n     * Wraps tool execution with custom logic. This allows you to:\n     * - Modify tool call parameters before execution\n     * - Handle errors and retry with different parameters\n     * - Post-process tool results\n     * - Implement caching, logging, authentication, or other cross-cutting concerns\n     * - Return Command objects for advanced control flow\n     *\n     * The handler receives a ToolCallRequest containing the tool call, state, and runtime,\n     * along with a handler function to execute the actual tool.\n     *\n     * @param request - The tool call request containing toolCall, state, and runtime.\n     * @param handler - The function that executes the tool. Call this with a ToolCallRequest to get the result.\n     * @returns The tool result as a ToolMessage or a Command for advanced control flow.\n     *\n     * @example\n     * ```ts\n     * wrapToolCall: async (request, handler) => {\n     *   console.log(`Calling tool: ${request.tool.name}`);\n     *   console.log(`Tool description: ${request.tool.description}`);\n     *\n     *   try {\n     *     // Execute the tool\n     *     const result = await handler(request);\n     *     console.log(`Tool ${request.tool.name} succeeded`);\n     *     return result;\n     *   } catch (error) {\n     *     console.error(`Tool ${request.tool.name} failed:`, error);\n     *     // Could return a custom error message or retry\n     *     throw error;\n     *   }\n     * }\n     * ```\n     *\n     * @example Authentication\n     * ```ts\n     * wrapToolCall: async (request, handler) => {\n     *   // Check if user is authorized for this tool\n     *   if (!request.runtime.context.isAuthorized(request.tool.name)) {\n     *     return new ToolMessage({\n     *       content: \"Unauthorized to call this tool\",\n     *       tool_call_id: request.toolCall.id,\n     *     });\n     *   }\n     *   return handler(request);\n     * }\n     * ```\n     *\n     * @example Caching\n     * ```ts\n     * const cache = new Map();\n     * wrapToolCall: async (request, handler) => {\n     *   const cacheKey = `${request.tool.name}:${JSON.stringify(request.toolCall.args)}`;\n     *   if (cache.has(cacheKey)) {\n     *     return cache.get(cacheKey);\n     *   }\n     *   const result = await handler(request);\n     *   cache.set(cacheKey, result);\n     *   return result;\n     * }\n     * ```\n     */\n    wrapToolCall?: WrapToolCallHook<TSchema, TFullContext>;\n    /**\n     * Wraps the model invocation with custom logic. This allows you to:\n     * - Modify the request before calling the model\n     * - Handle errors and retry with different parameters\n     * - Post-process the response\n     * - Implement custom caching, logging, or other cross-cutting concerns\n     *\n     * @param request - The model request containing model, messages, systemPrompt, tools, state, and runtime.\n     * @param handler - The function that invokes the model. Call this with a ModelRequest to get the response.\n     * @returns The response from the model (or a modified version).\n     *\n     * @example\n     * ```ts\n     * wrapModelCall: async (request, handler) => {\n     *   // Modify request before calling\n     *   const modifiedRequest = { ...request, systemPrompt: \"You are helpful\" };\n     *\n     *   try {\n     *     // Call the model\n     *     return await handler(modifiedRequest);\n     *   } catch (error) {\n     *     // Handle errors and retry with fallback\n     *     const fallbackRequest = { ...request, model: fallbackModel };\n     *     return await handler(fallbackRequest);\n     *   }\n     * }\n     * ```\n     */\n    wrapModelCall?: WrapModelCallHook<TSchema, TFullContext>;\n    /**\n     * The function to run before the agent execution starts. This function is called once at the start of the agent invocation.\n     * It allows to modify the state of the agent before any model calls or tool executions.\n     *\n     * @param state - The middleware state\n     * @param runtime - The middleware runtime\n     * @returns The modified middleware state or undefined to pass through\n     */\n    beforeAgent?: BeforeAgentHook<TSchema, TFullContext>;\n    /**\n     * The function to run before the model call. This function is called before the model is invoked and before the `wrapModelCall` hook.\n     * It allows to modify the state of the agent.\n     *\n     * @param state - The middleware state\n     * @param runtime - The middleware runtime\n     * @returns The modified middleware state or undefined to pass through\n     */\n    beforeModel?: BeforeModelHook<TSchema, TFullContext>;\n    /**\n     * The function to run after the model call. This function is called after the model is invoked and before any tools are called.\n     * It allows to modify the state of the agent after the model is invoked, e.g. to update tool call parameters.\n     *\n     * @param state - The middleware state\n     * @param runtime - The middleware runtime\n     * @returns The modified middleware state or undefined to pass through\n     */\n    afterModel?: AfterModelHook<TSchema, TFullContext>;\n    /**\n     * The function to run after the agent execution completes. This function is called once at the end of the agent invocation.\n     * It allows to modify the final state of the agent after all model calls and tool executions are complete.\n     *\n     * @param state - The middleware state\n     * @param runtime - The middleware runtime\n     * @returns The modified middleware state or undefined to pass through\n     */\n    afterAgent?: AfterAgentHook<TSchema, TFullContext>;\n}\n/**\n * Helper type to filter out properties that start with underscore (private properties)\n */\ntype FilterPrivateProps<T> = {\n    [K in keyof T as K extends `_${string}` ? never : K]: T[K];\n};\nexport type InferChannelType<T extends AnyAnnotationRoot | InteropZodObject> = T extends AnyAnnotationRoot ? ToAnnotationRoot<T>[\"State\"] : T extends InteropZodObject ? InferInteropZodInput<T> : {};\n/**\n * Helper type to infer the state schema type from a middleware\n * This filters out private properties (those starting with underscore)\n */\nexport type InferMiddlewareState<T extends AgentMiddleware> = T extends AgentMiddleware<infer S, any, any> ? S extends InteropZodObject ? FilterPrivateProps<InferInteropZodOutput<S>> : {} : {};\n/**\n * Helper type to infer the input state schema type from a middleware (all properties optional)\n * This filters out private properties (those starting with underscore)\n */\nexport type InferMiddlewareInputState<T extends AgentMiddleware> = T extends AgentMiddleware<infer S, any, any> ? S extends InteropZodObject ? FilterPrivateProps<InferInteropZodInput<S>> : {} : {};\n/**\n * Helper type to infer merged state from an array of middleware (just the middleware states)\n */\nexport type InferMiddlewareStates<T = AgentMiddleware[]> = T extends readonly [] ? {} : T extends readonly [infer First, ...infer Rest] ? First extends AgentMiddleware ? Rest extends readonly AgentMiddleware[] ? InferMiddlewareState<First> & InferMiddlewareStates<Rest> : InferMiddlewareState<First> : {} : {};\n/**\n * Helper type to infer merged input state from an array of middleware (with optional defaults)\n */\nexport type InferMiddlewareInputStates<T extends readonly AgentMiddleware[]> = T extends readonly [] ? {} : T extends readonly [infer First, ...infer Rest] ? First extends AgentMiddleware ? Rest extends readonly AgentMiddleware[] ? InferMiddlewareInputState<First> & InferMiddlewareInputStates<Rest> : InferMiddlewareInputState<First> : {} : {};\n/**\n * Helper type to infer merged state from an array of middleware (includes built-in state)\n */\nexport type InferMergedState<T extends readonly AgentMiddleware[]> = InferMiddlewareStates<T> & AgentBuiltInState;\n/**\n * Helper type to infer merged input state from an array of middleware (includes built-in state)\n */\nexport type InferMergedInputState<T extends readonly AgentMiddleware[]> = InferMiddlewareInputStates<T> & AgentBuiltInState;\n/**\n * Helper type to infer the context schema type from a middleware\n */\nexport type InferMiddlewareContext<T extends AgentMiddleware> = T extends AgentMiddleware<any, infer C, any> ? C extends InteropZodObject ? InferInteropZodInput<C> : {} : {};\n/**\n * Helper type to infer the input context schema type from a middleware (with optional defaults)\n */\nexport type InferMiddlewareContextInput<T extends AgentMiddleware> = T extends AgentMiddleware<any, infer C, any> ? C extends InteropZodOptional<infer Inner> ? InferInteropZodInput<Inner> | undefined : C extends InteropZodObject ? InferInteropZodInput<C> : {} : {};\n/**\n * Helper type to infer merged context from an array of middleware\n */\nexport type InferMiddlewareContexts<T extends readonly AgentMiddleware[]> = T extends readonly [] ? {} : T extends readonly [infer First, ...infer Rest] ? First extends AgentMiddleware ? Rest extends readonly AgentMiddleware[] ? InferMiddlewareContext<First> & InferMiddlewareContexts<Rest> : InferMiddlewareContext<First> : {} : {};\n/**\n * Helper to merge two context types, preserving undefined unions\n */\ntype MergeContextTypes<A, B> = [A] extends [undefined] ? [B] extends [undefined] ? undefined : B | undefined : [B] extends [undefined] ? A | undefined : [A] extends [B] ? A : [B] extends [A] ? B : A & B;\n/**\n * Helper type to infer merged input context from an array of middleware (with optional defaults)\n */\nexport type InferMiddlewareContextInputs<T extends readonly AgentMiddleware[]> = T extends readonly [] ? {} : T extends readonly [infer First, ...infer Rest] ? First extends AgentMiddleware ? Rest extends readonly AgentMiddleware[] ? MergeContextTypes<InferMiddlewareContextInput<First>, InferMiddlewareContextInputs<Rest>> : InferMiddlewareContextInput<First> : {} : {};\n/**\n * Helper type to extract input type from context schema (with optional defaults)\n */\nexport type InferContextInput<ContextSchema extends AnyAnnotationRoot | InteropZodObject> = ContextSchema extends InteropZodObject ? InferInteropZodInput<ContextSchema> : ContextSchema extends AnyAnnotationRoot ? ToAnnotationRoot<ContextSchema>[\"State\"] : {};\nexport type ToAnnotationRoot<A extends AnyAnnotationRoot | InteropZodObject> = A extends AnyAnnotationRoot ? A : A extends InteropZodObject ? AnnotationRoot<InteropZodToStateDefinition<A>> : never;\nexport type InferSchemaInput<A extends AnyAnnotationRoot | InteropZodObject | undefined> = A extends AnyAnnotationRoot | InteropZodObject ? ToAnnotationRoot<A>[\"State\"] : {};\nexport {};\n"],"mappings":";;;;;;;;;;;AAUsD,KACjDiB,cAAAA,CAAAA,CAAc,CAAA,GAAMC,CAAN,GAAUC,OAAV,CAAkBD,CAAlB,CAAA;AAAA,KACPE,iBAAAA,GAAoBd,cADb,CAAA,GAAA,CAAA;KAEde,qBAFoBH,CAAAA,gBAEkBlB,gBAFlBkB,GAAAA,SAAAA,GAAAA,GAAAA,CAAAA,GAEwDI,OAFxDJ,SAEwElB,gBAFxEkB,GAE2Ff,oBAF3Fe,CAEgHI,OAFhHJ,CAAAA,GAAAA,CAAAA,CAAAA;;;AAAW;AACxBE,KAKAG,gBALiB,CAAA,MAAGjB,CAAAA,GAKOkB,MALPlB,GAAAA,IAAc;AAAM;;;;AAC6CN,UAShFyB,eATgFzB,CAAAA,eASjD0B,MATiD1B,CAAAA,MAAAA,EAAAA,OAAAA,CAAAA,GASvB0B,MATuB1B,CAAAA,MAAAA,EAAAA,OAAAA,CAAAA,EAAAA,WAAAA,OAAAA,CAAAA,CAAAA;EAAgB;;AAAuB;EAI5HuB,QAAAA,EASEd,UATFc;EAKKE;;;;EAA+D,IAIlEhB,EAKJG,UALIH,GAKSI,UALTJ;EAAQ;;;EASL,KAAGM,EAATS,MAAST,GAAAA,iBAAAA;EAAiB;;AAIjB;EAMRa,OAAAA,EANCd,OAMDc,CANSD,QAMM,CAAA;;;;;;AAAyJA,KAAxKC,eAAwKD,CAAAA,gBAAxI3B,gBAAwI2B,GAAAA,SAAAA,GAAAA,GAAAA,EAAAA,WAAAA,OAAAA,CAAAA,GAAAA,CAAAA,OAAAA,EAApEF,eAAoEE,CAApDN,qBAAoDM,CAA9BL,OAA8BK,CAAAA,GAAnBZ,iBAAmBY,EAAAA,QAAAA,CAAAA,EAAAA,GAAcV,cAAdU,CAA6BnB,WAA7BmB,GAA2CjB,OAA3CiB,CAAAA;;;;;AAA4B,KAKpME,gBALoM,CAAA,gBAKnK7B,gBALmK,GAAA,SAAA,GAAA,GAAA,EAAA,WAAA,OAAA,CAAA,GAAA,CAAA,OAAA,EAK/FyB,eAL+F,CAK/EJ,qBAL+E,CAKzDC,OALyD,CAAA,GAK9CP,iBAL8C,EAK3BY,QAL2B,CAAA,EAAA,OAAA,EAKPC,eALO,CAKSN,OALT,EAKkBK,QALlB,CAAA,EAAA,GAKgCV,cALhC,CAK+CT,WAL/C,GAK6DE,OAL7D,CAAA;AAKhN;;;;;;;AAAiHe,KAQrGK,oBARqGL,CAAAA,gBAQhEzB,gBARgEyB,GAAAA,SAAAA,GAAAA,GAAAA,EAAAA,WAAAA,OAAAA,CAAAA,GAAAA,CAAAA,OAAAA,EAQIT,YARJS,CAQiBJ,qBARjBI,CAQuCH,OARvCG,CAAAA,GAQkDV,iBARlDU,EAQqEE,QARrEF,CAAAA,EAAAA,GAQmFR,cARnFQ,CAQkGlB,SARlGkB,CAAAA;;;;;;;AAA6I;AAQ9P;;;;;;AAAsLE,KAc1KI,iBAd0KJ,CAAAA,gBAcxI3B,gBAdwI2B,GAAAA,SAAAA,GAAAA,GAAAA,EAAAA,WAAAA,OAAAA,CAAAA,GAAAA,CAAAA,OAAAA,EAcpEX,YAdoEW,CAcvDN,qBAduDM,CAcjCL,OAdiCK,CAAAA,GActBZ,iBAdsBY,EAcHA,QAdGA,CAAAA,EAAAA,OAAAA,EAciBG,oBAdjBH,CAcsCL,OAdtCK,EAc+CA,QAd/CA,CAAAA,EAAAA,GAc6DV,cAd7DU,CAc4EpB,SAd5EoB,CAAAA;;;;AAA4B;AAclN;;;;AAA+HN,KASnHW,kBATmHX,CAAAA,gBAShFrB,gBATgFqB,GAAAA,SAAAA,GAAAA,GAAAA,EAAAA,WAAAA,OAAAA,CAAAA,GAAAA,CAAAA,KAAAA,EASdA,qBATcA,CASQC,OATRD,CAAAA,GASmBN,iBATnBM,EAAAA,OAAAA,EAS+CP,OAT/CO,CASuDM,QATvDN,CAAAA,EAAAA,GASqEJ,cATrEI,CASoFE,gBATpFF,CASqGY,OATrGZ,CAS6GA,qBAT7GA,CASmIC,OATnID,CAAAA,CAAAA,CAAAA,CAAAA;;;;;;AAAwES,KAe3LI,eAf2LJ,CAAAA,gBAe3J9B,gBAf2J8B,GAAAA,SAAAA,GAAAA,GAAAA,EAAAA,WAAAA,OAAAA,CAAAA,GAejGE,kBAfiGF,CAe9ER,OAf8EQ,EAerEH,QAfqEG,CAAAA,GAAAA;EAAoB,IAAuCvB,EAgBxPyB,kBAhBwPzB,CAgBrOe,OAhBqOf,EAgB5NoB,QAhB4NpB,CAAAA;EAAS,SAAxBU,CAAAA,EAiBnON,YAjBmOM,EAAAA;AAAc,CAAA;AASjQ;;;;;;;;AAAkQK,KAkBtPa,kBAlBsPb,CAAAA,gBAkBnNtB,gBAlBmNsB,GAAAA,SAAAA,GAAAA,GAAAA,EAAAA,WAAAA,OAAAA,CAAAA,GAAAA,CAAAA,KAAAA,EAkBjJD,qBAlBiJC,CAkB3HA,OAlB2HA,CAAAA,GAkBhHP,iBAlBgHO,EAAAA,OAAAA,EAkBpFR,OAlBoFQ,CAkB5EK,QAlB4EL,CAAAA,EAAAA,GAkB9DL,cAlB8DK,CAkB/CC,gBAlB+CD,CAkB9BW,OAlB8BX,CAkBtBD,qBAlBsBC,CAkBAA,OAlBAA,CAAAA,CAAAA,CAAAA,CAAAA;;;;;AAAhD;AAMtMY,KAkBAE,eAlBe,CAAA,gBAkBiBpC,gBAlBjB,GAAA,SAAA,GAAA,GAAA,EAAA,WAAA,OAAA,CAAA,GAkB2EmC,kBAlB3E,CAkB8Fb,OAlB9F,EAkBuGK,QAlBvG,CAAA,GAAA;EAAA,IAAA,EAmBjBQ,kBAnBiB,CAmBEb,OAnBF,EAmBWK,QAnBX,CAAA;EAAA,SAAiB3B,CAAAA,EAoB5BW,YApB4BX,EAAAA;CAAgB;;;;;;;AAEhC;AAU5B;;AAA+CA,KAmBnCqC,iBAnBmCrC,CAAAA,gBAmBDA,gBAnBCA,GAAAA,SAAAA,GAAAA,GAAAA,EAAAA,WAAAA,OAAAA,CAAAA,GAAAA,CAAAA,KAAAA,EAmBiEqB,qBAnBjErB,CAmBuFsB,OAnBvFtB,CAAAA,GAmBkGe,iBAnBlGf,EAAAA,OAAAA,EAmB8Hc,OAnB9Hd,CAmBsI2B,QAnBtI3B,CAAAA,EAAAA,GAmBoJiB,cAnBpJjB,CAmBmKuB,gBAnBnKvB,CAmBoLiC,OAnBpLjC,CAmB4LqB,qBAnB5LrB,CAmBkNsB,OAnBlNtB,CAAAA,CAAAA,CAAAA,CAAAA;;;;;;AAAmNsB,KAyBtPgB,cAzBsPhB,CAAAA,gBAyBvNtB,gBAzBuNsB,GAAAA,SAAAA,GAAAA,GAAAA,EAAAA,WAAAA,OAAAA,CAAAA,GAyB7Je,iBAzB6Jf,CAyB3IA,OAzB2IA,EAyBlIK,QAzBkIL,CAAAA,GAAAA;EAAO,IAA7BD,EA0BlOgB,iBA1BkOhB,CA0BhNC,OA1BgND,EA0BvMM,QA1BuMN,CAAAA;EAAqB,SAA7BY,CAAAA,EA2BpNtB,YA3BoNsB,EAAAA;CAAO;;AAAzB;AAMlN;;;;;;AAC6BX,KA8BjBiB,iBA9BiBjB,CAAAA,gBA8BiBtB,gBA9BjBsB,GAAAA,SAAAA,GAAAA,GAAAA,EAAAA,WAAAA,OAAAA,CAAAA,GAAAA,CAAAA,KAAAA,EA8BmFD,qBA9BnFC,CA8ByGA,OA9BzGA,CAAAA,GA8BoHP,iBA9BpHO,EAAAA,OAAAA,EA8BgJR,OA9BhJQ,CA8BwJK,QA9BxJL,CAAAA,EAAAA,GA8BsKL,cA9BtKK,CA8BqLC,gBA9BrLD,CA8BsMW,OA9BtMX,CA8B8MD,qBA9B9MC,CA8BoOA,OA9BpOA,CAAAA,CAAAA,CAAAA,CAAAA;;;;AACD;AAW5B;AAA6B,KAwBjBkB,cAxBiB,CAAA,gBAwBcxC,gBAxBd,GAAA,SAAA,GAAA,GAAA,EAAA,WAAA,OAAA,CAAA,GAwBwEuC,iBAxBxE,CAwB0FjB,OAxB1F,EAwBmGK,QAxBnG,CAAA,GAAA;EAAA,IAAiB3B,EAyBpCuC,iBAzBoCvC,CAyBlBsB,OAzBkBtB,EAyBT2B,QAzBS3B,CAAAA;EAAgB,SAAwEsB,CAAAA,EA0BtHX,YA1BsHW,EAAAA;CAAO;;;;AAAoHA,UA+BhPmB,eA/BgPnB,CAAAA,gBA+BhNtB,gBA/BgNsB,GAAAA,SAAAA,GAAAA,GAAAA,EAAAA,uBA+BrJtB,gBA/BqJsB,GA+BlIrB,iBA/BkIqB,CA+BhHtB,gBA/BgHsB,CAAAA,GA+B5FpB,kBA/B4FoB,CA+BzEtB,gBA/ByEsB,CAAAA,GAAAA,SAAAA,GAAAA,GAAAA,EAAAA,eAAAA,GAAAA,CAAAA,CAAAA;EAAO;;;EAAtC,IAA/BL,EAAAA,MAAAA;EAAc;AAMjN;;;;;;EAAsH,WAC1FK,CAAAA,EAoCVA,OApCUA;EAAO;;;AACP;AAU5B;;;EAA8D,aAAwEA,CAAAA,EAiClHoB,cAjCkHpB;EAAO;;;EAAgD,KAAhBR,CAAAA,EAAAA,CAqChKF,UArCgKE,GAqCnJD,UArCmJC,CAAAA,EAAAA;EAAO;;;;;AAA6B;AAMjN;;;;;;;;;;AAE4B;AAK5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwJ+B;AAC9B;;;;;;;AAK4D;AAO7D;;;;;;EAA8G,YAASd,CAAAA,EA9EpG6B,gBA8EoG7B,CA9EnFsB,OA8EmFtB,EA9E1E2C,YA8E0E3C,CAAAA;EAAgB;;;AAAqB;AAK5J;;;;;;;;;;AAAiK;AAIjK;;;;;;;;;;;;;EAAuQ,aAA8BoD,CAAAA,EA1DjRrB,iBA0DiRqB,CA1D/P9B,OA0D+P8B,EA1DtPT,YA0DsPS,CAAAA;EAAK;AAAN;AAIpS;;;;;;EAAmK,WAASX,CAAAA,EArD1JP,eAqD0JO,CArD1InB,OAqD0ImB,EArDjIE,YAqDiIF,CAAAA;EAAe;;;;;;;;EAA4I,WAAA,CAAA,EA5CrTL,eA4CqT,CA5CrSd,OA4CqS,EA5C5RqB,YA4C4R,CAAA;EAgB3TgB;;;;;;;;EAA8K,UAA1BxD,CAAAA,EAnD/ImC,cAmD+InC,CAnDhImB,OAmDgInB,EAnDvHwC,YAmDuHxC,CAAAA;EAAoB;;;;AAAuE;AAIkF;;;EAI5S,UAAyB6D,CAAAA,EAlDzCxB,cAkDyCwB,CAlD1B1C,OAkD0B0C,EAlDjBrB,YAkDiBqB,CAAAA;;;;;KA7CrDpB,kBA6CiKoB,CAAAA,CAAAA,CAAAA,GAAAA,QAAKD,MA5C3J7C,CA4C2J6C,IA5CtJlB,CA4CsJkB,SAAAA,IAAAA,MAAAA,EAAAA,GAAAA,KAAAA,GA5CrHlB,CA4CqHkB,GA5CjH7C,CA4CiH6C,CA5C/GlB,CA4C+GkB,CAAAA,EAAC;;;;AAA8B;AAI9LE,KAzCAjB,oBAyCAiB,CAAAA,UAzC+BxB,eAyCH,CAAA,GAzCsBvB,CAyCtB,SAzCgCuB,eAyChC,CAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,CAAA,GAzCqEQ,CAyCrE,SAzC+EjD,gBAyC/E,GAzCkG4C,kBAyClG,CAzCqHxC,qBAyCrH,CAzC2I6C,CAyC3I,CAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA;;;;;AAAwHG,KApCpJF,yBAoCoJE,CAAAA,UApChHX,eAoCgHW,CAAAA,GApC7FlC,CAoC6FkC,SApCnFX,eAoCmFW,CAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,CAAAA,GApC9CH,CAoC8CG,SApCpCpD,gBAoCoCoD,GApCjBR,kBAoCiBQ,CApCEjD,oBAoCFiD,CApCuBH,CAoCvBG,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA;;;;AAAwHA,KAhC5QD,qBAgC4QC,CAAAA,IAhClPX,eAgCkPW,EAAAA,CAAAA,GAhC7NlC,CAgC6NkC,SAAAA,SAAAA,EAAAA,GAAAA,CAAAA,CAAAA,GAhChMlC,CAgCgMkC,SAAAA,SAAAA,CAAAA,KAAAA,MAAAA,EAAAA,GAAAA,KAAAA,KAAAA,CAAAA,GAhC9IA,KAgC8IA,SAhChIX,eAgCgIW,GAhC9GC,IAgC8GD,SAAAA,SAhCxFX,eAgCwFW,EAAAA,GAhCpEJ,oBAgCoEI,CAhC/CA,KAgC+CA,CAAAA,GAhCtCD,qBAgCsCC,CAhChBC,IAgCgBD,CAAAA,GAhCRJ,oBAgCQI,CAhCaA,KAgCbA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA;;;;AAA9CU,KA5B9NR,0BA4B8NQ,CAAAA,UAAAA,SA5BhLrB,eA4BgLqB,EAAAA,CAAAA,GA5B3J5C,CA4B2J4C,SAAAA,SAAAA,EAAAA,GAAAA,CAAAA,CAAAA,GA5B9H5C,CA4B8H4C,SAAAA,SAAAA,CAAAA,KAAAA,MAAAA,EAAAA,GAAAA,KAAAA,KAAAA,CAAAA,GA5B5EV,KA4B4EU,SA5B9DrB,eA4B8DqB,GA5B5CT,IA4B4CS,SAAAA,SA5BtBrB,eA4BsBqB,EAAAA,GA5BFZ,yBA4BEY,CA5BwBV,KA4BxBU,CAAAA,GA5BiCR,0BA4BjCQ,CA5B4DT,IA4B5DS,CAAAA,GA5BoEZ,yBA4BpEY,CA5B8FV,KA4B9FU,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA;;;AAAuH;;;;;AAI5H,KAhBzNH,2BAgByN,CAAA,UAhBnLlB,eAgBmL,CAAA,GAhBhKvB,CAgBgK,SAhBtJuB,eAgBsJ,CAAA,GAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,GAhBjHiB,CAgBiH,SAhBvGxD,kBAgBuG,CAAA,KAAA,MAAA,CAAA,GAhBrEC,oBAgBqE,CAhBhDyD,KAgBgD,CAAA,GAAA,SAAA,GAhB3BF,CAgB2B,SAhBjB1D,gBAgBiB,GAhBEG,oBAgBF,CAhBuBuD,CAgBvB,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AACrO;;;;;;;KATKI,iBAS4GC,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,GAAAA,CATjFA,CASiFA,CAAAA,SAAAA,CAAAA,SAAAA,CAAAA,GAAAA,CATvDC,CASuDD,CAAAA,SAAAA,CAAAA,SAAAA,CAAAA,GAAAA,SAAAA,GATlBC,CASkBD,GAAAA,SAAAA,GAAAA,CATDC,CASCD,CAAAA,SAAAA,CAAAA,SAAAA,CAAAA,GATwBA,CASxBA,GAAAA,SAAAA,GAAAA,CATyCA,CASzCA,CAAAA,SAAAA,CATqDC,CASrDD,CAAAA,GAT0DA,CAS1DA,GAAAA,CAT+DC,CAS/DD,CAAAA,SAAAA,CAT2EA,CAS3EA,CAAAA,GATgFC,CAShFD,GAToFA,CASpFA,GATwFC,CASxFD;;;;AAA6BzD,KALlI2D,4BAKkI3D,CAAAA,UAAAA,SALlFmC,eAKkFnC,EAAAA,CAAAA,GAL7DY,CAK6DZ,SAAAA,SAAAA,EAAAA,GAAAA,CAAAA,CAAAA,GALhCY,CAKgCZ,SAAAA,SAAAA,CAAAA,KAAAA,MAAAA,EAAAA,GAAAA,KAAAA,KAAAA,CAAAA,GALkB8C,KAKlB9C,SALgCmC,eAKhCnC,GALkD+C,IAKlD/C,SAAAA,SALwEmC,eAKxEnC,EAAAA,GAL4FwD,iBAK5FxD,CAL8GqD,2BAK9GrD,CAL0I8C,KAK1I9C,CAAAA,EALkJ2D,4BAKlJ3D,CAL+K+C,IAK/K/C,CAAAA,CAAAA,GALwLqD,2BAKxLrD,CALoN8C,KAKpN9C,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA;AAAc;AAC5J;;AAAuCc,KAF3B8C,iBAE2B9C,CAAAA,sBAFaA,iBAEbA,GAFiCpB,gBAEjCoB,CAAAA,GAFqD+C,aAErD/C,SAF2EpB,gBAE3EoB,GAF8FjB,oBAE9FiB,CAFmH+C,aAEnH/C,CAAAA,GAFoI+C,aAEpI/C,SAF0JA,iBAE1JA,GAF8K2B,gBAE9K3B,CAF+L+C,aAE/L/C,CAAAA,CAAAA,OAAAA,CAAAA,GAAAA,CAAAA,CAAAA;AAAoBpB,KAD/C+C,gBAC+C/C,CAAAA,UADpBoB,iBACoBpB,GADAA,gBACAA,CAAAA,GADoB+D,CACpB/D,SAD8BoB,iBAC9BpB,GADkD+D,CAClD/D,GADsD+D,CACtD/D,SADgEA,gBAChEA,GADmFM,cACnFN,CADkGK,2BAClGL,CAD8H+D,CAC9H/D,CAAAA,CAAAA,GAAAA,KAAAA;AAAgC+D,KAA/EK,gBAA+EL,CAAAA,UAApD3C,iBAAoD2C,GAAhC/D,gBAAgC+D,GAAAA,SAAAA,CAAAA,GAAAA,CAAAA,SAAU3C,iBAAV2C,GAA8B/D,gBAA9B+D,GAAiDhB,gBAAjDgB,CAAkEA,CAAlEA,CAAAA,CAAAA,OAAAA,CAAAA,GAAAA,CAAAA,CAAAA"}