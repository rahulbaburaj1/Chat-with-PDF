//#region src/agents/middleware/utils.ts
/**
* Default token counter that approximates based on character count
* @param messages Messages to count tokens for
* @returns Approximate token count
*/
function countTokensApproximately(messages) {
	let totalChars = 0;
	for (const msg of messages) {
		let textContent;
		if (typeof msg.content === "string") textContent = msg.content;
		else if (Array.isArray(msg.content)) textContent = msg.content.map((item) => {
			if (typeof item === "string") return item;
			if (item.type === "text" && "text" in item) return item.text;
			return "";
		}).join("");
		else textContent = "";
		totalChars += textContent.length;
	}
	return Math.ceil(totalChars / 4);
}
function getHookConstraint(hook) {
	if (!hook || typeof hook === "function") return void 0;
	return hook.canJumpTo;
}
function getHookFunction(arg) {
	if (typeof arg === "function") return arg;
	return arg.hook;
}

//#endregion
export { countTokensApproximately, getHookConstraint, getHookFunction };
//# sourceMappingURL=utils.js.map