{"version":3,"file":"index.js","names":["text: string","secretsMap: Record<string, any>","optionalImportsMap: OptionalImportMap & Record<string, any>","additionalImportsMap: Record<string, any>","coreLoad","importMap"],"sources":["../../src/load/index.ts"],"sourcesContent":["import { load as coreLoad } from \"@langchain/core/load\";\nimport { optionalImportEntrypoints } from \"./import_constants.js\";\nimport * as importMap from \"./import_map.js\";\nimport { OptionalImportMap } from \"./import_type.js\";\n\n/**\n * Load a LangChain module from a serialized text representation.\n * NOTE: This functionality is currently in beta.\n * Loaded classes may change independently of semver.\n * @param text Serialized text representation of the module.\n * @param secretsMap\n * @param optionalImportsMap\n * @returns A loaded instance of a LangChain module.\n */\nexport async function load<T>(\n  text: string,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  secretsMap: Record<string, any> = {},\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  optionalImportsMap: OptionalImportMap & Record<string, any> = {},\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  additionalImportsMap: Record<string, any> = {}\n): Promise<T> {\n  return coreLoad(text, {\n    secretsMap,\n    optionalImportsMap,\n    optionalImportEntrypoints,\n    importMap: { ...importMap, ...additionalImportsMap },\n  });\n}\n"],"mappings":";;;;;;;;;;;;;;AAcA,eAAsB,KACpBA,MAEAC,aAAkC,CAAE,GAEpCC,qBAA8D,CAAE,GAEhEC,uBAA4C,CAAE,GAClC;AACZ,QAAOC,OAAS,MAAM;EACpB;EACA;EACA;EACA,WAAW;GAAE,GAAGC;GAAW,GAAG;EAAsB;CACrD,EAAC;AACH"}