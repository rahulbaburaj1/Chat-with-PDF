{"version":3,"file":"base.cjs","names":["repoFullName: string","runnable: Runnable","options?: {\n    apiKey?: string;\n    apiUrl?: string;\n    parentCommitHash?: string;\n    isPublic?: boolean;\n    description?: string;\n    readme?: string;\n    tags?: string[];\n  }","ownerRepoCommit: string","options?: { apiKey?: string; apiUrl?: string; includeModel?: boolean }","varName: string","message: any","modelClass?: new (...args: any[]) => BaseLanguageModel","modelImportMap: Record<string, any>","optionalImportMap: Record<string, any>","loadedSequence: T"],"sources":["../../src/hub/base.ts"],"sourcesContent":["import type { BaseLanguageModel } from \"@langchain/core/language_models/base\";\nimport type { Runnable } from \"@langchain/core/runnables\";\n\nimport type { Client, ClientConfig } from \"langsmith\";\nimport type { PromptCommit } from \"langsmith/schemas\";\n\n/**\n * Push a prompt to the hub.\n * If the specified repo doesn't already exist, it will be created.\n * @param repoFullName The full name of the repo.\n * @param runnable The prompt to push.\n * @param options\n * @returns The URL of the newly pushed prompt in the hub.\n */\nexport async function basePush(\n  repoFullName: string,\n  runnable: Runnable,\n  options?: {\n    apiKey?: string;\n    apiUrl?: string;\n    parentCommitHash?: string;\n    isPublic?: boolean;\n    description?: string;\n    readme?: string;\n    tags?: string[];\n  }\n): Promise<string> {\n  const Client = await loadLangSmith();\n  const client = new Client(options);\n  const payloadOptions = {\n    object: runnable,\n    parentCommitHash: options?.parentCommitHash,\n    isPublic: options?.isPublic,\n    description: options?.description,\n    readme: options?.readme,\n    tags: options?.tags,\n  };\n  return client.pushPrompt(repoFullName, payloadOptions);\n}\n\nexport async function basePull(\n  ownerRepoCommit: string,\n  options?: { apiKey?: string; apiUrl?: string; includeModel?: boolean }\n): Promise<PromptCommit> {\n  const Client = await loadLangSmith();\n  const client = new Client(options);\n\n  const promptObject = await client.pullPromptCommit(ownerRepoCommit, {\n    includeModel: options?.includeModel,\n  });\n\n  if (promptObject.manifest.kwargs?.metadata === undefined) {\n    promptObject.manifest.kwargs = {\n      ...promptObject.manifest.kwargs,\n      metadata: {},\n    };\n  }\n\n  promptObject.manifest.kwargs.metadata = {\n    ...promptObject.manifest.kwargs.metadata,\n    lc_hub_owner: promptObject.owner,\n    lc_hub_repo: promptObject.repo,\n    lc_hub_commit_hash: promptObject.commit_hash,\n  };\n\n  // Some nested mustache prompts have improperly parsed variables that include a dot.\n  if (promptObject.manifest.kwargs.template_format === \"mustache\") {\n    const stripDotNotation = (varName: string) => varName.split(\".\")[0];\n\n    const { input_variables } = promptObject.manifest.kwargs;\n    if (Array.isArray(input_variables)) {\n      promptObject.manifest.kwargs.input_variables =\n        input_variables.map(stripDotNotation);\n    }\n\n    const { messages } = promptObject.manifest.kwargs;\n    if (Array.isArray(messages)) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      promptObject.manifest.kwargs.messages = messages.map((message: any) => {\n        const nestedVars = message?.kwargs?.prompt?.kwargs?.input_variables;\n        if (Array.isArray(nestedVars)) {\n          message.kwargs.prompt.kwargs.input_variables =\n            nestedVars.map(stripDotNotation);\n        }\n        return message;\n      });\n    }\n  }\n  return promptObject;\n}\n\nexport function generateModelImportMap(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  modelClass?: new (...args: any[]) => BaseLanguageModel\n) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const modelImportMap: Record<string, any> = {};\n  if (modelClass !== undefined) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const modelLcName = (modelClass as any)?.lc_name();\n    let importMapKey;\n    if (modelLcName === \"ChatOpenAI\") {\n      importMapKey = \"chat_models__openai\";\n    } else if (modelLcName === \"ChatAnthropic\") {\n      importMapKey = \"chat_models__anthropic\";\n    } else if (modelLcName === \"ChatAzureOpenAI\") {\n      importMapKey = \"chat_models__openai\";\n    } else if (modelLcName === \"ChatVertexAI\") {\n      importMapKey = \"chat_models__vertexai\";\n    } else if (modelLcName === \"ChatGoogleGenerativeAI\") {\n      importMapKey = \"chat_models__google_genai\";\n    } else if (modelLcName === \"ChatBedrockConverse\") {\n      importMapKey = \"chat_models__chat_bedrock_converse\";\n    } else if (modelLcName === \"ChatMistralAI\") {\n      importMapKey = \"chat_models__mistralai\";\n    } else if (modelLcName === \"ChatMistral\") {\n      importMapKey = \"chat_models__mistralai\";\n    } else if (modelLcName === \"ChatFireworks\") {\n      importMapKey = \"chat_models__fireworks\";\n    } else if (modelLcName === \"ChatGroq\") {\n      importMapKey = \"chat_models__groq\";\n    } else {\n      throw new Error(\"Received unsupported model class when pulling prompt.\");\n    }\n    modelImportMap[importMapKey] = {\n      ...modelImportMap[importMapKey],\n      [modelLcName]: modelClass,\n    };\n  }\n  return modelImportMap;\n}\n\nexport function generateOptionalImportMap(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  modelClass?: new (...args: any[]) => BaseLanguageModel\n) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const optionalImportMap: Record<string, any> = {};\n  if (modelClass !== undefined) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const modelLcName = (modelClass as any)?.lc_name();\n    let optionalImportMapKey;\n    if (modelLcName === \"ChatGoogleGenerativeAI\") {\n      optionalImportMapKey = \"langchain_google_genai/chat_models\";\n    } else if (modelLcName === \"ChatBedrockConverse\") {\n      optionalImportMapKey = \"langchain_aws/chat_models\";\n    } else if (modelLcName === \"ChatGroq\") {\n      optionalImportMapKey = \"langchain_groq/chat_models\";\n    }\n    if (optionalImportMapKey !== undefined) {\n      optionalImportMap[optionalImportMapKey] = {\n        [modelLcName]: modelClass,\n      };\n    }\n  }\n  return optionalImportMap;\n}\n\nexport function bindOutputSchema<T extends Runnable>(loadedSequence: T) {\n  if (\n    \"first\" in loadedSequence &&\n    loadedSequence.first !== null &&\n    typeof loadedSequence.first === \"object\" &&\n    \"schema\" in loadedSequence.first &&\n    \"last\" in loadedSequence &&\n    loadedSequence.last !== null &&\n    typeof loadedSequence.last === \"object\"\n  ) {\n    if (\n      \"bound\" in loadedSequence.last &&\n      loadedSequence.last.bound !== null &&\n      typeof loadedSequence.last.bound === \"object\" &&\n      \"withStructuredOutput\" in loadedSequence.last.bound &&\n      typeof loadedSequence.last.bound.withStructuredOutput === \"function\"\n    ) {\n      loadedSequence.last.bound =\n        loadedSequence.last.bound.withStructuredOutput(\n          loadedSequence.first.schema\n        );\n    } else if (\n      \"withStructuredOutput\" in loadedSequence.last &&\n      typeof loadedSequence.last.withStructuredOutput === \"function\"\n    ) {\n      loadedSequence.last = loadedSequence.last.withStructuredOutput(\n        loadedSequence.first.schema\n      );\n    }\n  }\n  return loadedSequence;\n}\n\n/**\n * Dynamically load the LangSmith client.\n * @returns The LangSmith client.\n */\nasync function loadLangSmith(): Promise<new (config?: ClientConfig) => Client> {\n  try {\n    const { Client } = await import(\"langsmith\");\n    return Client;\n  } catch (error) {\n    // eslint-disable-next-line no-instanceof/no-instanceof\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    throw new Error(\n      `Error loading \"langsmith\" package, install it via \\`npm install langsmith\\` before you use this function.\\nError: ${errorMessage}`\n    );\n  }\n}\n"],"mappings":"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"}