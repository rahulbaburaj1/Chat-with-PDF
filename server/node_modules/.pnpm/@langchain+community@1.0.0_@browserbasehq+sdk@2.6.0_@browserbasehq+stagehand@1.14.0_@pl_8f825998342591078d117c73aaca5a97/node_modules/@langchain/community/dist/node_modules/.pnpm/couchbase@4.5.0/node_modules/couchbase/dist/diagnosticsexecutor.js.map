{"version":3,"file":"diagnosticsexecutor.js","names":[],"sources":["../../../../../../../../../node_modules/.pnpm/couchbase@4.5.0/node_modules/couchbase/dist/diagnosticsexecutor.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PingExecutor = exports.DiagnoticsExecutor = void 0;\n/* eslint jsdoc/require-jsdoc: off */\nconst bindingutilities_1 = require(\"./bindingutilities\");\nconst diagnosticstypes_1 = require(\"./diagnosticstypes\");\n/**\n * @internal\n */\nclass DiagnoticsExecutor {\n    /**\n     * @internal\n     */\n    constructor(cluster) {\n        this._cluster = cluster;\n    }\n    /**\n     * @internal\n     */\n    async diagnostics(options) {\n        return new Promise((resolve, reject) => {\n            this._cluster.conn.diagnostics({\n                report_id: options.reportId,\n            }, (cppErr, resp) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                if (err || !resp) {\n                    reject(err);\n                    return;\n                }\n                resolve(new diagnosticstypes_1.DiagnosticsResult({\n                    version: resp.version,\n                    id: resp.id,\n                    sdk: resp.sdk,\n                    services: Object.fromEntries(Object.entries(resp.services).map(([serviceType, services]) => {\n                        return [\n                            (0, bindingutilities_1.serviceTypeFromCpp)(parseInt(serviceType)),\n                            services.map((svc) => {\n                                return new diagnosticstypes_1.DiagnosticsEndpoint({\n                                    type: (0, bindingutilities_1.serviceTypeFromCpp)(svc.type),\n                                    id: svc.id,\n                                    local: svc.local,\n                                    remote: svc.remote,\n                                    lastActivity: svc.last_activity,\n                                    state: (0, bindingutilities_1.endpointStateFromCpp)(svc.state),\n                                });\n                            }),\n                        ];\n                    })),\n                }));\n            });\n        });\n    }\n}\nexports.DiagnoticsExecutor = DiagnoticsExecutor;\n/**\n * @internal\n */\nclass PingExecutor {\n    /**\n     * @internal\n     */\n    constructor(cluster) {\n        this._cluster = cluster;\n    }\n    /**\n     * @internal\n     */\n    async ping(options) {\n        return new Promise((resolve, reject) => {\n            // BUG(JSCBC-993): timeout is not currently sent to the C++ client\n            options.timeout;\n            this._cluster.conn.ping({\n                report_id: options.reportId,\n                services: options.serviceTypes\n                    ? options.serviceTypes.map((svc) => (0, bindingutilities_1.serviceTypeToCpp)(svc))\n                    : undefined,\n            }, (cppErr, resp) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                if (err || !resp) {\n                    reject(err);\n                    return;\n                }\n                resolve(new diagnosticstypes_1.PingResult({\n                    version: resp.version,\n                    id: resp.id,\n                    sdk: resp.sdk,\n                    services: Object.fromEntries(Object.entries(resp.services).map(([serviceType, services]) => {\n                        return [\n                            (0, bindingutilities_1.serviceTypeFromCpp)(parseInt(serviceType)),\n                            services.map((svc) => {\n                                return new diagnosticstypes_1.PingEndpoint({\n                                    type: (0, bindingutilities_1.serviceTypeFromCpp)(svc.type),\n                                    id: svc.id,\n                                    latency: svc.latency,\n                                    remote: svc.remote,\n                                    local: svc.local,\n                                    state: (0, bindingutilities_1.pingStateFromCpp)(svc.state),\n                                    bucket: svc.bucket,\n                                    error: svc.error,\n                                });\n                            }),\n                        ];\n                    })),\n                }));\n            });\n        });\n    }\n}\nexports.PingExecutor = PingExecutor;\n"],"x_google_ignoreList":[0],"mappings":";;;;;;;;CACA,OAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAM,EAAC;CAC7D,QAAQ,eAAe,QAAQ,qBAAqB,KAAK;CAEzD,MAAM;CACN,MAAM;;;;CAIN,IAAM,qBAAN,MAAyB;;;;EAIrB,YAAY,SAAS;GACjB,KAAK,WAAW;EACnB;;;;EAID,MAAM,YAAY,SAAS;AACvB,UAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;IACpC,KAAK,SAAS,KAAK,YAAY,EAC3B,WAAW,QAAQ,SACtB,GAAE,CAAC,QAAQ,SAAS;KACjB,MAAM,OAAO,GAAG,mBAAmB,cAAc,OAAO;AACxD,SAAI,OAAO,CAAC,MAAM;MACd,OAAO,IAAI;AACX;KACH;KACD,QAAQ,IAAI,mBAAmB,kBAAkB;MAC7C,SAAS,KAAK;MACd,IAAI,KAAK;MACT,KAAK,KAAK;MACV,UAAU,OAAO,YAAY,OAAO,QAAQ,KAAK,SAAS,CAAC,IAAI,CAAC,CAAC,aAAa,SAAS,KAAK;AACxF,cAAO,EACF,GAAG,mBAAmB,oBAAoB,SAAS,YAAY,CAAC,EACjE,SAAS,IAAI,CAAC,QAAQ;AAClB,eAAO,IAAI,mBAAmB,oBAAoB;SAC9C,OAAO,GAAG,mBAAmB,oBAAoB,IAAI,KAAK;SAC1D,IAAI,IAAI;SACR,OAAO,IAAI;SACX,QAAQ,IAAI;SACZ,cAAc,IAAI;SAClB,QAAQ,GAAG,mBAAmB,sBAAsB,IAAI,MAAM;QACjE;OACJ,EAAC,AACL;MACJ,EAAC,CAAC;KACN,GAAE;IACN,EAAC;GACL;EACJ;CACJ;CACD,QAAQ,qBAAqB;;;;CAI7B,IAAM,eAAN,MAAmB;;;;EAIf,YAAY,SAAS;GACjB,KAAK,WAAW;EACnB;;;;EAID,MAAM,KAAK,SAAS;AAChB,UAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;IAEpC,QAAQ;IACR,KAAK,SAAS,KAAK,KAAK;KACpB,WAAW,QAAQ;KACnB,UAAU,QAAQ,eACZ,QAAQ,aAAa,IAAI,CAAC,SAAS,GAAG,mBAAmB,kBAAkB,IAAI,CAAC,GAChF;IACT,GAAE,CAAC,QAAQ,SAAS;KACjB,MAAM,OAAO,GAAG,mBAAmB,cAAc,OAAO;AACxD,SAAI,OAAO,CAAC,MAAM;MACd,OAAO,IAAI;AACX;KACH;KACD,QAAQ,IAAI,mBAAmB,WAAW;MACtC,SAAS,KAAK;MACd,IAAI,KAAK;MACT,KAAK,KAAK;MACV,UAAU,OAAO,YAAY,OAAO,QAAQ,KAAK,SAAS,CAAC,IAAI,CAAC,CAAC,aAAa,SAAS,KAAK;AACxF,cAAO,EACF,GAAG,mBAAmB,oBAAoB,SAAS,YAAY,CAAC,EACjE,SAAS,IAAI,CAAC,QAAQ;AAClB,eAAO,IAAI,mBAAmB,aAAa;SACvC,OAAO,GAAG,mBAAmB,oBAAoB,IAAI,KAAK;SAC1D,IAAI,IAAI;SACR,SAAS,IAAI;SACb,QAAQ,IAAI;SACZ,OAAO,IAAI;SACX,QAAQ,GAAG,mBAAmB,kBAAkB,IAAI,MAAM;SAC1D,QAAQ,IAAI;SACZ,OAAO,IAAI;QACd;OACJ,EAAC,AACL;MACJ,EAAC,CAAC;KACN,GAAE;IACN,EAAC;GACL;EACJ;CACJ;CACD,QAAQ,eAAe"}