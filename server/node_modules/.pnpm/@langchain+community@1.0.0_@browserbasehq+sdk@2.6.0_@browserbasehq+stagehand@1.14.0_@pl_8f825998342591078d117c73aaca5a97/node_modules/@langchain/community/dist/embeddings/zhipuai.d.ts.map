{"version":3,"file":"zhipuai.d.ts","names":["Embeddings","EmbeddingsParams","ZhipuAIEmbeddingsParams","EmbeddingData","TokenUsage","ZhipuAIEmbeddingsResult","ZhipuAIEmbeddings","Promise"],"sources":["../../src/embeddings/zhipuai.d.ts"],"sourcesContent":["import { Embeddings, type EmbeddingsParams } from \"@langchain/core/embeddings\";\n/**\n * Interface that extends EmbeddingsParams and defines additional\n * parameters specific to the ZhipuAIEmbeddingsParams class.\n */\nexport interface ZhipuAIEmbeddingsParams extends EmbeddingsParams {\n    /**\n     * Model Name to use\n     */\n    modelName?: \"embedding-2\" | \"embedding-3\";\n    /**\n     * ZhipuAI API key to use\n     */\n    apiKey?: string;\n    /**\n     * Whether to strip new lines from the input text.\n     */\n    stripNewLines?: boolean;\n}\ninterface EmbeddingData {\n    embedding: number[];\n    index: number;\n    object: string;\n}\ninterface TokenUsage {\n    completion_tokens: number;\n    prompt_tokens: number;\n    total_tokens: number;\n}\nexport interface ZhipuAIEmbeddingsResult {\n    model: string;\n    data: EmbeddingData[];\n    object: string;\n    usage: TokenUsage;\n}\nexport declare class ZhipuAIEmbeddings extends Embeddings implements ZhipuAIEmbeddingsParams {\n    modelName: ZhipuAIEmbeddingsParams[\"modelName\"];\n    apiKey?: string;\n    stripNewLines: boolean;\n    private embeddingsAPIURL;\n    constructor(fields?: ZhipuAIEmbeddingsParams);\n    private embeddingWithRetry;\n    /**\n     * Method to generate an embedding for a single document. Calls the\n     * embeddingWithRetry method with the document as the input.\n     * @param {string} text Document to generate an embedding for.\n     * @returns {Promise<number[]>} Promise that resolves to an embedding for the document.\n     */\n    embedQuery(text: string): Promise<number[]>;\n    /**\n     * Method that takes an array of documents as input and returns a promise\n     * that resolves to a 2D array of embeddings for each document. It calls\n     * the embedQuery method for each document in the array.\n     * @param documents Array of documents for which to generate embeddings.\n     * @returns Promise that resolves to a 2D array of embeddings for each input document.\n     */\n    embedDocuments(documents: string[]): Promise<number[][]>;\n}\nexport {};\n"],"mappings":";;;;;;;;;;UAKiBE,uBAAAA,SAAgCD;;;;;EAAhCC;AAahB;AACsB;EAUNG,MAAAA,CAAAA,EAAAA,MAAAA;EAAuB;;;EAInB,aAAA,CAAA,EAAA,OAAA;AAErB;UAhBUF,aAAAA,CAgB4B;EAAA,SACvBD,EAAAA,MAAAA,EAAAA;EAAuB,KAIbA,EAAAA,MAAAA;EAAuB,MAQlBK,EAAAA,MAAAA;;UAxBpBH,UAAAA,CAWqCJ;EAAU,iBAAYE,EAAAA,MAAAA;EAAuB,aAAA,EAAA,MAAA;;;UAN3EG,uBAAAA;;QAEPF;;SAECC;;cAEUE,iBAAAA,SAA0BN,UAAAA,YAAsBE;aACtDA;;;;uBAIUA;;;;;;;;4BAQKK;;;;;;;;uCAQWA"}