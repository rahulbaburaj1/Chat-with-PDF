{"version":3,"file":"vectorsearch.js","names":["VectorQueryCombination"],"sources":["../../../../../../../../../node_modules/.pnpm/couchbase@4.5.0/node_modules/couchbase/dist/vectorsearch.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VectorSearch = exports.VectorQuery = exports.VectorQueryCombination = void 0;\nconst errors_1 = require(\"./errors\");\n/**\n * Specifies how multiple vector searches are combined.\n *\n * @category Full Text Search\n */\nvar VectorQueryCombination;\n(function (VectorQueryCombination) {\n    /**\n     * Indicates that multiple vector queries should be combined with logical AND.\n     */\n    VectorQueryCombination[\"AND\"] = \"and\";\n    /**\n     * Indicates that multiple vector queries should be combined with logical OR.\n     */\n    VectorQueryCombination[\"OR\"] = \"or\";\n})(VectorQueryCombination || (exports.VectorQueryCombination = VectorQueryCombination = {}));\n/**\n * Represents a vector query.\n *\n * @category Full Text Search\n */\nclass VectorQuery {\n    constructor(fieldName, vector) {\n        if (!fieldName) {\n            throw new errors_1.InvalidArgumentError(new Error('Must provide a field name.'));\n        }\n        this._fieldName = fieldName;\n        if (!vector) {\n            throw new errors_1.InvalidArgumentError(new Error('Provided vector cannot be empty.'));\n        }\n        if (Array.isArray(vector)) {\n            if (vector.length == 0) {\n                throw new errors_1.InvalidArgumentError(new Error('Provided vector cannot be empty.'));\n            }\n            this._vector = vector;\n        }\n        else if (typeof vector === 'string') {\n            this._vectorBase64 = vector;\n        }\n        else {\n            throw new errors_1.InvalidArgumentError(new Error('Provided vector must be either a number[] or base64 encoded string.'));\n        }\n    }\n    /**\n     * @internal\n     */\n    toJSON() {\n        var _a;\n        const output = {\n            field: this._fieldName,\n            k: (_a = this._numCandidates) !== null && _a !== void 0 ? _a : 3,\n        };\n        if (this._vector) {\n            output['vector'] = this._vector;\n        }\n        else {\n            output['vector_base64'] = this._vectorBase64;\n        }\n        if (this._boost) {\n            output['boost'] = this._boost;\n        }\n        return output;\n    }\n    /**\n     * Adds boost option to vector query.\n     *\n     * @param boost A floating point value.\n     */\n    boost(boost) {\n        this._boost = boost;\n        return this;\n    }\n    /**\n     * Adds numCandidates option to vector query. Value must be >= 1.\n     *\n     * @param numCandidates An integer value.\n     */\n    numCandidates(numCandidates) {\n        if (numCandidates < 1) {\n            throw new errors_1.InvalidArgumentError(new Error('Provided value for numCandidates must be >= 1.'));\n        }\n        this._numCandidates = numCandidates;\n        return this;\n    }\n    /**\n     * Creates a vector query.\n     *\n     * @param fieldName The name of the field in the JSON document that holds the vector.\n     * @param vector List of floating point values that represent the vector.\n     */\n    static create(fieldName, vector) {\n        return new VectorQuery(fieldName, vector);\n    }\n}\nexports.VectorQuery = VectorQuery;\n/**\n * Represents a vector search.\n *\n * @category Full Text Search\n */\nclass VectorSearch {\n    constructor(queries, options) {\n        if (!Array.isArray(queries) || queries.length == 0) {\n            throw new errors_1.InvalidArgumentError(new Error('Provided queries must be an array and cannot be empty.'));\n        }\n        if (!queries.every((q) => q instanceof VectorQuery)) {\n            throw new errors_1.InvalidArgumentError(new Error('All provided queries must be a VectorQuery.'));\n        }\n        this._queries = queries;\n        this._options = options;\n    }\n    /**\n     * @internal\n     */\n    get queries() {\n        return this._queries;\n    }\n    /**\n     * @internal\n     */\n    get options() {\n        return this._options;\n    }\n    /**\n     * Creates a vector search from a single VectorQuery.\n     *\n     * @param query A vectory query that should be a part of the vector search.\n     */\n    static fromVectorQuery(query) {\n        return new VectorSearch([query]);\n    }\n}\nexports.VectorSearch = VectorSearch;\n"],"x_google_ignoreList":[0],"mappings":";;;;;;;CACA,OAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAM,EAAC;CAC7D,QAAQ,eAAe,QAAQ,cAAc,QAAQ,yBAAyB,KAAK;CACnF,MAAM;;;;;;CAMN,IAAI;EACH,SAAUA,0BAAwB;;;;EAI/BA,yBAAuB,SAAS;;;;EAIhCA,yBAAuB,QAAQ;CAClC,GAAE,2BAA2B,QAAQ,yBAAyB,yBAAyB,CAAE,GAAE;;;;;;CAM5F,IAAM,cAAN,MAAM,YAAY;EACd,YAAY,WAAW,QAAQ;AAC3B,OAAI,CAAC,UACD,OAAM,IAAI,SAAS,qCAAqB,IAAI,MAAM;GAEtD,KAAK,aAAa;AAClB,OAAI,CAAC,OACD,OAAM,IAAI,SAAS,qCAAqB,IAAI,MAAM;AAEtD,OAAI,MAAM,QAAQ,OAAO,EAAE;AACvB,QAAI,OAAO,UAAU,EACjB,OAAM,IAAI,SAAS,qCAAqB,IAAI,MAAM;IAEtD,KAAK,UAAU;GAClB,WACQ,OAAO,WAAW,UACvB,KAAK,gBAAgB;OAGrB,OAAM,IAAI,SAAS,qCAAqB,IAAI,MAAM;EAEzD;;;;EAID,SAAS;GACL,IAAI;GACJ,MAAM,SAAS;IACX,OAAO,KAAK;IACZ,IAAI,KAAK,KAAK,oBAAoB,QAAQ,OAAO,KAAK,IAAI,KAAK;GAClE;AACD,OAAI,KAAK,SACL,OAAO,YAAY,KAAK;QAGxB,OAAO,mBAAmB,KAAK;AAEnC,OAAI,KAAK,QACL,OAAO,WAAW,KAAK;AAE3B,UAAO;EACV;;;;;;EAMD,MAAM,OAAO;GACT,KAAK,SAAS;AACd,UAAO;EACV;;;;;;EAMD,cAAc,eAAe;AACzB,OAAI,gBAAgB,EAChB,OAAM,IAAI,SAAS,qCAAqB,IAAI,MAAM;GAEtD,KAAK,iBAAiB;AACtB,UAAO;EACV;;;;;;;EAOD,OAAO,OAAO,WAAW,QAAQ;AAC7B,UAAO,IAAI,YAAY,WAAW;EACrC;CACJ;CACD,QAAQ,cAAc;;;;;;CAMtB,IAAM,eAAN,MAAM,aAAa;EACf,YAAY,SAAS,SAAS;AAC1B,OAAI,CAAC,MAAM,QAAQ,QAAQ,IAAI,QAAQ,UAAU,EAC7C,OAAM,IAAI,SAAS,qCAAqB,IAAI,MAAM;AAEtD,OAAI,CAAC,QAAQ,MAAM,CAAC,MAAM,aAAa,YAAY,CAC/C,OAAM,IAAI,SAAS,qCAAqB,IAAI,MAAM;GAEtD,KAAK,WAAW;GAChB,KAAK,WAAW;EACnB;;;;EAID,IAAI,UAAU;AACV,UAAO,KAAK;EACf;;;;EAID,IAAI,UAAU;AACV,UAAO,KAAK;EACf;;;;;;EAMD,OAAO,gBAAgB,OAAO;AAC1B,UAAO,IAAI,aAAa,CAAC,KAAM;EAClC;CACJ;CACD,QAAQ,eAAe"}