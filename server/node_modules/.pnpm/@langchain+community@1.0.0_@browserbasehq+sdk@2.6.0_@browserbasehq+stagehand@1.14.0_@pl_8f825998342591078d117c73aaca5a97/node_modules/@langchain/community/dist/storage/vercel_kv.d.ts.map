{"version":3,"file":"vercel_kv.d.ts","names":["VercelKV","BaseStore","VercelKVStore","Uint8Array","ArrayBufferLike","Promise","AsyncGenerator"],"sources":["../../src/storage/vercel_kv.d.ts"],"sourcesContent":["import { type VercelKV } from \"@vercel/kv\";\nimport { BaseStore } from \"@langchain/core/stores\";\n/**\n * Class that extends the BaseStore class to interact with a Vercel KV\n * database. It provides methods for getting, setting, and deleting data,\n * as well as yielding keys from the database.\n * @example\n * ```typescript\n * const store = new VercelKVStore({\n *   client: getClient(),\n * });\n * await store.mset([\n *   { key: \"message:id:0\", value: \"encoded message 0\" },\n *   { key: \"message:id:1\", value: \"encoded message 1\" },\n * ]);\n * const retrievedMessages = await store.mget([\"message:id:0\", \"message:id:1\"]);\n * const yieldedKeys = [];\n * for await (const key of store.yieldKeys(\"message:id:\")) {\n *   yieldedKeys.push(key);\n * }\n * await store.mdelete(yieldedKeys);\n * ```\n */\nexport declare class VercelKVStore extends BaseStore<string, Uint8Array> {\n    lc_namespace: string[];\n    protected client: VercelKV;\n    protected ttl?: number;\n    protected namespace?: string;\n    protected yieldKeysScanBatchSize: number;\n    constructor(fields?: {\n        client?: VercelKV;\n        ttl?: number;\n        namespace?: string;\n        yieldKeysScanBatchSize?: number;\n    });\n    _getPrefixedKey(key: string): string;\n    _getDeprefixedKey(key: string): string;\n    /**\n     * Gets multiple keys from the Redis database.\n     * @param keys Array of keys to be retrieved.\n     * @returns An array of retrieved values.\n     */\n    mget(keys: string[]): Promise<(Uint8Array<ArrayBufferLike> | undefined)[]>;\n    /**\n     * Sets multiple keys in the Redis database.\n     * @param keyValuePairs Array of key-value pairs to be set.\n     * @returns Promise that resolves when all keys have been set.\n     */\n    mset(keyValuePairs: [string, Uint8Array][]): Promise<void>;\n    /**\n     * Deletes multiple keys from the Redis database.\n     * @param keys Array of keys to be deleted.\n     * @returns Promise that resolves when all keys have been deleted.\n     */\n    mdelete(keys: string[]): Promise<void>;\n    /**\n     * Yields keys from the Redis database.\n     * @param prefix Optional prefix to filter the keys.\n     * @returns An AsyncGenerator that yields keys from the Redis database.\n     */\n    yieldKeys(prefix?: string): AsyncGenerator<string>;\n}\n"],"mappings":";;;;;;;;;;;;AAuBA;;;;;;;;;;;;;AAAoD;;;cAA/BE,aAAAA,SAAsBD,kBAAkBE;;oBAEvCH;;;;;aAKLA;;;;;;;;;;;;wBAYSK,SAASF,WAAWC;;;;;;+BAMbD,gBAAgBE;;;;;;2BAMpBA;;;;;;8BAMGC"}