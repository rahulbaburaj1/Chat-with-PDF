{"version":3,"file":"aleph_alpha.d.cts","names":["LLM","BaseLLMParams","AlephAlphaInput","AlephAlpha","Partial","Promise"],"sources":["../../src/llms/aleph_alpha.d.ts"],"sourcesContent":["import { LLM, type BaseLLMParams } from \"@langchain/core/language_models/llms\";\n/**\n * Interface for the input parameters specific to the Aleph Alpha LLM.\n */\nexport interface AlephAlphaInput extends BaseLLMParams {\n    model: string;\n    maximum_tokens: number;\n    minimum_tokens?: number;\n    echo?: boolean;\n    temperature?: number;\n    top_k?: number;\n    top_p?: number;\n    presence_penalty?: number;\n    frequency_penalty?: number;\n    sequence_penalty?: number;\n    sequence_penalty_min_length?: number;\n    repetition_penalties_include_prompt?: boolean;\n    repetition_penalties_include_completion?: boolean;\n    use_multiplicative_presence_penalty?: boolean;\n    use_multiplicative_frequency_penalty?: boolean;\n    use_multiplicative_sequence_penalty?: boolean;\n    penalty_bias?: string;\n    penalty_exceptions?: string[];\n    penalty_exceptions_include_stop_sequences?: boolean;\n    best_of?: number;\n    n?: number;\n    logit_bias?: object;\n    log_probs?: number;\n    tokens?: boolean;\n    raw_completion: boolean;\n    disable_optimizations?: boolean;\n    completion_bias_inclusion?: string[];\n    completion_bias_inclusion_first_token_only: boolean;\n    completion_bias_exclusion?: string[];\n    completion_bias_exclusion_first_token_only: boolean;\n    contextual_control_threshold?: number;\n    control_log_additive: boolean;\n    stop?: string[];\n    aleph_alpha_api_key?: string;\n    base_url: string;\n}\n/**\n * Specific implementation of a Large Language Model (LLM) designed to\n * interact with the Aleph Alpha API. It extends the base LLM class and\n * includes a variety of parameters for customizing the behavior of the\n * Aleph Alpha model.\n */\nexport declare class AlephAlpha extends LLM implements AlephAlphaInput {\n    lc_serializable: boolean;\n    model: string;\n    maximum_tokens: number;\n    minimum_tokens: number;\n    echo: boolean;\n    temperature: number;\n    top_k: number;\n    top_p: number;\n    presence_penalty?: number;\n    frequency_penalty?: number;\n    sequence_penalty?: number;\n    sequence_penalty_min_length?: number;\n    repetition_penalties_include_prompt?: boolean;\n    repetition_penalties_include_completion?: boolean;\n    use_multiplicative_presence_penalty?: boolean;\n    use_multiplicative_frequency_penalty?: boolean;\n    use_multiplicative_sequence_penalty?: boolean;\n    penalty_bias?: string;\n    penalty_exceptions?: string[];\n    penalty_exceptions_include_stop_sequences?: boolean;\n    best_of?: number;\n    n?: number;\n    logit_bias?: object;\n    log_probs?: number;\n    tokens?: boolean;\n    raw_completion: boolean;\n    disable_optimizations?: boolean;\n    completion_bias_inclusion?: string[];\n    completion_bias_inclusion_first_token_only: boolean;\n    completion_bias_exclusion?: string[];\n    completion_bias_exclusion_first_token_only: boolean;\n    contextual_control_threshold?: number;\n    control_log_additive: boolean;\n    aleph_alpha_api_key?: string | undefined;\n    stop?: string[];\n    base_url: string;\n    constructor(fields: Partial<AlephAlpha>);\n    /**\n     * Validates the environment by ensuring the necessary Aleph Alpha API key\n     * is available. Throws an error if the API key is missing.\n     */\n    validateEnvironment(): void;\n    /** Get the default parameters for calling Aleph Alpha API. */\n    get defaultParams(): {\n        model: string;\n        temperature: number;\n        maximum_tokens: number;\n        minimum_tokens: number;\n        top_k: number;\n        top_p: number;\n        presence_penalty: number | undefined;\n        frequency_penalty: number | undefined;\n        sequence_penalty: number | undefined;\n        sequence_penalty_min_length: number | undefined;\n        repetition_penalties_include_prompt: boolean | undefined;\n        repetition_penalties_include_completion: boolean | undefined;\n        use_multiplicative_presence_penalty: boolean | undefined;\n        use_multiplicative_frequency_penalty: boolean | undefined;\n        use_multiplicative_sequence_penalty: boolean | undefined;\n        penalty_bias: string | undefined;\n        penalty_exceptions: string[] | undefined;\n        penalty_exceptions_include_stop_sequences: boolean | undefined;\n        best_of: number | undefined;\n        n: number | undefined;\n        logit_bias: object | undefined;\n        log_probs: number | undefined;\n        tokens: boolean | undefined;\n        raw_completion: boolean;\n        disable_optimizations: boolean | undefined;\n        completion_bias_inclusion: string[] | undefined;\n        completion_bias_inclusion_first_token_only: boolean;\n        completion_bias_exclusion: string[] | undefined;\n        completion_bias_exclusion_first_token_only: boolean;\n        contextual_control_threshold: number | undefined;\n        control_log_additive: boolean;\n    };\n    /** Get the identifying parameters for this LLM. */\n    get identifyingParams(): {\n        model: string;\n        temperature: number;\n        maximum_tokens: number;\n        minimum_tokens: number;\n        top_k: number;\n        top_p: number;\n        presence_penalty: number | undefined;\n        frequency_penalty: number | undefined;\n        sequence_penalty: number | undefined;\n        sequence_penalty_min_length: number | undefined;\n        repetition_penalties_include_prompt: boolean | undefined;\n        repetition_penalties_include_completion: boolean | undefined;\n        use_multiplicative_presence_penalty: boolean | undefined;\n        use_multiplicative_frequency_penalty: boolean | undefined;\n        use_multiplicative_sequence_penalty: boolean | undefined;\n        penalty_bias: string | undefined;\n        penalty_exceptions: string[] | undefined;\n        penalty_exceptions_include_stop_sequences: boolean | undefined;\n        best_of: number | undefined;\n        n: number | undefined;\n        logit_bias: object | undefined;\n        log_probs: number | undefined;\n        tokens: boolean | undefined;\n        raw_completion: boolean;\n        disable_optimizations: boolean | undefined;\n        completion_bias_inclusion: string[] | undefined;\n        completion_bias_inclusion_first_token_only: boolean;\n        completion_bias_exclusion: string[] | undefined;\n        completion_bias_exclusion_first_token_only: boolean;\n        contextual_control_threshold: number | undefined;\n        control_log_additive: boolean;\n    };\n    /** Get the type of LLM. */\n    _llmType(): string;\n    _call(prompt: string, options: this[\"ParsedCallOptions\"]): Promise<string>;\n}\n"],"mappings":";;;;;;;;;UAIiBE,eAAAA,SAAwBD;;;;;EAAxBC,WAAAA,CAAAA,EAAAA,MAAe;EA2CXC,KAAAA,CAAAA,EAAAA,MAAU;EAAA,KAAA,CAAA,EAAA,MAAA;EAAA,gBAqCCA,CAAAA,EAAAA,MAAAA;EAAU,iBAAlBC,CAAAA,EAAAA,MAAAA;EAAO,gBA4EgCC,CAAAA,EAAAA,MAAAA;EAAO,2BAjH9BL,CAAAA,EAAAA,MAAAA;EAAG,mCAAYE,CAAAA,EAAAA,OAAAA;EAAe,uCAAA,CAAA,EAAA,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAAjDC,UAAAA,SAAmBH,GAAAA,YAAeE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sBAqC/BE,QAAQD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6DA4E+BE"}