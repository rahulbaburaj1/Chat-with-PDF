{"version":3,"file":"couchbase.d.cts","names":["Cluster","Document","BaseDocumentLoader","DocumentLoader","CouchbaseDocumentLoader","Promise","AsyncIterable"],"sources":["../../../src/document_loaders/web/couchbase.d.ts"],"sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\nimport { Cluster } from \"couchbase\";\nimport { Document } from \"@langchain/core/documents\";\nimport { BaseDocumentLoader, DocumentLoader } from \"@langchain/core/document_loaders/base\";\n/**\n * loader for couchbase document\n */\nexport declare class CouchbaseDocumentLoader extends BaseDocumentLoader implements DocumentLoader {\n    private cluster;\n    private query;\n    private pageContentFields?;\n    private metadataFields?;\n    /**\n     * construct Couchbase document loader with a requirement for couchbase cluster client\n     * @param client { Cluster } [ couchbase connected client to connect to database ]\n     * @param query { string } [ query to get results from while loading the data ]\n     * @param pageContentFields { Array<string> } [ filters fields of the document and shows these only ]\n     * @param metadataFields { Array<string> } [ metadata fields required ]\n     */\n    constructor(client: Cluster, query: string, pageContentFields?: string[], metadataFields?: string[]);\n    /**\n     * Function to load document based on query from couchbase\n     * @returns {Promise<Document[]>} [ Returns a promise of all the documents as array ]\n     */\n    load(): Promise<Document[]>;\n    /**\n     * Function to load documents based on iterator rather than full load\n     * @returns {AsyncIterable<Document>} [ Returns an iterator to fetch documents ]\n     */\n    lazyLoad(): AsyncIterable<Document>;\n}\n"],"mappings":";;;;;;;;;;;cAOqBI,uBAAAA,SAAgCF,kBAAAA,YAA8BC;EAA9DC,QAAAA,OAAAA;EAAuB,QAAA,KAAA;EAAA,QAYpBJ,iBAAAA;EAAO,QAKXC,cAAAA;EAAQ;;;;;AAjBqE;;sBAYzED;;;;;UAKZK,QAAQJ;;;;;cAKJK,cAAcL"}