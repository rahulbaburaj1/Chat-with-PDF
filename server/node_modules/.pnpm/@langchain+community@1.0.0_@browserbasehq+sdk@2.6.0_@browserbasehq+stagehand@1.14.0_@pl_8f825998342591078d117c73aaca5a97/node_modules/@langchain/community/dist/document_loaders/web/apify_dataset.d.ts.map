{"version":3,"file":"apify_dataset.d.ts","names":["ActorCallOptions","ApifyClient","ApifyClientOptions","TaskCallOptions","Document","AsyncCaller","AsyncCallerParams","BaseDocumentLoader","DocumentLoader","ApifyDatasetMappingFunction","Record","Metadata","Array","Promise","ApifyDatasetLoaderConfig","ApifyDatasetLoader"],"sources":["../../../src/document_loaders/web/apify_dataset.d.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { ActorCallOptions, ApifyClient, ApifyClientOptions, TaskCallOptions } from \"apify-client\";\nimport { Document } from \"@langchain/core/documents\";\nimport { AsyncCaller, AsyncCallerParams } from \"@langchain/core/utils/async_caller\";\nimport { BaseDocumentLoader, DocumentLoader } from \"@langchain/core/document_loaders/base\";\n/**\n * A type that represents a function that takes a single object (an Apify\n * dataset item) and converts it to an instance of the Document class.\n *\n * Change function signature to only be asynchronous for simplicity in v0.1.0\n * https://github.com/langchain-ai/langchainjs/pull/3262\n */\nexport type ApifyDatasetMappingFunction<Metadata extends Record<string, any>> = (item: Record<string | number, unknown>) => Document<Metadata> | Array<Document<Metadata>> | Promise<Document<Metadata> | Array<Document<Metadata>>>;\nexport interface ApifyDatasetLoaderConfig<Metadata extends Record<string, any>> extends AsyncCallerParams {\n    datasetMappingFunction: ApifyDatasetMappingFunction<Metadata>;\n    clientOptions?: ApifyClientOptions;\n}\n/**\n * A class that extends the BaseDocumentLoader and implements the\n * DocumentLoader interface. It represents a document loader that loads\n * documents from an Apify dataset.\n * @example\n * ```typescript\n * const loader = new ApifyDatasetLoader(\"your-dataset-id\", {\n *   datasetMappingFunction: (item) =>\n *     new Document({\n *       pageContent: item.text || \"\",\n *       metadata: { source: item.url },\n *     }),\n *   clientOptions: {\n *     token: \"your-apify-token\",\n *   },\n * });\n *\n * const docs = await loader.load();\n *\n * const chain = new RetrievalQAChain();\n * const res = await chain.invoke({ query: \"What is LangChain?\" });\n *\n * console.log(res.text);\n * console.log(res.sourceDocuments.map((d) => d.metadata.source));\n * ```\n */\nexport declare class ApifyDatasetLoader<Metadata extends Record<string, any>> extends BaseDocumentLoader implements DocumentLoader {\n    protected apifyClient: ApifyClient;\n    protected datasetId: string;\n    protected datasetMappingFunction: ApifyDatasetMappingFunction<Metadata>;\n    protected caller: AsyncCaller;\n    constructor(datasetId: string, config: ApifyDatasetLoaderConfig<Metadata>);\n    /**\n     * Creates an instance of the ApifyClient class with the provided clientOptions.\n     * Adds a User-Agent header to the request config for langchainjs attribution.\n     * @param clientOptions\n     * @private\n     */\n    private static _getApifyClient;\n    private static _getApifyApiToken;\n    /**\n     * Adds a User-Agent header to the request config.\n     * @param config\n     * @private\n     */\n    private static _addUserAgent;\n    /**\n     * Retrieves the dataset items from the Apify platform and applies the\n     * datasetMappingFunction to each item to create an array of Document\n     * instances.\n     * @returns An array of Document instances.\n     */\n    load(): Promise<Document<Metadata>[]>;\n    /**\n     * Create an ApifyDatasetLoader by calling an Actor on the Apify platform and waiting for its results to be ready.\n     * @param actorId The ID or name of the Actor on the Apify platform.\n     * @param input The input object of the Actor that you're trying to run.\n     * @param config Options specifying settings for the Actor run.\n     * @param config.datasetMappingFunction A function that takes a single object (an Apify dataset item) and converts it to an instance of the Document class.\n     * @returns An instance of `ApifyDatasetLoader` with the results from the Actor run.\n     */\n    static fromActorCall<Metadata extends Record<string, any>>(actorId: string, input: Record<string | number, unknown>, config: {\n        callOptions?: ActorCallOptions;\n        clientOptions?: ApifyClientOptions;\n        datasetMappingFunction: ApifyDatasetMappingFunction<Metadata>;\n    }): Promise<ApifyDatasetLoader<Metadata>>;\n    /**\n     * Create an ApifyDatasetLoader by calling a saved Actor task on the Apify platform and waiting for its results to be ready.\n     * @param taskId The ID or name of the task on the Apify platform.\n     * @param input The input object of the task that you're trying to run. Overrides the task's saved input.\n     * @param config Options specifying settings for the task run.\n     * @param config.callOptions Options specifying settings for the task run.\n     * @param config.clientOptions Options specifying settings for the Apify client.\n     * @param config.datasetMappingFunction A function that takes a single object (an Apify dataset item) and converts it to an instance of the Document class.\n     * @returns An instance of `ApifyDatasetLoader` with the results from the task's run.\n     */\n    static fromActorTaskCall<Metadata extends Record<string, any>>(taskId: string, input: Record<string | number, unknown>, config: {\n        callOptions?: TaskCallOptions;\n        clientOptions?: ApifyClientOptions;\n        datasetMappingFunction: ApifyDatasetMappingFunction<Metadata>;\n    }): Promise<ApifyDatasetLoader<Metadata>>;\n}\n"],"mappings":";;;;;;;;;;;;;;;;KAYYS,6CAA6CC,8BAA8BA,qCAAqCN,SAASO,YAAYC,MAAMR,SAASO,aAAaE,QAAQT,SAASO,YAAYC,MAAMR,SAASO;AAA7MF,UACKK,wBADsB,CAAA,iBACoBJ,MADpB,CAAA,MAAA,EAAA,GAAA,CAAA,CAAA,SACiDJ,iBADjD,CAAA;EAAA,sBAAA,EAEXG,2BAFW,CAEiBE,QAFjB,CAAA;EAAA,aAAkBD,CAAAA,EAGrCR,kBAHqCQ;;;;;;;;;;;;;AAA2H;AACpL;;;;;;;AAAyG;AA8BzG;;;;;;AAIsBL,cAJDU,kBAICV,CAAAA,iBAJmCK,MAInCL,CAAAA,MAAAA,EAAAA,GAAAA,CAAAA,CAAAA,SAJgEE,kBAAAA,YAA8BC,cAI9FH,CAAAA;EAAW,UACmCM,WAAAA,EAJzCV,WAIyCU;EAAQ,UAAjCG,SAAAA,EAAAA,MAAAA;EAAwB,UAqBtCH,sBAAAA,EAvBSF,2BAuBTE,CAvBqCA,QAuBrCA,CAAAA;EAAQ,UAAjBP,MAAAA,EAtBEC,WAsBFD;EAAQ,WAAhBS,CAAAA,SAAAA,EAAAA,MAAAA,EAAAA,MAAAA,EArB+BC,wBAqB/BD,CArBwDF,QAqBxDE,CAAAA;EAAO;;;;;;EAYwC,eACxBF,eAAAA;EAAQ,eAA3BI,iBAAAA;EAAkB;;;;;EAaQ,eACkBJ,aAAAA;EAAQ;;;;;;EArD8D,IAAA,CAAA,CAAA,EA0BtHE,OA1BsH,CA0B9GT,QA1B8G,CA0BrGO,QA1BqG,CAAA,EAAA,CAAA;;;;;;;;;wCAmCxFD,6CAA6CA;kBACjEV;oBACEE;4BACQO,4BAA4BE;MACpDE,QAAQE,mBAAmBJ;;;;;;;;;;;4CAWWD,4CAA4CA;kBACpEP;oBACED;4BACQO,4BAA4BE;MACpDE,QAAQE,mBAAmBJ"}