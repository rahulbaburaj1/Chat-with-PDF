{"version":3,"file":"voy.js","names":["client: VoyClient","embeddings: EmbeddingsInterface","documents: Document[]","vectors: number[][]","query: number[]","k: number","results: SearchResult","params: { deleteAll?: boolean }","texts: string[]","metadatas: object[] | object","docs: Document[]"],"sources":["../../src/vectorstores/voy.ts"],"sourcesContent":["import type { Voy as VoyOriginClient, SearchResult } from \"voy-search\";\nimport type { EmbeddingsInterface } from \"@langchain/core/embeddings\";\nimport { VectorStore } from \"@langchain/core/vectorstores\";\nimport { Document } from \"@langchain/core/documents\";\n\nexport type VoyClient = Omit<\n  VoyOriginClient,\n  \"remove\" | \"size\" | \"serialize\" | \"free\"\n>;\n\n/**\n * Internal interface for storing documents mappings.\n */\ninterface InternalDoc {\n  embeddings: number[];\n  document: Document;\n}\n\n/**\n * Class that extends `VectorStore`. It allows to perform similarity search using\n * Voi similarity search engine. The class requires passing Voy Client as an input parameter.\n */\nexport class VoyVectorStore extends VectorStore {\n  client: VoyClient;\n\n  numDimensions: number | null = null;\n\n  docstore: InternalDoc[] = [];\n\n  _vectorstoreType(): string {\n    return \"voi\";\n  }\n\n  constructor(client: VoyClient, embeddings: EmbeddingsInterface) {\n    super(embeddings, {});\n    this.client = client;\n    this.embeddings = embeddings;\n  }\n\n  /**\n   * Adds documents to the Voy database. The documents are embedded using embeddings provided while instantiating the class.\n   * @param documents An array of `Document` instances associated with the vectors.\n   */\n  async addDocuments(documents: Document[]): Promise<void> {\n    const texts = documents.map(({ pageContent }) => pageContent);\n    if (documents.length === 0) {\n      return;\n    }\n\n    const firstVector = (\n      await this.embeddings.embedDocuments(texts.slice(0, 1))\n    )[0];\n    if (this.numDimensions === null) {\n      this.numDimensions = firstVector.length;\n    } else if (this.numDimensions !== firstVector.length) {\n      throw new Error(\n        `Vectors must have the same length as the number of dimensions (${this.numDimensions})`\n      );\n    }\n    const restResults = await this.embeddings.embedDocuments(texts.slice(1));\n    await this.addVectors([firstVector, ...restResults], documents);\n  }\n\n  /**\n   * Adds vectors to the Voy database. The vectors are associated with\n   * the provided documents.\n   * @param vectors An array of vectors to be added to the database.\n   * @param documents An array of `Document` instances associated with the vectors.\n   */\n  async addVectors(vectors: number[][], documents: Document[]): Promise<void> {\n    if (vectors.length === 0) {\n      return;\n    }\n    if (this.numDimensions === null) {\n      this.numDimensions = vectors[0].length;\n    }\n\n    if (vectors.length !== documents.length) {\n      throw new Error(`Vectors and metadata must have the same length`);\n    }\n    if (!vectors.every((v) => v.length === this.numDimensions)) {\n      throw new Error(\n        `Vectors must have the same length as the number of dimensions (${this.numDimensions})`\n      );\n    }\n\n    vectors.forEach((item, idx) => {\n      const doc = documents[idx];\n      this.docstore.push({ embeddings: item, document: doc });\n    });\n    const embeddings = this.docstore.map((item, idx) => ({\n      id: String(idx),\n      embeddings: item.embeddings,\n      title: \"\",\n      url: \"\",\n    }));\n    this.client.index({ embeddings });\n  }\n\n  /**\n   * Searches for vectors in the Voy database that are similar to the\n   * provided query vector.\n   * @param query The query vector.\n   * @param k The number of similar vectors to return.\n   * @returns A promise that resolves with an array of tuples, each containing a `Document` instance and a similarity score.\n   */\n  async similaritySearchVectorWithScore(query: number[], k: number) {\n    if (this.numDimensions === null) {\n      throw new Error(\"There aren't any elements in the index yet.\");\n    }\n    if (query.length !== this.numDimensions) {\n      throw new Error(\n        `Query vector must have the same length as the number of dimensions (${this.numDimensions})`\n      );\n    }\n    const itemsToQuery = Math.min(this.docstore.length, k);\n    if (itemsToQuery > this.docstore.length) {\n      console.warn(\n        `k (${k}) is greater than the number of elements in the index (${this.docstore.length}), setting k to ${itemsToQuery}`\n      );\n    }\n    const results: SearchResult = this.client.search(\n      new Float32Array(query),\n      itemsToQuery\n    );\n    return results.neighbors.map(\n      ({ id }, idx) =>\n        [this.docstore[parseInt(id, 10)].document, idx] as [Document, number]\n    );\n  }\n\n  /**\n   * Method to delete data from the Voy index. It can delete data based\n   * on specific IDs or a filter.\n   * @param params Object that includes either an array of IDs or a filter for the data to be deleted.\n   * @returns Promise that resolves when the deletion is complete.\n   */\n  async delete(params: { deleteAll?: boolean }): Promise<void> {\n    if (params.deleteAll === true) {\n      await this.client.clear();\n    } else {\n      throw new Error(`You must provide a \"deleteAll\" parameter.`);\n    }\n  }\n\n  /**\n   * Creates a new `VoyVectorStore` instance from an array of text strings. The text\n   * strings are converted to `Document` instances and added to the Voy\n   * database.\n   * @param texts An array of text strings.\n   * @param metadatas An array of metadata objects or a single metadata object. If an array is provided, it must have the same length as the `texts` array.\n   * @param embeddings An `Embeddings` instance used to generate embeddings for the documents.\n   * @param client An instance of Voy client to use in the underlying operations.\n   * @returns A promise that resolves with a new `VoyVectorStore` instance.\n   */\n  static async fromTexts(\n    texts: string[],\n    metadatas: object[] | object,\n    embeddings: EmbeddingsInterface,\n    client: VoyClient\n  ): Promise<VoyVectorStore> {\n    const docs: Document[] = [];\n    for (let i = 0; i < texts.length; i += 1) {\n      const metadata = Array.isArray(metadatas) ? metadatas[i] : metadatas;\n      const newDoc = new Document({\n        pageContent: texts[i],\n        metadata,\n      });\n      docs.push(newDoc);\n    }\n    return VoyVectorStore.fromDocuments(docs, embeddings, client);\n  }\n\n  /**\n   * Creates a new `VoyVectorStore` instance from an array of `Document` instances.\n   * The documents are added to the Voy database.\n   * @param docs An array of `Document` instances.\n   * @param embeddings An `Embeddings` instance used to generate embeddings for the documents.\n   * @param client An instance of Voy client to use in the underlying operations.\n   * @returns A promise that resolves with a new `VoyVectorStore` instance.\n   */\n  static async fromDocuments(\n    docs: Document[],\n    embeddings: EmbeddingsInterface,\n    client: VoyClient\n  ): Promise<VoyVectorStore> {\n    const instance = new VoyVectorStore(client, embeddings);\n    await instance.addDocuments(docs);\n    return instance;\n  }\n}\n"],"mappings":"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"}