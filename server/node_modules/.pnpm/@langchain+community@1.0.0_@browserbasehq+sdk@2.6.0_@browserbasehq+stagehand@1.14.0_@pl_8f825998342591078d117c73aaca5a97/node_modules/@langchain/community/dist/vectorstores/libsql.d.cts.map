{"version":3,"file":"libsql.d.cts","names":["Document","EmbeddingsInterface","VectorStore","Client","InStatement","WhereCondition","MetadataDefault","Record","LibSQLVectorStoreArgs","LibSQLVectorStore","Metadata","Promise"],"sources":["../../src/vectorstores/libsql.d.ts"],"sourcesContent":["import { Document } from \"@langchain/core/documents\";\nimport type { EmbeddingsInterface } from \"@langchain/core/embeddings\";\nimport { VectorStore } from \"@langchain/core/vectorstores\";\nimport type { Client, InStatement } from \"@libsql/client\";\nimport { WhereCondition } from \"../utils/sqlite_where_builder.js\";\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype MetadataDefault = Record<string, any>;\n/**\n * Interface for LibSQLVectorStore configuration options.\n */\nexport interface LibSQLVectorStoreArgs {\n    db: Client;\n    /** Name of the table to store vectors. Defaults to \"vectors\". */\n    table?: string;\n    /** Name of the column to store embeddings. Defaults to \"embedding\". */\n    column?: string;\n}\n/**\n * A vector store using LibSQL/Turso for storage and retrieval.\n */\nexport declare class LibSQLVectorStore<Metadata extends MetadataDefault = MetadataDefault> extends VectorStore {\n    FilterType: string | InStatement | WhereCondition<Metadata>;\n    private db;\n    private readonly table;\n    private readonly column;\n    /**\n     * Returns the type of vector store.\n     * @returns {string} The string \"libsql\".\n     */\n    _vectorstoreType(): string;\n    /**\n     * Initializes a new instance of the LibSQLVectorStore.\n     * @param {EmbeddingsInterface} embeddings - The embeddings interface to use.\n     * @param {Client} db - The LibSQL client instance.\n     * @param {LibSQLVectorStoreArgs} options - Configuration options for the vector store.\n     */\n    constructor(embeddings: EmbeddingsInterface, options: LibSQLVectorStoreArgs);\n    /**\n     * Adds documents to the vector store.\n     * @param {Document<Metadata>[]} documents - The documents to add.\n     * @returns {Promise<string[]>} The IDs of the added documents.\n     */\n    addDocuments(documents: Document<Metadata>[]): Promise<string[]>;\n    /**\n     * Adds vectors to the vector store.\n     * @param {number[][]} vectors - The vectors to add.\n     * @param {Document<Metadata>[]} documents - The documents associated with the vectors.\n     * @returns {Promise<string[]>} The IDs of the added vectors.\n     */\n    addVectors(vectors: number[][], documents: Document<Metadata>[]): Promise<string[]>;\n    /**\n     * Performs a similarity search using a vector query and returns documents with their scores.\n     * @param {number[]} query - The query vector.\n     * @param {number} k - The number of results to return.\n     * @returns {Promise<[Document<Metadata>, number][]>} An array of tuples containing the similar documents and their scores.\n     */\n    similaritySearchVectorWithScore(query: number[], k: number, filter?: this[\"FilterType\"]): Promise<[Document<Metadata>, number][]>;\n    /**\n     * Deletes vectors from the store.\n     * @param {Object} params - Delete parameters.\n     * @param {string[] | number[]} [params.ids] - The ids of the vectors to delete.\n     * @returns {Promise<void>}\n     */\n    delete(params: {\n        ids?: string[] | number[];\n        deleteAll?: boolean;\n    }): Promise<void>;\n    /**\n     * Creates a new LibSQLVectorStore instance from texts.\n     * @param {string[]} texts - The texts to add to the store.\n     * @param {object[] | object} metadatas - The metadata for the texts.\n     * @param {EmbeddingsInterface} embeddings - The embeddings interface to use.\n     * @param {Client} dbClient - The LibSQL client instance.\n     * @param {LibSQLVectorStoreArgs} [options] - Configuration options for the vector store.\n     * @returns {Promise<LibSQLVectorStore>} A new LibSQLVectorStore instance.\n     */\n    static fromTexts<Metadata extends MetadataDefault = MetadataDefault>(texts: string[], metadatas: Metadata[] | Metadata, embeddings: EmbeddingsInterface, options: LibSQLVectorStoreArgs): Promise<LibSQLVectorStore<Metadata>>;\n    /**\n     * Creates a new LibSQLVectorStore instance from documents.\n     * @param {Document[]} docs - The documents to add to the store.\n     * @param {EmbeddingsInterface} embeddings - The embeddings interface to use.\n     * @param {Client} dbClient - The LibSQL client instance.\n     * @param {LibSQLVectorStoreArgs} [options] - Configuration options for the vector store.\n     * @returns {Promise<LibSQLVectorStore>} A new LibSQLVectorStore instance.\n     */\n    static fromDocuments<Metadata extends MetadataDefault = MetadataDefault>(docs: Document<Metadata>[], embeddings: EmbeddingsInterface, options: LibSQLVectorStoreArgs): Promise<LibSQLVectorStore<Metadata>>;\n}\nexport {};\n"],"mappings":";;;;;;;;;;;KAMKM,eAAAA,GAAkBC;;;;UAINC,qBAAAA;MACTL;;EALHG,KAAAA,CAAAA,EAAAA,MAAAA;EAIYE;EAUIC,MAAAA,CAAAA,EAAAA,MAAAA;;;;;AACiCC,cADjCD,iBACiCC,CAAAA,iBADEJ,eACFI,GADoBJ,eACpBI,CAAAA,SAD6CR,WAAAA,CAC7CQ;EAAQ,UAAvBL,EAAAA,MAAAA,GAAdD,WAAcC,GAAAA,cAAAA,CAAeK,QAAfL,CAAAA;EAAc,QAezBJ,EAAAA;EAAmB,iBAAWO,KAAAA;EAAqB,iBAM1CE,MAAAA;EAAQ;;;;EAOU,gBAAeC,CAAAA,CAAAA,EAAAA,MAAAA;EAAO;;;;;;EA2BN,WAA8BD,CAAAA,UAAAA,EAxCzET,mBAwCyES,EAAAA,OAAAA,EAxC3CF,qBAwC2CE;EAAQ;;;;;EAA0G,YAAzBC,CAAAA,SAAAA,EAlClKX,QAkCkKW,CAlCzJD,QAkCyJC,CAAAA,EAAAA,CAAAA,EAlC3IA,OAkC2IA,CAAAA,MAAAA,EAAAA,CAAAA;EAAO;;;;;;EAS7B,UAA6BD,CAAAA,OAAAA,EAAAA,MAAAA,EAAAA,EAAAA,EAAAA,SAAAA,EApCtJV,QAoCsJU,CApC7IA,QAoC6IA,CAAAA,EAAAA,CAAAA,EApC/HC,OAoC+HD,CAAAA,MAAAA,EAAAA,CAAAA;EAAQ;;;AAjE/F;;;4FAoChBC,SAASX,SAASU;;;;;;;;;;MAUxGC;;;;;;;;;;oCAU8BL,kBAAkBA,6CAA6CI,aAAaA,sBAAsBT,8BAA8BO,wBAAwBG,QAAQF,kBAAkBC;;;;;;;;;wCAS9KJ,kBAAkBA,uBAAuBN,SAASU,yBAAyBT,8BAA8BO,wBAAwBG,QAAQF,kBAAkBC"}