{"version":3,"file":"convex.d.ts","names":["DocumentByInfo","FieldPaths","FilterExpression","FunctionReference","GenericActionCtx","GenericDataModel","GenericTableInfo","NamedTableInfo","NamedVectorIndex","TableNamesInDataModel","VectorFilterBuilder","VectorIndexNames","EmbeddingsInterface","VectorStore","Document","ConvexVectorStoreConfig","DataModel","TableName","IndexName","TextFieldName","EmbeddingFieldName","MetadataFieldName","InsertMutation","GetQuery","ConvexVectorStore","Promise"],"sources":["../../src/vectorstores/convex.d.ts"],"sourcesContent":["import { DocumentByInfo, FieldPaths, FilterExpression, FunctionReference, GenericActionCtx, GenericDataModel, GenericTableInfo, NamedTableInfo, NamedVectorIndex, TableNamesInDataModel, VectorFilterBuilder, VectorIndexNames } from \"convex/server\";\nimport type { EmbeddingsInterface } from \"@langchain/core/embeddings\";\nimport { VectorStore } from \"@langchain/core/vectorstores\";\nimport { Document } from \"@langchain/core/documents\";\n/**\n * Type that defines the config required to initialize the\n * ConvexVectorStore class. It includes the table name,\n * index name, text field name, and embedding field name.\n */\nexport type ConvexVectorStoreConfig<DataModel extends GenericDataModel, TableName extends TableNamesInDataModel<DataModel>, IndexName extends VectorIndexNames<NamedTableInfo<DataModel, TableName>>, TextFieldName extends FieldPaths<NamedTableInfo<DataModel, TableName>>, EmbeddingFieldName extends FieldPaths<NamedTableInfo<DataModel, TableName>>, MetadataFieldName extends FieldPaths<NamedTableInfo<DataModel, TableName>>, InsertMutation extends FunctionReference<\"mutation\", \"internal\", {\n    table: string;\n    document: object;\n}>, GetQuery extends FunctionReference<\"query\", \"internal\", {\n    id: string;\n}, object | null>> = {\n    readonly ctx: GenericActionCtx<DataModel>;\n    /**\n     * Defaults to \"documents\"\n     */\n    readonly table?: TableName;\n    /**\n     * Defaults to \"byEmbedding\"\n     */\n    readonly index?: IndexName;\n    /**\n     * Defaults to \"text\"\n     */\n    readonly textField?: TextFieldName;\n    /**\n     * Defaults to \"embedding\"\n     */\n    readonly embeddingField?: EmbeddingFieldName;\n    /**\n     * Defaults to \"metadata\"\n     */\n    readonly metadataField?: MetadataFieldName;\n    /**\n     * Defaults to `internal.langchain.db.insert`\n     */\n    readonly insert?: InsertMutation;\n    /**\n     * Defaults to `internal.langchain.db.get`\n     */\n    readonly get?: GetQuery;\n};\n/**\n * Class that is a wrapper around Convex storage and vector search. It is used\n * to insert embeddings in Convex documents with a vector search index,\n * and perform a vector search on them.\n *\n * ConvexVectorStore does NOT implement maxMarginalRelevanceSearch.\n */\nexport declare class ConvexVectorStore<DataModel extends GenericDataModel, TableName extends TableNamesInDataModel<DataModel>, IndexName extends VectorIndexNames<NamedTableInfo<DataModel, TableName>>, TextFieldName extends FieldPaths<NamedTableInfo<DataModel, TableName>>, EmbeddingFieldName extends FieldPaths<NamedTableInfo<DataModel, TableName>>, MetadataFieldName extends FieldPaths<NamedTableInfo<DataModel, TableName>>, InsertMutation extends FunctionReference<\"mutation\", \"internal\", {\n    table: string;\n    document: object;\n}>, GetQuery extends FunctionReference<\"query\", \"internal\", {\n    id: string;\n}, object | null>> extends VectorStore {\n    /**\n     * Type that defines the filter used in the\n     * similaritySearchVectorWithScore and maxMarginalRelevanceSearch methods.\n     * It includes limit, filter and a flag to include embeddings.\n     */\n    FilterType: {\n        filter?: (q: VectorFilterBuilder<DocumentByInfo<GenericTableInfo>, NamedVectorIndex<NamedTableInfo<DataModel, TableName>, IndexName>>) => FilterExpression<boolean>;\n        includeEmbeddings?: boolean;\n    };\n    private readonly ctx;\n    private readonly table;\n    private readonly index;\n    private readonly textField;\n    private readonly embeddingField;\n    private readonly metadataField;\n    private readonly insert;\n    private readonly get;\n    _vectorstoreType(): string;\n    constructor(embeddings: EmbeddingsInterface, config: ConvexVectorStoreConfig<DataModel, TableName, IndexName, TextFieldName, EmbeddingFieldName, MetadataFieldName, InsertMutation, GetQuery>);\n    /**\n     * Add vectors and their corresponding documents to the Convex table.\n     * @param vectors Vectors to be added.\n     * @param documents Corresponding documents to be added.\n     * @returns Promise that resolves when the vectors and documents have been added.\n     */\n    addVectors(vectors: number[][], documents: Document[]): Promise<void>;\n    /**\n     * Add documents to the Convex table. It first converts\n     * the documents to vectors using the embeddings and then calls the\n     * addVectors method.\n     * @param documents Documents to be added.\n     * @returns Promise that resolves when the documents have been added.\n     */\n    addDocuments(documents: Document[]): Promise<void>;\n    /**\n     * Similarity search on the vectors stored in the\n     * Convex table. It returns a list of documents and their\n     * corresponding similarity scores.\n     * @param query Query vector for the similarity search.\n     * @param k Number of nearest neighbors to return.\n     * @param filter Optional filter to be applied.\n     * @returns Promise that resolves to a list of documents and their corresponding similarity scores.\n     */\n    similaritySearchVectorWithScore(query: number[], k: number, filter?: this[\"FilterType\"]): Promise<[Document, number][]>;\n    /**\n     * Static method to create an instance of ConvexVectorStore from a\n     * list of texts. It first converts the texts to vectors and then adds\n     * them to the Convex table.\n     * @param texts List of texts to be converted to vectors.\n     * @param metadatas Metadata for the texts.\n     * @param embeddings Embeddings to be used for conversion.\n     * @param dbConfig Database configuration for Convex.\n     * @returns Promise that resolves to a new instance of ConvexVectorStore.\n     */\n    static fromTexts<DataModel extends GenericDataModel, TableName extends TableNamesInDataModel<DataModel>, IndexName extends VectorIndexNames<NamedTableInfo<DataModel, TableName>>, TextFieldName extends FieldPaths<NamedTableInfo<DataModel, TableName>>, EmbeddingFieldName extends FieldPaths<NamedTableInfo<DataModel, TableName>>, MetadataFieldName extends FieldPaths<NamedTableInfo<DataModel, TableName>>, InsertMutation extends FunctionReference<\"mutation\", \"internal\", {\n        table: string;\n        document: object;\n    }>, GetQuery extends FunctionReference<\"query\", \"internal\", {\n        id: string;\n    }, object | null>>(texts: string[], metadatas: object[] | object, embeddings: EmbeddingsInterface, dbConfig: ConvexVectorStoreConfig<DataModel, TableName, IndexName, TextFieldName, EmbeddingFieldName, MetadataFieldName, InsertMutation, GetQuery>): Promise<ConvexVectorStore<DataModel, TableName, IndexName, TextFieldName, EmbeddingFieldName, MetadataFieldName, InsertMutation, GetQuery>>;\n    /**\n     * Static method to create an instance of ConvexVectorStore from a\n     * list of documents. It first converts the documents to vectors and then\n     * adds them to the Convex table.\n     * @param docs List of documents to be converted to vectors.\n     * @param embeddings Embeddings to be used for conversion.\n     * @param dbConfig Database configuration for Convex.\n     * @returns Promise that resolves to a new instance of ConvexVectorStore.\n     */\n    static fromDocuments<DataModel extends GenericDataModel, TableName extends TableNamesInDataModel<DataModel>, IndexName extends VectorIndexNames<NamedTableInfo<DataModel, TableName>>, TextFieldName extends FieldPaths<NamedTableInfo<DataModel, TableName>>, EmbeddingFieldName extends FieldPaths<NamedTableInfo<DataModel, TableName>>, MetadataFieldName extends FieldPaths<NamedTableInfo<DataModel, TableName>>, InsertMutation extends FunctionReference<\"mutation\", \"internal\", {\n        table: string;\n        document: object;\n    }>, GetQuery extends FunctionReference<\"query\", \"internal\", {\n        id: string;\n    }, object | null>>(docs: Document[], embeddings: EmbeddingsInterface, dbConfig: ConvexVectorStoreConfig<DataModel, TableName, IndexName, TextFieldName, EmbeddingFieldName, MetadataFieldName, InsertMutation, GetQuery>): Promise<ConvexVectorStore<DataModel, TableName, IndexName, TextFieldName, EmbeddingFieldName, MetadataFieldName, InsertMutation, GetQuery>>;\n}\n"],"mappings":"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"}