{"version":3,"file":"google_scholar.d.ts","names":["Tool","GoogleScholarAPIParams","SERPGoogleScholarAPITool","Promise"],"sources":["../../src/tools/google_scholar.d.ts"],"sourcesContent":["import { Tool } from \"@langchain/core/tools\";\n/**\n * Interface for parameters required by the SERPGoogleScholarAPITool class.\n */\nexport interface GoogleScholarAPIParams {\n    /**\n     * Optional API key for accessing the SerpApi service.\n     */\n    apiKey?: string;\n}\n/**\n * Tool for querying Google Scholar using the SerpApi service.\n */\nexport declare class SERPGoogleScholarAPITool extends Tool {\n    /**\n     * Specifies the name of the tool, used internally by LangChain.\n     */\n    static lc_name(): string;\n    /**\n     * Returns a mapping of secret environment variable names to their usage in the tool.\n     * @returns {object} Mapping of secret names to their environment variable counterparts.\n     */\n    get lc_secrets(): {\n        [key: string]: string;\n    } | undefined;\n    // Name of the tool, used for logging or identification within LangChain.\n    name: string;\n    // The API key used for making requests to SerpApi.\n    protected apiKey: string;\n    /**\n     * Description of the tool for usage documentation.\n     */\n    description: string;\n    /**\n     * Constructs a new instance of SERPGoogleScholarAPITool.\n     * @param fields - Optional parameters including an API key.\n     */\n    constructor(fields?: GoogleScholarAPIParams);\n    /**\n     * Makes a request to SerpApi for Google Scholar results.\n     * @param input - Search query string.\n     * @returns A JSON string containing the search results.\n     * @throws Error if the API request fails or returns an error.\n     */\n    _call(input: string): Promise<string>;\n}\n"],"mappings":";;;;;;;;;UAIiBC,sBAAAA;;;;;AAAjB;AASA;;;AA+B0BE,cA/BLD,wBAAAA,SAAiCF,IAAAA,CA+B5BG;EAAO;AA/ByB;;;;;;;;;;;;;;;;;;;;;;uBAwBjCF;;;;;;;wBAOCE"}