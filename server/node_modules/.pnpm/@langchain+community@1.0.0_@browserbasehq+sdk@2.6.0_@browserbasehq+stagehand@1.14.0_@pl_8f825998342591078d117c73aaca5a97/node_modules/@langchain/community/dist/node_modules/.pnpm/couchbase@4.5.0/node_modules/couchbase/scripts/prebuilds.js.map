{"version":3,"file":"prebuilds.js","names":["runtime","platform","arch"],"sources":["../../../../../../../../../node_modules/.pnpm/couchbase@4.5.0/node_modules/couchbase/scripts/prebuilds.js"],"sourcesContent":["const fs = require('fs')\nconst path = require('path')\nvar proc = require('child_process')\n\n// Workaround to fix webpack's build warnings: 'the request of a dependency is an expression'\nconst runtimeRequire =\n  typeof __webpack_require__ === 'function' ? __non_webpack_require__ : require\n\nconst supportedPlatforms = ['darwin', 'linux', 'linuxmusl', 'win32']\nconst supportedArches = ['x64', 'arm64']\nconst allowedRuntimes = ['napi', 'electron']\n\nconst runtime = isElectron() ? 'electron' : 'node'\nconst nodeVersion = getNodeVersion()\nconst nodeVersionMajor = getNodeMajorVersion(nodeVersion)\nconst arch = process.arch\nconst platform = process.platform\nconst libc = getLinuxType(platform)\nconst sslType = getSSLType(runtime, nodeVersion)\n\nCN_ROOT = path.resolve(path.dirname(__filename), '..')\n// CN_CXXCBC_CACHE_DIR should only need to be used on Windows when setting the CPM cache (CN_SET_CPM_CACHE=ON).\n// It helps prevent issues w/ path lengths.\n// NOTE: Setting the CPM cache on a Windows machine should be a _rare_ occasion.  When doing so and setting\n// CN_CXXCBC_CACHE_DIR, be sure to copy the cache to <root source dir>\\deps\\couchbase-cxx-cache if building a sdist.\nCXXCBC_CACHE_DIR =\n  process.env.CN_CXXCBC_CACHE_DIR ||\n  path.join(CN_ROOT, 'deps', 'couchbase-cxx-cache')\nENV_TRUE = ['true', '1', 'y', 'yes', 'on']\n\nfunction buildBinary(\n  runtime,\n  runtimeVersion,\n  useOpenSSL,\n  useCmakeJsCompile,\n  cmakeParallel\n) {\n  runtime = runtime || process.env.CN_PREBUILD_RUNTIME || 'node'\n  runtimeVersion =\n    runtimeVersion ||\n    process.env.CN_PREBUILD_RUNTIME_VERSION ||\n    process.version.replace('v', '')\n\n  if (typeof useOpenSSL === 'undefined') {\n    useOpenSSL = ENV_TRUE.includes(\n      (process.env.CN_USE_OPENSSL || 'true').toLowerCase()\n    )\n  }\n\n  // When executing via npm, it will prepend various paths to PATH in order to find executables.\n  // This is problematic for a source install on Windows b/c the rc executable from the prebuild package\n  // conflicts w/ the Windows Resource Compiler that is used for the BoringSSL build.  Setting\n  // CN_REARRANGE_PATH=true simply appends all the npm paths to PATH instead of the default prepend.\n  const rearrangePath = process.env.CN_REARRANGE_PATH || false\n  if (\n    rearrangePath &&\n    !['null', 'false', 'undefined', '0', 'n', 'no', 'off'].includes(\n      rearrangePath.toLowerCase()\n    )\n  ) {\n    const currentPaths = process.env.PATH.split(path.delimiter)\n    let newPaths = []\n    const nodeModulesPaths = []\n    currentPaths.forEach((p) => {\n      if (p.includes('node_modules')) {\n        nodeModulesPaths.push(p)\n      } else {\n        newPaths.push(p)\n      }\n    })\n    newPaths.push(...nodeModulesPaths)\n    process.env.PATH = newPaths.join(path.delimiter)\n  }\n\n  const cmakejs = path.join(\n    require.resolve('cmake-js/package.json'),\n    '..',\n    require('cmake-js/package.json').bin['cmake-js']\n  )\n\n  const cmakejsBuildCmd = [\n    cmakejs,\n    useCmakeJsCompile ? 'compile' : 'build',\n    '--runtime',\n    runtime,\n    '--runtime-version',\n    runtimeVersion,\n    '--parallel',\n    cmakeParallel,\n  ]\n\n  const buildConfig = process.env.CN_BUILD_CONFIG\n  if (\n    buildConfig &&\n    ['Debug', 'Release', 'RelWithDebInfo'].includes(buildConfig)\n  ) {\n    cmakejsBuildCmd.push(...['--config', `${buildConfig}`])\n  }\n\n  const cmakeGeneratorPlatform = process.env.CN_CMAKE_GENERATOR_PLATFORM\n  if (cmakeGeneratorPlatform) {\n    cmakejsBuildCmd.push(`--generator=${cmakeGeneratorPlatform}`)\n  }\n\n  if (!useOpenSSL) {\n    cmakejsBuildCmd.push('--CDUSE_STATIC_OPENSSL=OFF')\n  }\n\n  if (\n    ENV_TRUE.includes((process.env.CN_USE_CPM_CACHE || 'true').toLowerCase())\n  ) {\n    if (!fs.existsSync(CXXCBC_CACHE_DIR)) {\n      throw new Error(\n        `Cannot use cached dependencies, path=${CXXCBC_CACHE_DIR} does not exist.`\n      )\n    }\n    cmakejsBuildCmd.push(\n      ...[\n        '--CDCPM_DOWNLOAD_ALL=OFF',\n        '--CDCPM_USE_NAMED_CACHE_DIRECTORIES=ON',\n        '--CDCPM_USE_LOCAL_PACKAGES=OFF',\n        `--CDCPM_SOURCE_CACHE=${CXXCBC_CACHE_DIR}`,\n        `--CDCOUCHBASE_CXX_CLIENT_EMBED_MOZILLA_CA_BUNDLE_ROOT=${CXXCBC_CACHE_DIR}`,\n      ]\n    )\n  }\n\n  if (\n    ENV_TRUE.includes(\n      (process.env.CN_VERBOSE_MAKEFILE || 'false').toLowerCase()\n    )\n  ) {\n    cmakejsBuildCmd.push('--CDCMAKE_VERBOSE_MAKEFILE=ON')\n  }\n\n  const cmakeSystemVersion = process.env.CN_CMAKE_SYSTEM_VERSION\n  if (cmakeSystemVersion) {\n    cmakejsBuildCmd.push(`--CDCMAKE_SYSTEM_VERSION=${cmakeSystemVersion}`)\n  }\n\n  const cacheOption = process.env.CN_CACHE_OPTION\n  if (cacheOption) {\n    cmakejsBuildCmd.push(`--CDCACHE_OPTION=${cacheOption}`)\n  }\n\n  const cmakejsProc = proc.spawnSync(process.execPath, cmakejsBuildCmd, {\n    stdio: 'inherit',\n  })\n  process.exit(cmakejsProc.status)\n}\n\nfunction configureBinary(\n  runtime,\n  runtimeVersion,\n  useOpenSSL,\n  setCpmCache,\n  cmakeParallel\n) {\n  runtime = runtime || process.env.CN_PREBUILD_RUNTIME || 'node'\n  runtimeVersion =\n    runtimeVersion ||\n    process.env.CN_PREBUILD_RUNTIME_VERSION ||\n    process.version.replace('v', '')\n\n  if (typeof useOpenSSL === 'undefined') {\n    useOpenSSL = ENV_TRUE.includes(\n      (process.env.CN_USE_OPENSSL || 'true').toLowerCase()\n    )\n  }\n\n  if (typeof setCpmCache === 'undefined') {\n    setCpmCache = ENV_TRUE.includes(\n      (process.env.CN_SET_CPM_CACHE || 'false').toLowerCase()\n    )\n  }\n\n  const cmakejs = path.join(\n    require.resolve('cmake-js/package.json'),\n    '..',\n    require('cmake-js/package.json').bin['cmake-js']\n  )\n\n  const cmakejsBuildCmd = [\n    cmakejs,\n    'configure',\n    '--runtime',\n    runtime,\n    '--runtime-version',\n    runtimeVersion,\n    '--parallel',\n    cmakeParallel,\n  ]\n\n  if (setCpmCache) {\n    if (fs.existsSync(CXXCBC_CACHE_DIR)) {\n      fs.rmSync(`${CXXCBC_CACHE_DIR}`, { recursive: true })\n    }\n    cmakejsBuildCmd.push(\n      ...[\n        `--CDCOUCHBASE_CXX_CPM_CACHE_DIR=${CXXCBC_CACHE_DIR}`,\n        '--CDCPM_DOWNLOAD_ALL=ON',\n        '--CDCPM_USE_NAMED_CACHE_DIRECTORIES=ON',\n        '--CDCPM_USE_LOCAL_PACKAGES=OFF',\n      ]\n    )\n  }\n\n  if (!useOpenSSL) {\n    cmakejsBuildCmd.push('--CDUSE_STATIC_OPENSSL=OFF')\n  }\n\n  const cmakejsProc = proc.spawnSync(process.execPath, cmakejsBuildCmd, {\n    stdio: 'inherit',\n  })\n\n  if (!cmakejsProc.status) {\n    if (!useOpenSSL) {\n      // BoringSSL path: 'couchbase-cxx-cache/boringssl/<SHA>/boringssl/crypto_test_data.cc'\n      // This edit reduces the size of the tarball by 60%\n      let boringDir = path.join(CXXCBC_CACHE_DIR, 'boringssl')\n      if (fs.existsSync(boringDir)) {\n        let files = fs.readdirSync(boringDir)\n        if (\n          files.length == 1 &&\n          fs.statSync(path.join(boringDir, files[0])).isDirectory()\n        ) {\n          boringDir = path.join(boringDir, files[0], 'boringssl')\n          files = fs.readdirSync(boringDir)\n          const cryptoTestFile = files.find((f) => f == 'crypto_test_data.cc')\n          if (cryptoTestFile) {\n            fs.rmSync(path.join(boringDir, cryptoTestFile))\n          }\n        }\n      }\n    }\n\n    // This edit allows us to not have a git dependency when building from source distribution.\n    const cpmDir = path.join(CXXCBC_CACHE_DIR, 'cpm')\n    if (fs.existsSync(cpmDir)) {\n      let cpmFiles = fs.readdirSync(cpmDir)\n      if (cpmFiles.length == 1 && cpmFiles[0].endsWith('.cmake')) {\n        let cpmContent = fs.readFileSync(\n          path.join(cpmDir, cpmFiles[0]),\n          'utf-8'\n        )\n        cpmContent = cpmContent.replace(/Git REQUIRED/g, 'Git')\n        fs.writeFileSync(path.join(cpmDir, cpmFiles[0]), cpmContent, 'utf-8')\n      }\n    }\n  }\n  process.exit(cmakejsProc.status)\n}\n\nfunction getLocalPrebuild(dir) {\n  let COUCHBASE_LOCAL_PREBUILDS = [\n    'build',\n    path.join('build', 'Release'),\n    path.join('build', 'RelWithDebInfo'),\n    path.join('build', 'Debug'),\n  ]\n  let localPrebuild = undefined\n  for (let i = 0; i < COUCHBASE_LOCAL_PREBUILDS.length; i++) {\n    try {\n      const localPrebuildDir = path.join(dir, COUCHBASE_LOCAL_PREBUILDS[i])\n      const files = readdirSync(localPrebuildDir).filter(matchBuild)\n      localPrebuild = files[0] && path.join(localPrebuildDir, files[0])\n      if (localPrebuild) break\n    } catch (_) {}\n  }\n  return localPrebuild\n}\n\nfunction getLinuxType(platform) {\n  if (platform !== 'linux') {\n    return ''\n  }\n  return `linux${isAlpine(platform) ? 'musl' : ''}`\n}\n\nfunction getNodeMajorVersion(version) {\n  const tokens = version.split('.')\n  return parseInt(tokens[0])\n}\n\nfunction getNodeVersion() {\n  return process.version.replace('v', '')\n}\n\nfunction getPrebuildsInfo(dir) {\n  dir = path.resolve(dir || '.')\n  const info = {\n    packageDir: path.join(dir, 'package.json'),\n    platformPackageDir: undefined,\n  }\n\n  const packageName = JSON.parse(fs.readFileSync(info.packageDir)).name\n  if (packageName !== undefined) {\n    const _runtime = runtime === 'node' ? 'napi' : runtime\n    const allowedPlatformPkg = `${packageName}-${\n      platform === 'linux' ? libc : platform\n    }-${arch}-${_runtime}`\n    const fullPlatformPkgName = `@${packageName}/${allowedPlatformPkg}`\n    const packageRequire = require('module').createRequire(\n      path.join(dir, 'package.json')\n    )\n    info.packageDir = path.dirname(path.join(dir, 'package.json'))\n    info.platformPackageDir = path.dirname(\n      packageRequire.resolve(fullPlatformPkgName)\n    )\n  }\n  return info\n}\n\nfunction getSSLType(runtime, version) {\n  if (runtime === 'electron') {\n    return 'boringssl'\n  }\n  if (getNodeMajorVersion(version) >= 18) {\n    return 'openssl3'\n  }\n  return 'openssl1'\n}\n\nfunction getSupportedPlatformPackages(packageName) {\n  packageName = packageName || 'couchbase'\n  if (packageName !== 'couchbase') {\n    throw new Error(\n      'Cannot build supported platform packages for package other than couchbase.'\n    )\n  }\n\n  const packageNames = []\n  // format: couchbase-<platform>-<arch>-<runtime>\n  supportedPlatforms.forEach((plat) => {\n    supportedArches.forEach((arch) => {\n      // we don't support Windows or linuxmusl ARM atm\n      // UPDATE 07/2024: JSCBC-1268 adds linuxmusl + ARM support\n      if (plat === 'win32' && arch === 'arm64') return\n      allowedRuntimes.forEach((rt) => {\n        packageNames.push(`${packageName}-${plat}-${arch}-${rt}`)\n      })\n    })\n  })\n  return packageNames\n}\n\nfunction isAlpine(platform) {\n  return platform === 'linux' && fs.existsSync('/etc/alpine-release')\n}\n\nfunction isElectron() {\n  if (process.versions && process.versions.electron) return true\n  if (process.env.ELECTRON_RUN_AS_NODE) return true\n  return (\n    typeof window !== 'undefined' &&\n    window.process &&\n    window.process.type === 'renderer'\n  )\n}\n\nfunction loadPrebuild(dir) {\n  return runtimeRequire(resolvePrebuild(dir))\n}\n\nfunction matchBuild(name) {\n  return /\\.node$/.test(name)\n}\n\nfunction matchingPlatformPrebuild(filename, useElectronRuntime = false) {\n  if (['index.js', 'package.json', 'README.md'].includes(filename)) {\n    return false\n  }\n\n  let _runtime = ''\n  if (useElectronRuntime) {\n    _runtime = 'electron'\n  } else if (runtime === 'node') {\n    _runtime = 'napi'\n  } else if (runtime === 'electron') {\n    // NOTE: electron support is experimental\n    _runtime = 'electron'\n  } else {\n    console.log(`Unsupported runtime: ${runtime}`)\n    return false\n  }\n  const tokens = filename.split('-')\n  // filename format:\n  //   couchbase-v<pkg-version>-<runtime>-v<runtime-version>-<platform>-<arch>-<ssl-type>.node\n  if (tokens.length < 7) return false\n  const prebuildSSL = tokens[tokens.length - 1].replace('.node', '')\n  if (_runtime === 'electron') {\n    if (prebuildSSL !== 'boringssl') return false\n  } else {\n    let allowedSSLTypes = ['boringssl']\n    if (nodeVersionMajor >= 18) {\n      allowedSSLTypes.push('openssl3')\n    } else {\n      allowedSSLTypes.push('openssl1')\n    }\n    if (!allowedSSLTypes.includes(prebuildSSL)) return false\n  }\n  if (tokens[tokens.length - 2] !== arch) return false\n  const platCompare = platform === 'linux' ? libc : platform\n  if (tokens[tokens.length - 3] !== platCompare) return false\n  if (!matchBuild(filename)) return false\n  // yay -- found a match!\n  return true\n}\n\nfunction readdirSync(dir) {\n  try {\n    return fs.readdirSync(dir)\n  } catch (err) {\n    return []\n  }\n}\n\nasync function resolveLocalPrebuild(src, dest) {\n  if (fs.existsSync(src)) {\n    const prebuilds = readdirSync(src).filter(matchBuild)\n    if (prebuilds && prebuilds.length >= 1) {\n      if (!fs.existsSync(dest)) {\n        fs.mkdirSync(dest, { recursive: true })\n      }\n      try {\n        fs.copyFileSync(\n          path.join(src, prebuilds[0]),\n          path.join(dest, prebuilds[0])\n        )\n      } catch (_) {}\n    }\n  }\n}\n\nfunction resolvePrebuild(\n  dir,\n  { runtimeResolve = true, useElectronRuntime = false } = {}\n) {\n  dir = path.resolve(dir || '.')\n  let _runtime = ''\n  if (useElectronRuntime) {\n    _runtime = 'electron'\n  } else if (runtime === 'node') {\n    _runtime = 'napi'\n  } else if (runtime === 'electron') {\n    // NOTE: electron support is experimental\n    _runtime = 'electron'\n  } else {\n    throw new Error(`Unsupported runtime: ${runtime}`)\n  }\n  try {\n    const localPrebuild = getLocalPrebuild(dir)\n    if (localPrebuild) {\n      return localPrebuild\n    }\n\n    const packageName = runtimeResolve\n      ? runtimeRequire(path.join(dir, 'package.json')).name\n      : JSON.parse(fs.readFileSync(path.join(dir, 'package.json'))).name\n\n    if (packageName !== undefined) {\n      const supportedPackages = getSupportedPlatformPackages(packageName)\n      const platformPkg = `${packageName}-${\n        platform === 'linux' ? libc : platform\n      }-${arch}-${_runtime}`\n      if (supportedPackages.includes(platformPkg)) {\n        const fullPlatformPkgName = `@${packageName}/${platformPkg}`\n        const packageRequire = require('module').createRequire(\n          path.join(dir, 'package.json')\n        )\n        const platformPackagesDir = path.dirname(\n          packageRequire.resolve(fullPlatformPkgName)\n        )\n        if (platformPackagesDir !== undefined) {\n          const platformPrebuild = readdirSync(platformPackagesDir).filter(\n            (file) => {\n              return matchingPlatformPrebuild(file, useElectronRuntime)\n            }\n          )\n          if (platformPrebuild && platformPrebuild.length == 1) {\n            return path.join(platformPackagesDir, platformPrebuild[0])\n          }\n        }\n      }\n    }\n  } catch (_) {}\n\n  let target = [\n    `platform=${platform}`,\n    `arch=${arch}`,\n    `runtime=${_runtime}`,\n    `nodeVersion=${nodeVersion}`,\n    `sslType=${sslType}`,\n  ]\n  if (libc) {\n    target.push(`libc=${libc}`)\n  }\n  if (typeof __webpack_require__ === 'function') {\n    target.push('webpack=true')\n  }\n  throw new Error(\n    `Could not find native build for ${target.join(', ')} loaded from ${dir}.`\n  )\n}\n\nmodule.exports = {\n  ENV_TRUE,\n  buildBinary,\n  configureBinary,\n  getPrebuildsInfo,\n  loadPrebuild,\n  resolveLocalPrebuild,\n  resolvePrebuild,\n}\n"],"x_google_ignoreList":[0],"mappings":"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"}