{"version":3,"file":"motorhead_memory.d.ts","names":["InputValues","OutputValues","MemoryVariables","AsyncCaller","AsyncCallerParams","BaseChatMemory","BaseChatMemoryInput","MotorheadMemoryMessage","MotorheadMemoryInput","MotorheadMemory","HeadersInit","Promise"],"sources":["../../src/memory/motorhead_memory.d.ts"],"sourcesContent":["import { InputValues, OutputValues, MemoryVariables } from \"@langchain/core/memory\";\nimport { AsyncCaller, AsyncCallerParams } from \"@langchain/core/utils/async_caller\";\nimport { BaseChatMemory, BaseChatMemoryInput } from \"./chat_memory.js\";\n/**\n * Interface for the structure of a memory message in the Motorhead\n * service. It includes the role and content of the message.\n */\nexport interface MotorheadMemoryMessage {\n    role: string;\n    content: string;\n}\n/**\n * @interface\n */\nexport type MotorheadMemoryInput = BaseChatMemoryInput & AsyncCallerParams & {\n    sessionId: string;\n    url?: string;\n    memoryKey?: string;\n    timeout?: number;\n    apiKey?: string;\n    clientId?: string;\n};\n/**\n * Class for managing chat message memory using the Motorhead service. It\n * extends BaseChatMemory and includes methods for initializing the\n * memory, loading memory variables, and saving the context.\n */\nexport declare class MotorheadMemory extends BaseChatMemory {\n    url: string;\n    timeout: number;\n    memoryKey: string;\n    sessionId: string;\n    context?: string;\n    caller: AsyncCaller;\n    // Managed Params\n    apiKey?: string;\n    clientId?: string;\n    constructor(fields: MotorheadMemoryInput);\n    get memoryKeys(): string[];\n    _getHeaders(): HeadersInit;\n    /**\n     * Method that initializes the memory by fetching the session memory from\n     * the Motorhead service. It adds the messages to the chat history and\n     * sets the context if it is not 'NONE'.\n     */\n    init(): Promise<void>;\n    /**\n     * Method that loads the memory variables. It gets the chat messages and\n     * returns them as a string or an array based on the returnMessages flag.\n     * @param _values The input values.\n     * @returns A promise that resolves with the memory variables.\n     */\n    loadMemoryVariables(_values: InputValues): Promise<MemoryVariables>;\n    /**\n     * Method that saves the context to the Motorhead service and the base\n     * chat memory. It sends a POST request to the Motorhead service with the\n     * input and output messages, and calls the saveContext method of the base\n     * chat memory.\n     * @param inputValues The input values.\n     * @param outputValues The output values.\n     * @returns A promise that resolves when the context is saved.\n     */\n    saveContext(inputValues: InputValues, outputValues: OutputValues): Promise<void>;\n}\n"],"mappings":";;;;;;;;;;;;UAOiBO,sBAAAA;;;;;AAAjB;AAOA;AAAgC,KAApBC,oBAAAA,GAAuBF,qBAAAA,CAAAA,mBAAH,GAAyBF,iBAAzB,GAAA;EAAA,SAAGE,EAAAA,MAAAA;EAAmB,GAAGF,CAAAA,EAAAA,MAAAA;EAAiB,SAAA,CAAA,EAAA,MAAA;EAarDK,OAAAA,CAAAA,EAAAA,MAAAA;EAAe,MAAA,CAAA,EAAA,MAAA;EAAA,QAMxBN,CAAAA,EAAAA,MAAAA;CAAW;;;;;;AA6BMH,cAnCRS,eAAAA,SAAwBJ,qBAAAA,CAAAA,cAAAA,CAmChBL;EAAW,GAAgBC,EAAAA,MAAAA;EAAY,OAAGU,EAAAA,MAAAA;EAAO,SAnCjCN,EAAAA,MAAAA;EAAc,SAAA,EAAA,MAAA;;UAM/CF;;;;sBAIYK;;iBAELE;;;;;;UAMPC;;;;;;;+BAOqBX,cAAcW,QAAQT;;;;;;;;;;2BAU1BF,2BAA2BC,eAAeU"}