{"version":3,"file":"analyticstypes.js","names":["AnalyticsStatus","AnalyticsScanConsistency"],"sources":["../../../../../../../../../node_modules/.pnpm/couchbase@4.5.0/node_modules/couchbase/dist/analyticstypes.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AnalyticsScanConsistency = exports.AnalyticsMetrics = exports.AnalyticsWarning = exports.AnalyticsMetaData = exports.AnalyticsResult = exports.AnalyticsStatus = void 0;\n/**\n * Represents the status of an analytics query.\n *\n * @category Analytics\n */\nvar AnalyticsStatus;\n(function (AnalyticsStatus) {\n    /**\n     * Indicates the query is still running.\n     */\n    AnalyticsStatus[\"Running\"] = \"running\";\n    /**\n     * Indicates that the query completed successfully.\n     */\n    AnalyticsStatus[\"Success\"] = \"success\";\n    /**\n     * Indicates that the query completed with errors.\n     */\n    AnalyticsStatus[\"Errors\"] = \"errors\";\n    /**\n     * Indicates that the query completed but the outcome was unknown.\n     */\n    AnalyticsStatus[\"Completed\"] = \"completed\";\n    /**\n     * Indicates that the query was stopped.\n     */\n    AnalyticsStatus[\"Stopped\"] = \"stopped\";\n    /**\n     * Indicates that the query timed out during execution.\n     */\n    AnalyticsStatus[\"Timeout\"] = \"timeout\";\n    /**\n     * Indicates that a connection was closed during execution of the query.\n     */\n    AnalyticsStatus[\"Closed\"] = \"closed\";\n    /**\n     * Indicates that the query stopped with fatal errors.\n     */\n    AnalyticsStatus[\"Fatal\"] = \"fatal\";\n    /**\n     * Indicates that the query was aborted while executing.\n     */\n    AnalyticsStatus[\"Aborted\"] = \"aborted\";\n    /**\n     * Indicates that the status of the query is unknown.\n     */\n    AnalyticsStatus[\"Unknown\"] = \"unknown\";\n})(AnalyticsStatus || (exports.AnalyticsStatus = AnalyticsStatus = {}));\n/**\n * Contains the results of an analytics query.\n *\n * @category Analytics\n */\nclass AnalyticsResult {\n    /**\n     * @internal\n     */\n    constructor(data) {\n        this.rows = data.rows;\n        this.meta = data.meta;\n    }\n}\nexports.AnalyticsResult = AnalyticsResult;\n/**\n * Contains the meta-data that is returend from an analytics query.\n *\n * @category Analytics\n */\nclass AnalyticsMetaData {\n    /**\n     * @internal\n     */\n    constructor(data) {\n        this.requestId = data.requestId;\n        this.clientContextId = data.clientContextId;\n        this.status = data.status;\n        this.signature = data.signature;\n        this.warnings = data.warnings;\n        this.metrics = data.metrics;\n    }\n}\nexports.AnalyticsMetaData = AnalyticsMetaData;\n/**\n * Contains information about a warning which occurred during the\n * execution of an analytics query.\n *\n * @category Analytics\n */\nclass AnalyticsWarning {\n    /**\n     * @internal\n     */\n    constructor(data) {\n        this.code = data.code;\n        this.message = data.message;\n    }\n}\nexports.AnalyticsWarning = AnalyticsWarning;\n/**\n * Contains various metrics that are returned by the server following\n * the execution of an analytics query.\n *\n * @category Analytics\n */\nclass AnalyticsMetrics {\n    /**\n     * @internal\n     */\n    constructor(data) {\n        this.elapsedTime = data.elapsedTime;\n        this.executionTime = data.executionTime;\n        this.resultCount = data.resultCount;\n        this.resultSize = data.resultSize;\n        this.errorCount = data.errorCount;\n        this.processedObjects = data.processedObjects;\n        this.warningCount = data.warningCount;\n    }\n}\nexports.AnalyticsMetrics = AnalyticsMetrics;\n/**\n * Represents the various scan consistency options that are available when\n * querying against the analytics service.\n *\n * @category Analytics\n */\nvar AnalyticsScanConsistency;\n(function (AnalyticsScanConsistency) {\n    /**\n     * Indicates that no specific consistency is required, this is the fastest\n     * options, but results may not include the most recent operations which have\n     * been performed.\n     */\n    AnalyticsScanConsistency[\"NotBounded\"] = \"not_bounded\";\n    /**\n     * Indicates that the results to the query should include all operations that\n     * have occurred up until the query was started.  This incurs a performance\n     * penalty of waiting for the index to catch up to the most recent operations,\n     * but provides the highest level of consistency.\n     */\n    AnalyticsScanConsistency[\"RequestPlus\"] = \"request_plus\";\n})(AnalyticsScanConsistency || (exports.AnalyticsScanConsistency = AnalyticsScanConsistency = {}));\n"],"x_google_ignoreList":[0],"mappings":";;;;;;CACA,OAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAM,EAAC;CAC7D,QAAQ,2BAA2B,QAAQ,mBAAmB,QAAQ,mBAAmB,QAAQ,oBAAoB,QAAQ,kBAAkB,QAAQ,kBAAkB,KAAK;;;;;;CAM9K,IAAI;EACH,SAAUA,mBAAiB;;;;EAIxBA,kBAAgB,aAAa;;;;EAI7BA,kBAAgB,aAAa;;;;EAI7BA,kBAAgB,YAAY;;;;EAI5BA,kBAAgB,eAAe;;;;EAI/BA,kBAAgB,aAAa;;;;EAI7BA,kBAAgB,aAAa;;;;EAI7BA,kBAAgB,YAAY;;;;EAI5BA,kBAAgB,WAAW;;;;EAI3BA,kBAAgB,aAAa;;;;EAI7BA,kBAAgB,aAAa;CAChC,GAAE,oBAAoB,QAAQ,kBAAkB,kBAAkB,CAAE,GAAE;;;;;;CAMvE,IAAM,kBAAN,MAAsB;;;;EAIlB,YAAY,MAAM;GACd,KAAK,OAAO,KAAK;GACjB,KAAK,OAAO,KAAK;EACpB;CACJ;CACD,QAAQ,kBAAkB;;;;;;CAM1B,IAAM,oBAAN,MAAwB;;;;EAIpB,YAAY,MAAM;GACd,KAAK,YAAY,KAAK;GACtB,KAAK,kBAAkB,KAAK;GAC5B,KAAK,SAAS,KAAK;GACnB,KAAK,YAAY,KAAK;GACtB,KAAK,WAAW,KAAK;GACrB,KAAK,UAAU,KAAK;EACvB;CACJ;CACD,QAAQ,oBAAoB;;;;;;;CAO5B,IAAM,mBAAN,MAAuB;;;;EAInB,YAAY,MAAM;GACd,KAAK,OAAO,KAAK;GACjB,KAAK,UAAU,KAAK;EACvB;CACJ;CACD,QAAQ,mBAAmB;;;;;;;CAO3B,IAAM,mBAAN,MAAuB;;;;EAInB,YAAY,MAAM;GACd,KAAK,cAAc,KAAK;GACxB,KAAK,gBAAgB,KAAK;GAC1B,KAAK,cAAc,KAAK;GACxB,KAAK,aAAa,KAAK;GACvB,KAAK,aAAa,KAAK;GACvB,KAAK,mBAAmB,KAAK;GAC7B,KAAK,eAAe,KAAK;EAC5B;CACJ;CACD,QAAQ,mBAAmB;;;;;;;CAO3B,IAAI;EACH,SAAUC,4BAA0B;;;;;;EAMjCA,2BAAyB,gBAAgB;;;;;;;EAOzCA,2BAAyB,iBAAiB;CAC7C,GAAE,6BAA6B,QAAQ,2BAA2B,2BAA2B,CAAE,GAAE"}