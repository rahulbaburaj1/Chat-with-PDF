{"version":3,"file":"vercel_postgres.d.ts","names":["VercelPool","VercelPoolClient","VercelPostgresPoolConfig","EmbeddingsInterface","VectorStore","Document","Metadata","Record","VercelPostgresFields","VercelPostgres","Partial","Promise","_vercel_postgres0","QueryResult"],"sources":["../../src/vectorstores/vercel_postgres.d.ts"],"sourcesContent":["import { type VercelPool, type VercelPoolClient, type VercelPostgresPoolConfig } from \"@vercel/postgres\";\nimport type { EmbeddingsInterface } from \"@langchain/core/embeddings\";\nimport { VectorStore } from \"@langchain/core/vectorstores\";\nimport { Document } from \"@langchain/core/documents\";\ntype Metadata = Record<string, string | number | Record<\"in\", string[]>>;\n/**\n * Interface that defines the arguments required to create a\n * `VercelPostgres` instance. It includes Postgres connection options,\n * table name, filter, and verbosity level.\n */\nexport interface VercelPostgresFields {\n    pool: VercelPool;\n    client: VercelPoolClient;\n    tableName?: string;\n    columns?: {\n        idColumnName?: string;\n        vectorColumnName?: string;\n        contentColumnName?: string;\n        metadataColumnName?: string;\n    };\n    filter?: Metadata;\n    verbose?: boolean;\n}\n/**\n * Class that provides an interface to a Vercel Postgres vector database. It\n * extends the `VectorStore` base class and implements methods for adding\n * documents and vectors and performing similarity searches.\n */\nexport declare class VercelPostgres extends VectorStore {\n    FilterType: Metadata;\n    tableName: string;\n    idColumnName: string;\n    vectorColumnName: string;\n    contentColumnName: string;\n    metadataColumnName: string;\n    filter?: Metadata;\n    _verbose?: boolean;\n    pool: VercelPool;\n    client: VercelPoolClient;\n    _vectorstoreType(): string;\n    constructor(embeddings: EmbeddingsInterface, config: VercelPostgresFields);\n    /**\n     * Static method to create a new `VercelPostgres` instance from a\n     * connection. It creates a table if one does not exist, and calls\n     * `connect` to return a new instance of `VercelPostgres`.\n     *\n     * @param embeddings - Embeddings instance.\n     * @param fields - `VercelPostgres` configuration options.\n     * @returns A new instance of `VercelPostgres`.\n     */\n    static initialize(embeddings: EmbeddingsInterface, config?: Partial<VercelPostgresFields> & {\n        postgresConnectionOptions?: VercelPostgresPoolConfig;\n    }): Promise<VercelPostgres>;\n    /**\n     * Method to add documents to the vector store. It converts the documents into\n     * vectors, and adds them to the store.\n     *\n     * @param documents - Array of `Document` instances.\n     * @returns Promise that resolves when the documents have been added.\n     */\n    addDocuments(documents: Document[], options?: {\n        ids?: string[];\n    }): Promise<string[]>;\n    /**\n     * Generates the SQL placeholders for a specific row at the provided index.\n     *\n     * @param index - The index of the row for which placeholders need to be generated.\n     * @returns The SQL placeholders for the row values.\n     */\n    protected generatePlaceholderForRowAt(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    row: (string | Record<string, any>)[], index: number): string;\n    /**\n     * Constructs the SQL query for inserting rows into the specified table.\n     *\n     * @param rows - The rows of data to be inserted, consisting of values and records.\n     * @param chunkIndex - The starting index for generating query placeholders based on chunk positioning.\n     * @returns The complete SQL INSERT INTO query string.\n     */\n    protected runInsertQuery(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    rows: (string | Record<string, any>)[][], useIdColumn: boolean): Promise<import(\"@vercel/postgres\").QueryResult<any>>;\n    /**\n     * Method to add vectors to the vector store. It converts the vectors into\n     * rows and inserts them into the database.\n     *\n     * @param vectors - Array of vectors.\n     * @param documents - Array of `Document` instances.\n     * @returns Promise that resolves when the vectors have been added.\n     */\n    addVectors(vectors: number[][], documents: Document[], options?: {\n        ids?: string[];\n    }): Promise<string[]>;\n    /**\n     * Method to perform a similarity search in the vector store. It returns\n     * the `k` most similar documents to the query vector, along with their\n     * similarity scores.\n     *\n     * @param query - Query vector.\n     * @param k - Number of most similar documents to return.\n     * @param filter - Optional filter to apply to the search.\n     * @returns Promise that resolves with an array of tuples, each containing a `Document` and its similarity score.\n     */\n    similaritySearchVectorWithScore(query: number[], k: number, filter?: this[\"FilterType\"]): Promise<[Document, number][]>;\n    delete(params: {\n        ids?: string[];\n        deleteAll?: boolean;\n    }): Promise<void>;\n    /**\n     * Method to ensure the existence of the table in the database. It creates\n     * the table if it does not already exist.\n     *\n     * @returns Promise that resolves when the table has been ensured.\n     */\n    ensureTableInDatabase(): Promise<void>;\n    /**\n     * Static method to create a new `VercelPostgres` instance from an\n     * array of texts and their metadata. It converts the texts into\n     * `Document` instances and adds them to the store.\n     *\n     * @param texts - Array of texts.\n     * @param metadatas - Array of metadata objects or a single metadata object.\n     * @param embeddings - Embeddings instance.\n     * @param fields - `VercelPostgres` configuration options.\n     * @returns Promise that resolves with a new instance of `VercelPostgres`.\n     */\n    static fromTexts(texts: string[], metadatas: object[] | object, embeddings: EmbeddingsInterface, dbConfig?: Partial<VercelPostgresFields> & {\n        postgresConnectionOptions?: VercelPostgresPoolConfig;\n    }): Promise<VercelPostgres>;\n    /**\n     * Static method to create a new `VercelPostgres` instance from an\n     * array of `Document` instances. It adds the documents to the store.\n     *\n     * @param docs - Array of `Document` instances.\n     * @param embeddings - Embeddings instance.\n     * @param fields - `VercelPostgres` configuration options.\n     * @returns Promise that resolves with a new instance of `VercelPostgres`.\n     */\n    static fromDocuments(docs: Document[], embeddings: EmbeddingsInterface, dbConfig?: Partial<VercelPostgresFields> & {\n        postgresConnectionOptions?: VercelPostgresPoolConfig;\n    }): Promise<VercelPostgres>;\n    /**\n     * Closes all the clients in the pool and terminates the pool.\n     *\n     * @returns Promise that resolves when all clients are closed and the pool is terminated.\n     */\n    end(): Promise<void>;\n}\nexport {};\n"],"mappings":";;;;;;;;;;KAIKM,QAAAA,GAAWC,iCAAiCA;;;;;;UAMhCC,oBAAAA;QACPR;UACEC;EARPK,SAAAA,CAAAA,EAAQ,MAAA;EAAA,OAAA,CAAA,EAAA;IAAoCC,YAAAA,CAAAA,EAAAA,MAAAA;IAAjCA,gBAAAA,CAAAA,EAAAA,MAAAA;IAAM,iBAAA,CAAA,EAAA,MAAA;IAMLC,kBAAAA,CAAoB,EAAA,MAAA;EAAA,CAAA;EAAA,MAC3BR,CAAAA,EASGM,QATHN;EAAU,OACRC,CAAAA,EAAAA,OAAAA;;AAQS;AAQrB;;;;AASUD,cATWS,cAAAA,SAAuBL,WAAAA,CASlCJ;EAAU,UACRC,EATIK,QASJL;EAAgB,SAEAE,EAAAA,MAAAA;EAAmB,YAAUK,EAAAA,MAAAA;EAAoB,gBAU3CL,EAAAA,MAAAA;EAAmB,iBAAmBK,EAAAA,MAAAA;EAAoB,kBAA5BE,EAAAA,MAAAA;EAAO,MACnCR,CAAAA,EAhBvBI,QAgBuBJ;EAAwB,QAC5CO,CAAAA,EAAAA,OAAAA;EAAc,IAAtBE,EAfEX,UAeFW;EAAO,MAQaN,EAtBhBJ,gBAsBgBI;EAAQ,gBAE5BM,CAAAA,CAAAA,EAAAA,MAAAA;EAAO,WASIJ,CAAAA,UAAAA,EA/BSJ,mBA+BTI,EAAAA,MAAAA,EA/BsCC,oBA+BtCD;EAAM;;;;;;;;;EA2CW,OAY4CJ,UAAAA,CAAAA,UAAAA,EA5E9CA,mBA4E8CA,EAAAA,MAA4D,CAA5DA,EA5EhBO,OA4EgBP,CA5ERK,oBA4EQL,CAAAA,GAAAA;IAAwCK,yBAAAA,CAAAA,EA3EpFN,wBA2EoFM;EAAoB,CAAA,CAAA,EA1EpIG,OA0EwGD,CA1EhGD,cA0EgGC,CAAAA;EAAO;;;;;;;EAYzB,YAC1DR,CAAAA,SAAAA,EA/ERG,QA+EQH,EAAAA,EAAAA,OACN,CADMA,EAAAA;IACpBO,GAAAA,CAAAA,EAAAA,MAAAA,EAAAA;EAAc,CAAA,CAAA,EA9EtBE,OA8EAA,CAAAA,MAAAA,EAAAA,CAAAA;EAAO;;AAhHwC;;;;;;iBA2CpCJ;;;;;;;;;;kBAUCA,iDAAiDI,QAA3CC,iBAAAA,CAA8EC;;;;;;;;;6CASzDR;;MAEvCM;;;;;;;;;;;4FAWsFA,SAASN;;;;MAI/FM;;;;;;;2BAOqBA;;;;;;;;;;;;8EAYmDR,gCAAgCO,QAAQF;gCACpFN;MAC5BS,QAAQF;;;;;;;;;;6BAUeJ,wBAAwBF,gCAAgCO,QAAQF;gCAC3DN;MAC5BS,QAAQF;;;;;;SAMLE"}