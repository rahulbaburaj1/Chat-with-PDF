{"version":3,"file":"transactions.cjs","names":["TransactionGetMultiMode","TransactionGetMultiReplicasFromPreferredServerGroupMode"],"sources":["../../../../../../../../../node_modules/.pnpm/couchbase@4.5.0/node_modules/couchbase/dist/transactions.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Transactions = exports.TransactionAttemptContext = exports.TransactionQueryResult = exports.TransactionGetMultiReplicasFromPreferredServerGroupResult = exports.TransactionGetMultiReplicasFromPreferredServerGroupResultEntry = exports.TransactionGetMultiResult = exports.TransactionGetMultiResultEntry = exports.TransactionGetResult = exports.TransactionResult = exports.TransactionGetMultiReplicasFromPreferredServerGroupSpec = exports.TransactionGetMultiSpec = exports.TransactionGetMultiReplicasFromPreferredServerGroupMode = exports.TransactionGetMultiMode = exports.DocumentId = void 0;\nconst binding_1 = __importDefault(require(\"./binding\"));\nconst bindingutilities_1 = require(\"./bindingutilities\");\nconst errors_1 = require(\"./errors\");\nconst queryexecutor_1 = require(\"./queryexecutor\");\nconst transcoders_1 = require(\"./transcoders\");\nconst utilities_1 = require(\"./utilities\");\n/**\n * Represents the path to a document.\n *\n * @category Transactions\n */\nclass DocumentId {\n    constructor() {\n        this.bucket = '';\n        this.scope = '';\n        this.collection = '';\n        this.key = '';\n    }\n}\nexports.DocumentId = DocumentId;\n/**\n * Represents the mode of the Transactional GetMulti operation.\n *\n * @category Transactions\n */\nvar TransactionGetMultiMode;\n(function (TransactionGetMultiMode) {\n    /**\n     * Indicates that the Transactional GetMulti op should prioritise latency.\n     */\n    TransactionGetMultiMode[\"PrioritiseLatency\"] = \"prioritise_latency\";\n    /**\n     * Indicates that the Transactional GetMulti op should disable read skew detection.\n     */\n    TransactionGetMultiMode[\"DisableReadSkewDetection\"] = \"disable_read_skew_detection\";\n    /**\n     * Indicates that the Transactional GetMulti op should prioritise read skew detection.\n     */\n    TransactionGetMultiMode[\"PrioritiseReadSkewDetection\"] = \"prioritise_read_skew_detection\";\n})(TransactionGetMultiMode || (exports.TransactionGetMultiMode = TransactionGetMultiMode = {}));\n/**\n * Represents the mode of the Transactional GetMultiReplicasFromPreferredServerGroup operation.\n *\n * @category Transactions\n */\nvar TransactionGetMultiReplicasFromPreferredServerGroupMode;\n(function (TransactionGetMultiReplicasFromPreferredServerGroupMode) {\n    /**\n     * Indicates that the Transactional GetMultiReplicasFromPreferredServerGroup op should prioritise latency.\n     */\n    TransactionGetMultiReplicasFromPreferredServerGroupMode[\"PrioritiseLatency\"] = \"prioritise_latency\";\n    /**\n     * Indicates that the Transactional GetMultiReplicasFromPreferredServerGroup op should disable read skew detection.\n     */\n    TransactionGetMultiReplicasFromPreferredServerGroupMode[\"DisableReadSkewDetection\"] = \"disable_read_skew_detection\";\n    /**\n     * Indicates that the Transactional GetMultiReplicasFromPreferredServerGroup op should prioritise read skew detection.\n     */\n    TransactionGetMultiReplicasFromPreferredServerGroupMode[\"PrioritiseReadSkewDetection\"] = \"prioritise_read_skew_detection\";\n})(TransactionGetMultiReplicasFromPreferredServerGroupMode || (exports.TransactionGetMultiReplicasFromPreferredServerGroupMode = TransactionGetMultiReplicasFromPreferredServerGroupMode = {}));\n/**\n * Represents the path to a document.\n *\n * @category Transactions\n */\nclass TransactionGetMultiSpec {\n    constructor(collection, id, transcoder) {\n        this.collection = collection;\n        this.id = id;\n        this.transcoder = transcoder;\n    }\n    /**\n     * @internal\n     */\n    _toCppDocumentId() {\n        return {\n            bucket: this.collection.scope.bucket.name,\n            scope: this.collection.scope.name || '_default',\n            collection: this.collection.name || '_default',\n            key: this.id,\n        };\n    }\n}\nexports.TransactionGetMultiSpec = TransactionGetMultiSpec;\n/**\n * Represents the path to a document.\n *\n * @category Transactions\n */\nclass TransactionGetMultiReplicasFromPreferredServerGroupSpec {\n    constructor(collection, id, transcoder) {\n        this.collection = collection;\n        this.id = id;\n        this.transcoder = transcoder;\n    }\n    /**\n     * @internal\n     */\n    _toCppDocumentId() {\n        return {\n            bucket: this.collection.scope.bucket.name,\n            scope: this.collection.scope.name || '_default',\n            collection: this.collection.name || '_default',\n            key: this.id,\n        };\n    }\n}\nexports.TransactionGetMultiReplicasFromPreferredServerGroupSpec = TransactionGetMultiReplicasFromPreferredServerGroupSpec;\n/**\n * Contains the results of a Transaction.\n *\n * @category Transactions\n */\nclass TransactionResult {\n    /**\n     * @internal\n     */\n    constructor(data) {\n        this.transactionId = data.transactionId;\n        this.unstagingComplete = data.unstagingComplete;\n    }\n}\nexports.TransactionResult = TransactionResult;\n/**\n * Contains the results of a transactional Get operation.\n *\n * @category Transactions\n */\nclass TransactionGetResult {\n    /**\n     * @internal\n     */\n    constructor(data) {\n        this.id = data.id;\n        this.content = data.content;\n        this.cas = data.cas;\n        this._links = data._links;\n        this._metadata = data._metadata;\n    }\n}\nexports.TransactionGetResult = TransactionGetResult;\n/**\n * Contains the results of a specific sub-operation within a transactional GetMulti operation.\n *\n * @category Transactions\n */\nclass TransactionGetMultiResultEntry {\n    /**\n     * @internal\n     */\n    constructor(data) {\n        this.error = data.error || null;\n        this.value = data.value;\n    }\n}\nexports.TransactionGetMultiResultEntry = TransactionGetMultiResultEntry;\n/**\n * Contains the results of a transactional GetMulti operation.\n *\n * @category Transactions\n */\nclass TransactionGetMultiResult {\n    /**\n     * @internal\n     */\n    constructor(data) {\n        this.content = data.content;\n    }\n    /**\n     * Indicates whether the document at the specified index exists.\n     *\n     * @param index The result index to check.\n     */\n    exists(index) {\n        if (index < 0 || index >= this.content.length) {\n            throw new Error(`Index (${index}) out of bounds.`);\n        }\n        return (this.content[index].error === undefined ||\n            this.content[index].error === null);\n    }\n    /**\n     * Provides the content at the specified index, if it exists.\n     *\n     * @param index The result index to check.\n     */\n    contentAt(index) {\n        if (!this.exists(index)) {\n            throw (this.content[index].error ||\n                new errors_1.DocumentNotFoundError(new Error(`Document does not exist at index=${index}.`)));\n        }\n        return this.content[index].value;\n    }\n}\nexports.TransactionGetMultiResult = TransactionGetMultiResult;\n/**\n * Contains the results of a specific sub-operation within\n * a transactional GetMultiReplicasFromPreferredServerGroup operation.\n *\n * @category Transactions\n */\nclass TransactionGetMultiReplicasFromPreferredServerGroupResultEntry {\n    /**\n     * @internal\n     */\n    constructor(data) {\n        this.error = data.error || null;\n        this.value = data.value;\n    }\n}\nexports.TransactionGetMultiReplicasFromPreferredServerGroupResultEntry = TransactionGetMultiReplicasFromPreferredServerGroupResultEntry;\n/**\n * Contains the results of a transactional GetMultiReplicasFromPreferredServerGroup operation.\n *\n * @category Transactions\n */\nclass TransactionGetMultiReplicasFromPreferredServerGroupResult {\n    /**\n     * @internal\n     */\n    constructor(data) {\n        this.content = data.content;\n    }\n    /**\n     * Indicates whether the document at the specified index exists.\n     *\n     * @param index The result index to check.\n     */\n    exists(index) {\n        if (index < 0 || index >= this.content.length) {\n            throw new Error(`Index (${index}) out of bounds.`);\n        }\n        return (this.content[index].error === undefined ||\n            this.content[index].error === null);\n    }\n    /**\n     * Provides the content at the specified index, if it exists.\n     *\n     * @param index The result index to check.\n     */\n    contentAt(index) {\n        if (!this.exists(index)) {\n            throw (this.content[index].error ||\n                new errors_1.DocumentNotFoundError(new Error(`Document does not exist at index=${index}.`)));\n        }\n        return this.content[index].value;\n    }\n}\nexports.TransactionGetMultiReplicasFromPreferredServerGroupResult = TransactionGetMultiReplicasFromPreferredServerGroupResult;\n/**\n * Contains the results of a transactional Query operation.\n *\n * @category Transactions\n */\nclass TransactionQueryResult {\n    /**\n     * @internal\n     */\n    constructor(data) {\n        this.rows = data.rows;\n        this.meta = data.meta;\n    }\n}\nexports.TransactionQueryResult = TransactionQueryResult;\n/**\n * @internal\n */\nfunction translateGetResult(cppRes, transcoder) {\n    if (!cppRes) {\n        return null;\n    }\n    let content;\n    if (cppRes.content && cppRes.content.data && cppRes.content.data.length > 0) {\n        content = transcoder.decode(cppRes.content.data, cppRes.content.flags);\n    }\n    return new TransactionGetResult({\n        id: cppRes.id,\n        content: content,\n        cas: cppRes.cas,\n        _links: cppRes.links,\n        _metadata: cppRes.metadata,\n    });\n}\n/**\n * @internal\n */\nfunction translateGetMultiResult(cppRes, transcoders) {\n    if (!cppRes) {\n        return null;\n    }\n    const content = [];\n    for (let i = 0; i < cppRes.content.length; ++i) {\n        const cppEntry = cppRes.content[i];\n        let resultEntry, resultError;\n        if (cppEntry && cppEntry.data && cppEntry.data.length > 0) {\n            resultEntry = transcoders[i].decode(cppEntry.data, cppEntry.flags);\n        }\n        else {\n            resultError = new errors_1.DocumentNotFoundError(new Error(`Document not found at index=${i}.`));\n        }\n        content.push(new TransactionGetMultiResultEntry({\n            value: resultEntry,\n            error: resultError,\n        }));\n    }\n    return new TransactionGetMultiResult({\n        content,\n    });\n}\n/**\n * @internal\n */\nfunction translateGetMultiReplicasFromPreferredServerGroupResult(cppRes, transcoders) {\n    if (!cppRes) {\n        return null;\n    }\n    const content = [];\n    for (let i = 0; i < cppRes.content.length; ++i) {\n        const cppEntry = cppRes.content[i];\n        let resultEntry, resultError;\n        if (cppEntry && cppEntry.data && cppEntry.data.length > 0) {\n            resultEntry = transcoders[i].decode(cppEntry.data, cppEntry.flags);\n        }\n        else {\n            resultError = new errors_1.DocumentNotFoundError(new Error(`Document not found at index=${i}.`));\n        }\n        content.push(new TransactionGetMultiReplicasFromPreferredServerGroupResultEntry({\n            value: resultEntry,\n            error: resultError,\n        }));\n    }\n    return new TransactionGetMultiReplicasFromPreferredServerGroupResult({\n        content,\n    });\n}\n/**\n * Provides an interface to preform transactional operations in a transaction.\n *\n * @category Transactions\n */\nclass TransactionAttemptContext {\n    /**\n     * @internal\n     */\n    constructor(txns, config) {\n        if (!config) {\n            config = {};\n        }\n        this._impl = new binding_1.default.Transaction(txns.impl, {\n            durability_level: (0, bindingutilities_1.durabilityToCpp)(config.durabilityLevel),\n            timeout: config.timeout,\n            query_scan_consistency: (0, bindingutilities_1.queryScanConsistencyToCpp)(undefined),\n        });\n        this._transcoder = new transcoders_1.DefaultTranscoder();\n    }\n    /**\n    @internal\n    */\n    get impl() {\n        return this._impl;\n    }\n    /**\n     * @internal\n     */\n    _newAttempt() {\n        return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n            this._impl.newAttempt((cppErr) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                wrapCallback(err);\n            });\n        });\n    }\n    /**\n     * Retrieves the value of a document from the collection.\n     *\n     * @param collection The collection the document lives in.\n     * @param key The document key to retrieve.\n     * @param options Optional parameters for this operation.\n     */\n    async get(collection, key, options) {\n        const transcoder = (options === null || options === void 0 ? void 0 : options.transcoder) || this._transcoder;\n        return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n            const id = collection._cppDocId(key);\n            this._impl.get({\n                id,\n            }, (cppErr, cppRes) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                if (err) {\n                    return wrapCallback(err, null);\n                }\n                wrapCallback(err, translateGetResult(cppRes, transcoder));\n            });\n        });\n    }\n    /**\n     * Retrieves the value of a document from the collection.\n     *\n     * @param collection The collection the document lives in.\n     * @param key The document key to retrieve.\n     * @param options Optional parameters for this operation.\n     */\n    async getReplicaFromPreferredServerGroup(collection, key, options) {\n        const transcoder = (options === null || options === void 0 ? void 0 : options.transcoder) || this._transcoder;\n        return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n            const id = collection._cppDocId(key);\n            this._impl.getReplicaFromPreferredServerGroup({\n                id,\n            }, (cppErr, cppRes) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                if (err) {\n                    return wrapCallback(err, null);\n                }\n                wrapCallback(err, translateGetResult(cppRes, transcoder));\n            });\n        });\n    }\n    /**\n     * Retrieves the documents specified in the list of specs.\n     *\n     * @param specs The documents to retrieve.\n     * @param options Optional parameters for this operation.\n     */\n    async getMultiReplicasFromPreferredServerGroup(specs, options) {\n        const ids = specs.map((spec) => spec._toCppDocumentId());\n        const transcoders = specs.map((spec) => spec.transcoder || this._transcoder);\n        return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n            this._impl.getMultiReplicasFromPreferredServerGroup({\n                ids,\n                mode: (0, bindingutilities_1.transactionGetMultiReplicasFromPreferredServerGroupModeToCpp)(options === null || options === void 0 ? void 0 : options.mode),\n            }, (cppErr, cppRes) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                if (err) {\n                    return wrapCallback(err, null);\n                }\n                wrapCallback(err, translateGetMultiReplicasFromPreferredServerGroupResult(cppRes, transcoders));\n            });\n        });\n    }\n    /**\n     * Retrieves the documents specified in the list of specs.\n     *\n     * @param specs The documents to retrieve.\n     * @param options Optional parameters for this operation.\n     */\n    async getMulti(specs, options) {\n        const ids = specs.map((spec) => spec._toCppDocumentId());\n        const transcoders = specs.map((spec) => spec.transcoder || this._transcoder);\n        return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n            this._impl.getMulti({\n                ids,\n                mode: (0, bindingutilities_1.transactionGetMultiModeToCpp)(options === null || options === void 0 ? void 0 : options.mode),\n            }, (cppErr, cppRes) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                if (err) {\n                    return wrapCallback(err, null);\n                }\n                wrapCallback(err, translateGetMultiResult(cppRes, transcoders));\n            });\n        });\n    }\n    /**\n     * Inserts a new document to the collection, failing if the document already exists.\n     *\n     * @param collection The collection the document lives in.\n     * @param key The document key to insert.\n     * @param content The document content to insert.\n     * @param options Optional parameters for this operation.\n     */\n    async insert(collection, key, content, options) {\n        return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n            const id = collection._cppDocId(key);\n            const transcoder = (options === null || options === void 0 ? void 0 : options.transcoder) || this._transcoder;\n            const [data, flags] = transcoder.encode(content);\n            this._impl.insert({\n                id,\n                content: {\n                    data,\n                    flags,\n                },\n            }, (cppErr, cppRes) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                if (err) {\n                    return wrapCallback(err, null);\n                }\n                wrapCallback(err, translateGetResult(cppRes, transcoder));\n            });\n        });\n    }\n    /**\n     * Replaces a document in a collection.\n     *\n     * @param doc The document to replace.\n     * @param content The document content to insert.\n     * @param options Optional parameters for this operation.\n     */\n    async replace(doc, content, options) {\n        return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n            const transcoder = (options === null || options === void 0 ? void 0 : options.transcoder) || this._transcoder;\n            const [data, flags] = transcoder.encode(content);\n            this._impl.replace({\n                doc: {\n                    id: doc.id,\n                    content: {\n                        data: Buffer.from(''),\n                        flags: 0,\n                    },\n                    cas: doc.cas,\n                    links: doc._links,\n                    metadata: doc._metadata,\n                },\n                content: {\n                    data,\n                    flags,\n                },\n            }, (cppErr, cppRes) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                if (err) {\n                    return wrapCallback(err, null);\n                }\n                wrapCallback(err, translateGetResult(cppRes, transcoder));\n            });\n        });\n    }\n    /**\n     * Removes a document from a collection.\n     *\n     * @param doc The document to remove.\n     */\n    async remove(doc) {\n        return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n            this._impl.remove({\n                doc: {\n                    id: doc.id,\n                    content: {\n                        data: Buffer.from(''),\n                        flags: 0,\n                    },\n                    cas: doc.cas,\n                    links: doc._links,\n                    metadata: doc._metadata,\n                },\n            }, (cppErr) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                wrapCallback(err, null);\n            });\n        });\n    }\n    /**\n     * Executes a query in the context of this transaction.\n     *\n     * @param statement The statement to execute.\n     * @param options Optional parameters for this operation.\n     */\n    async query(statement, options) {\n        // This await statement is explicit here to ensure our query is completely\n        // processed before returning the result to the user (no row streaming).\n        const syncQueryRes = await queryexecutor_1.QueryExecutor.execute((callback) => {\n            if (!options) {\n                options = {};\n            }\n            this._impl.query(statement, {\n                scan_consistency: (0, bindingutilities_1.queryScanConsistencyToCpp)(options.scanConsistency),\n                ad_hoc: options.adhoc === false ? false : true,\n                client_context_id: options.clientContextId,\n                pipeline_batch: options.pipelineBatch,\n                pipeline_cap: options.pipelineCap,\n                max_parallelism: options.maxParallelism,\n                scan_wait: options.scanWait,\n                scan_cap: options.scanCap,\n                readonly: options.readOnly || false,\n                profile: (0, bindingutilities_1.queryProfileToCpp)(options.profile),\n                metrics: options.metrics || false,\n                raw: options.raw\n                    ? Object.fromEntries(Object.entries(options.raw)\n                        .filter(([, v]) => v !== undefined)\n                        .map(([k, v]) => [k, Buffer.from(JSON.stringify(v))]))\n                    : {},\n                positional_parameters: options.parameters && Array.isArray(options.parameters)\n                    ? options.parameters.map((v) => Buffer.from(JSON.stringify(v !== null && v !== void 0 ? v : null)))\n                    : [],\n                named_parameters: options.parameters && !Array.isArray(options.parameters)\n                    ? Object.fromEntries(Object.entries(options.parameters)\n                        .filter(([, v]) => v !== undefined)\n                        .map(([k, v]) => [k, Buffer.from(JSON.stringify(v))]))\n                    : {},\n            }, (cppErr, resp) => {\n                callback(cppErr, resp);\n            });\n        });\n        return new TransactionQueryResult({\n            rows: syncQueryRes.rows,\n            meta: syncQueryRes.meta,\n        });\n    }\n    /**\n     * @internal\n     */\n    async _commit() {\n        return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n            this._impl.commit((cppErr, cppRes) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                let res = null;\n                if (cppRes) {\n                    res = new TransactionResult({\n                        transactionId: cppRes.transaction_id,\n                        unstagingComplete: cppRes.unstaging_complete,\n                    });\n                }\n                wrapCallback(err, res);\n            });\n        });\n    }\n    /**\n     * @internal\n     */\n    async _rollback() {\n        return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n            this._impl.rollback((cppErr) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                wrapCallback(err);\n            });\n        });\n    }\n}\nexports.TransactionAttemptContext = TransactionAttemptContext;\n/**\n * Provides an interface to access transactions.\n *\n * @category Transactions\n */\nclass Transactions {\n    /**\n    @internal\n    */\n    constructor(cluster, config) {\n        if (!config) {\n            config = {};\n        }\n        if (!config.cleanupConfig) {\n            config.cleanupConfig = {};\n        }\n        if (!config.queryConfig) {\n            config.queryConfig = {};\n        }\n        const connImpl = cluster.conn;\n        try {\n            const txnsImpl = new binding_1.default.Transactions(connImpl, {\n                durability_level: (0, bindingutilities_1.durabilityToCpp)(config.durabilityLevel),\n                timeout: config.timeout,\n                query_scan_consistency: (0, bindingutilities_1.queryScanConsistencyToCpp)(config.queryConfig.scanConsistency),\n                cleanup_window: config.cleanupConfig.cleanupWindow,\n                cleanup_lost_attempts: !config.cleanupConfig.disableLostAttemptCleanup,\n                cleanup_client_attempts: !config.cleanupConfig.disableClientAttemptCleanup,\n                metadata_collection: (0, bindingutilities_1.transactionKeyspaceToCpp)(config.metadataCollection),\n            });\n            this._cluster = cluster;\n            this._impl = txnsImpl;\n        }\n        catch (err) {\n            throw (0, bindingutilities_1.errorFromCpp)(err);\n        }\n    }\n    /**\n    @internal\n    */\n    get impl() {\n        return this._impl;\n    }\n    /**\n    @internal\n    */\n    _close() {\n        return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n            this._impl.close((cppErr) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                wrapCallback(err, null);\n            });\n        });\n    }\n    /**\n     * Executes a transaction.\n     *\n     * @param logicFn The transaction lambda to execute.\n     * @param config Configuration operations for the transaction.\n     */\n    async run(logicFn, config) {\n        const txn = new TransactionAttemptContext(this, config);\n        for (;;) {\n            await txn._newAttempt();\n            try {\n                await logicFn(txn);\n            }\n            catch (e) {\n                await txn._rollback();\n                if (e instanceof errors_1.TransactionOperationFailedError) {\n                    throw new errors_1.TransactionFailedError(e.cause, e.context);\n                }\n                else if (e instanceof errors_1.TransactionExpiredError ||\n                    e instanceof errors_1.TransactionCommitAmbiguousError) {\n                    throw e;\n                }\n                throw new errors_1.TransactionFailedError(e);\n            }\n            try {\n                const txnResult = await txn._commit(); // this is actually finalize internally\n                if (!txnResult) {\n                    // no result and no error, try again\n                    continue;\n                }\n                return txnResult;\n            }\n            catch (e) {\n                // commit failed, retry...\n            }\n        }\n    }\n}\nexports.Transactions = Transactions;\n"],"x_google_ignoreList":[0],"mappings":"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"}