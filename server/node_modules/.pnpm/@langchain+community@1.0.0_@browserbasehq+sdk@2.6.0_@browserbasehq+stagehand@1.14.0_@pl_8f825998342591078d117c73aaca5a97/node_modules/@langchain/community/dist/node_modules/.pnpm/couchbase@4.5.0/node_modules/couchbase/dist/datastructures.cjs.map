{"version":3,"file":"datastructures.cjs","names":[],"sources":["../../../../../../../../../node_modules/.pnpm/couchbase@4.5.0/node_modules/couchbase/dist/datastructures.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CouchbaseSet = exports.CouchbaseQueue = exports.CouchbaseMap = exports.CouchbaseList = void 0;\nconst errors_1 = require(\"./errors\");\nconst generaltypes_1 = require(\"./generaltypes\");\nconst sdspecs_1 = require(\"./sdspecs\");\nconst utilities_1 = require(\"./utilities\");\n/**\n * CouchbaseList provides a simplified interface for storing lists\n * within a Couchbase document.\n *\n * @see {@link Collection.list}\n * @category Datastructures\n */\nclass CouchbaseList {\n    /**\n     * @internal\n     */\n    constructor(collection, key) {\n        this._coll = collection;\n        this._key = key;\n    }\n    async _get() {\n        const doc = await this._coll.get(this._key);\n        if (!(doc.content instanceof Array)) {\n            throw new errors_1.CouchbaseError('expected document of array type');\n        }\n        return doc.content;\n    }\n    /**\n     * Returns the entire list of items in this list.\n     *\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async getAll(callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            return await this._get();\n        }, callback);\n    }\n    /**\n     * Iterates each item in the list.\n     *\n     * @param rowCallback A callback invoked for each item in the list.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async forEach(rowCallback, callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            const values = await this._get();\n            for (let i = 0; i < values.length; ++i) {\n                rowCallback(values[i], i, this);\n            }\n        }, callback);\n    }\n    /**\n     * Provides the ability to async-for loop this object.\n     */\n    [Symbol.asyncIterator]() {\n        const getNext = async () => this._get();\n        return {\n            data: null,\n            index: -1,\n            async next() {\n                if (this.index < 0) {\n                    this.data = await getNext();\n                    this.index = 0;\n                }\n                const data = this.data;\n                if (this.index < data.length) {\n                    return { done: false, value: data[this.index++] };\n                }\n                return { done: true };\n            },\n        };\n    }\n    /**\n     * Retrieves the item at a specific index in the list.\n     *\n     * @param index The index to retrieve.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async getAt(index, callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            const res = await this._coll.lookupIn(this._key, [\n                sdspecs_1.LookupInSpec.get('[' + index + ']'),\n            ]);\n            const itemRes = res.content[0];\n            if (itemRes.error) {\n                throw itemRes.error;\n            }\n            return itemRes.value;\n        }, callback);\n    }\n    /**\n     * Removes an item at a specific index from the list.\n     *\n     * @param index The index to remove.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async removeAt(index, callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            await this._coll.mutateIn(this._key, [\n                sdspecs_1.MutateInSpec.remove('[' + index + ']'),\n            ]);\n        }, callback);\n    }\n    /**\n     * Returns the index of a specific value from the list.\n     *\n     * @param value The value to search for.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async indexOf(value, callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            const items = await this._get();\n            for (let i = 0; i < items.length; ++i) {\n                if (items[i] === value) {\n                    return i;\n                }\n            }\n            return -1;\n        }, callback);\n    }\n    /**\n     * Returns the number of items in the list.\n     *\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async size(callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            const res = await this._coll.lookupIn(this._key, [sdspecs_1.LookupInSpec.count('')]);\n            return res.content[0].value;\n        }, callback);\n    }\n    /**\n     * Adds a new item to the end of the list.\n     *\n     * @param value The value to add.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async push(value, callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            await this._coll.mutateIn(this._key, [sdspecs_1.MutateInSpec.arrayAppend('', value)], {\n                storeSemantics: generaltypes_1.StoreSemantics.Upsert,\n            });\n        }, callback);\n    }\n    /**\n     * Adds a new item to the beginning of the list.\n     *\n     * @param value The value to add.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async unshift(value, callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            await this._coll.mutateIn(this._key, [sdspecs_1.MutateInSpec.arrayPrepend('', value)], {\n                storeSemantics: generaltypes_1.StoreSemantics.Upsert,\n            });\n        }, callback);\n    }\n}\nexports.CouchbaseList = CouchbaseList;\n/**\n * CouchbaseMap provides a simplified interface for storing a map\n * within a Couchbase document.\n *\n * @see {@link Collection.map}\n * @category Datastructures\n */\nclass CouchbaseMap {\n    /**\n     * @internal\n     */\n    constructor(collection, key) {\n        this._coll = collection;\n        this._key = key;\n    }\n    async _get() {\n        const doc = await this._coll.get(this._key);\n        if (!(doc.content instanceof Object)) {\n            throw new errors_1.CouchbaseError('expected document of object type');\n        }\n        return doc.content;\n    }\n    /**\n     * Returns an object representing all items in the map.\n     *\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async getAll(callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            return await this._get();\n        }, callback);\n    }\n    /**\n     * Iterates through every item in the map.\n     *\n     * @param rowCallback A callback invoked for each item in the list.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async forEach(rowCallback, callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            const values = await this._get();\n            for (const i in values) {\n                rowCallback(values[i], i, this);\n            }\n        }, callback);\n    }\n    /**\n     * Provides the ability to async-for loop this object.\n     */\n    [Symbol.asyncIterator]() {\n        const getNext = async () => this._get();\n        return {\n            data: null,\n            keys: null,\n            index: -1,\n            async next() {\n                if (this.index < 0) {\n                    this.data = await getNext();\n                    this.keys = Object.keys(this.data);\n                    this.index = 0;\n                }\n                const keys = this.keys;\n                const data = this.data;\n                if (this.index < keys.length) {\n                    const key = keys[this.index++];\n                    return { done: false, value: [data[key], key] };\n                }\n                return { done: true, value: undefined };\n            },\n        };\n    }\n    /**\n     * Sets a specific to the specified value in the map.\n     *\n     * @param item The key in the map to set.\n     * @param value The new value to set.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async set(item, value, callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            await this._coll.mutateIn(this._key, [sdspecs_1.MutateInSpec.upsert(item, value)], {\n                storeSemantics: generaltypes_1.StoreSemantics.Upsert,\n            });\n        }, callback);\n    }\n    /**\n     * Fetches a specific key from the map.\n     *\n     * @param item The key in the map to retrieve.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async get(item, callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            const res = await this._coll.lookupIn(this._key, [sdspecs_1.LookupInSpec.get(item)]);\n            const itemRes = res.content[0];\n            if (itemRes.error) {\n                throw itemRes.error;\n            }\n            return itemRes.value;\n        }, callback);\n    }\n    /**\n     * Removes a specific key from the map.\n     *\n     * @param item The key in the map to remove.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async remove(item, callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            await this._coll.mutateIn(this._key, [sdspecs_1.MutateInSpec.remove(item)]);\n        }, callback);\n    }\n    /**\n     * Checks whether a specific key exists in the map.\n     *\n     * @param item The key in the map to search for.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async exists(item, callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            const res = await this._coll.lookupIn(this._key, [\n                sdspecs_1.LookupInSpec.exists(item),\n            ]);\n            const itemRes = res.content[0];\n            return itemRes.value;\n        }, callback);\n    }\n    /**\n     * Returns a list of all the keys which exist in the map.\n     *\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async keys(callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            const values = await this._get();\n            return Object.keys(values);\n        }, callback);\n    }\n    /**\n     * Returns a list of all the values which exist in the map.\n     *\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async values(callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            const values = await this._get();\n            return Object.values(values);\n        }, callback);\n    }\n    /**\n     * Returns the number of items that exist in the map.\n     *\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async size(callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            const res = await this._coll.lookupIn(this._key, [sdspecs_1.LookupInSpec.count('')]);\n            return res.content[0].value;\n        }, callback);\n    }\n}\nexports.CouchbaseMap = CouchbaseMap;\n/**\n * CouchbaseQueue provides a simplified interface for storing a queue\n * within a Couchbase document.\n *\n * @see {@link Collection.queue}\n * @category Datastructures\n */\nclass CouchbaseQueue {\n    /**\n     * @internal\n     */\n    constructor(collection, key) {\n        this._coll = collection;\n        this._key = key;\n    }\n    async _get() {\n        const doc = await this._coll.get(this._key);\n        if (!(doc.content instanceof Array)) {\n            throw new errors_1.CouchbaseError('expected document of array type');\n        }\n        return doc.content;\n    }\n    /**\n     * Returns the number of items in the queue.\n     *\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async size(callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            const res = await this._coll.lookupIn(this._key, [sdspecs_1.LookupInSpec.count('')]);\n            return res.content[0].value;\n        }, callback);\n    }\n    /**\n     * Adds a new item to the back of the queue.\n     *\n     * @param value The value to add.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async push(value, callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            await this._coll.mutateIn(this._key, [sdspecs_1.MutateInSpec.arrayPrepend('', value)], {\n                storeSemantics: generaltypes_1.StoreSemantics.Upsert,\n            });\n        }, callback);\n    }\n    /**\n     * Removes an item from the front of the queue.\n     *\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async pop(callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            for (let i = 0; i < 16; ++i) {\n                try {\n                    const res = await this._coll.lookupIn(this._key, [\n                        sdspecs_1.LookupInSpec.get('[-1]'),\n                    ]);\n                    const value = res.content[0].value;\n                    await this._coll.mutateIn(this._key, [sdspecs_1.MutateInSpec.remove('[-1]')], {\n                        cas: res.cas,\n                    });\n                    return value;\n                }\n                catch (e) {\n                    if (e instanceof errors_1.PathInvalidError) {\n                        throw new errors_1.CouchbaseError('no items available in list');\n                    }\n                    // continue and retry\n                }\n            }\n            throw new errors_1.CouchbaseError('no items available to pop');\n        }, callback);\n    }\n}\nexports.CouchbaseQueue = CouchbaseQueue;\n/**\n * CouchbaseSet provides a simplified interface for storing a set\n * within a Couchbase document.\n *\n * @see {@link Collection.set}\n * @category Datastructures\n */\nclass CouchbaseSet {\n    /**\n     * @internal\n     */\n    constructor(collection, key) {\n        this._coll = collection;\n        this._key = key;\n    }\n    async _get() {\n        const doc = await this._coll.get(this._key);\n        if (!(doc.content instanceof Array)) {\n            throw new errors_1.CouchbaseError('expected document of array type');\n        }\n        return doc.content;\n    }\n    /**\n     * Adds a new item to the set.  Returning whether the item already existed\n     * in the set or not.\n     *\n     * @param item The item to add.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async add(item, callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            try {\n                await this._coll.mutateIn(this._key, [sdspecs_1.MutateInSpec.arrayAddUnique('', item)], {\n                    storeSemantics: generaltypes_1.StoreSemantics.Upsert,\n                });\n            }\n            catch (e) {\n                if (e instanceof errors_1.PathExistsError) {\n                    return false;\n                }\n                throw e;\n            }\n            return true;\n        }, callback);\n    }\n    /**\n     * Returns whether a specific value already exists in the set.\n     *\n     * @param item The value to search for.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async contains(item, callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            const values = await this._get();\n            for (let i = 0; i < values.length; ++i) {\n                if (values[i] === item) {\n                    return true;\n                }\n            }\n            return false;\n        }, callback);\n    }\n    /**\n     * Removes a specific value from the set.\n     *\n     * @param item The value to remove.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async remove(item, callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            for (let i = 0; i < 16; ++i) {\n                try {\n                    const res = await this._coll.get(this._key);\n                    if (!(res.content instanceof Array)) {\n                        throw new errors_1.CouchbaseError('expected document of array type');\n                    }\n                    const itemIdx = res.content.indexOf(item);\n                    if (itemIdx === -1) {\n                        throw new Error('item was not found in set');\n                    }\n                    await this._coll.mutateIn(this._key, [sdspecs_1.MutateInSpec.remove('[' + itemIdx + ']')], {\n                        cas: res.cas,\n                    });\n                    return;\n                }\n                catch (e) {\n                    // continue and retry\n                }\n            }\n            throw new errors_1.CouchbaseError('no items available to pop');\n        }, callback);\n    }\n    /**\n     * Returns a list of all values in the set.\n     *\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async values(callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            return await this._get();\n        }, callback);\n    }\n    /**\n     * Returns the number of elements in this set.\n     *\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async size(callback) {\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            const res = await this._coll.lookupIn(this._key, [sdspecs_1.LookupInSpec.count('')]);\n            return res.content[0].value;\n        }, callback);\n    }\n}\nexports.CouchbaseSet = CouchbaseSet;\n"],"x_google_ignoreList":[0],"mappings":"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"}