{"version":3,"file":"elasticsearch.d.ts","names":["Client","EmbeddingsInterface","VectorStore","Document","ElasticKnnEngine","ElasticSimilarity","VectorSearchOptions","ElasticClientArgs","ElasticFilter","ElasticVectorSearch","Promise"],"sources":["../../src/vectorstores/elasticsearch.d.ts"],"sourcesContent":["import { Client } from \"@elastic/elasticsearch\";\nimport type { EmbeddingsInterface } from \"@langchain/core/embeddings\";\nimport { VectorStore } from \"@langchain/core/vectorstores\";\nimport { Document } from \"@langchain/core/documents\";\n/**\n * Type representing the k-nearest neighbors (k-NN) engine used in\n * Elasticsearch.\n */\ntype ElasticKnnEngine = \"hnsw\";\n/**\n * Type representing the similarity measure used in Elasticsearch.\n */\ntype ElasticSimilarity = \"l2_norm\" | \"dot_product\" | \"cosine\";\n/**\n * Interface defining the options for vector search in Elasticsearch.\n */\ninterface VectorSearchOptions {\n    readonly engine?: ElasticKnnEngine;\n    readonly similarity?: ElasticSimilarity;\n    readonly m?: number;\n    readonly efConstruction?: number;\n    readonly candidates?: number;\n}\n/**\n * Interface defining the arguments required to create an Elasticsearch\n * client.\n */\nexport interface ElasticClientArgs {\n    readonly client: Client;\n    readonly indexName?: string;\n    readonly vectorSearchOptions?: VectorSearchOptions;\n}\n/**\n * Type representing a filter object in Elasticsearch.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype ElasticFilter = object | {\n    field: string;\n    operator: string;\n    value: any;\n}[];\n/**\n * Class for interacting with an Elasticsearch database. It extends the\n * VectorStore base class and provides methods for adding documents and\n * vectors to the Elasticsearch database, performing similarity searches,\n * deleting documents, and more.\n */\nexport declare class ElasticVectorSearch extends VectorStore {\n    FilterType: ElasticFilter;\n    private readonly client;\n    private readonly indexName;\n    private readonly engine;\n    private readonly similarity;\n    private readonly efConstruction;\n    private readonly m;\n    private readonly candidates;\n    _vectorstoreType(): string;\n    constructor(embeddings: EmbeddingsInterface, args: ElasticClientArgs);\n    /**\n     * Method to add documents to the Elasticsearch database. It first\n     * converts the documents to vectors using the embeddings, then adds the\n     * vectors to the database.\n     * @param documents The documents to add to the database.\n     * @param options Optional parameter that can contain the IDs for the documents.\n     * @returns A promise that resolves with the IDs of the added documents.\n     */\n    addDocuments(documents: Document[], options?: {\n        ids?: string[];\n    }): Promise<string[]>;\n    /**\n     * Method to add vectors to the Elasticsearch database. It ensures the\n     * index exists, then adds the vectors and their corresponding documents\n     * to the database.\n     * @param vectors The vectors to add to the database.\n     * @param documents The documents corresponding to the vectors.\n     * @param options Optional parameter that can contain the IDs for the documents.\n     * @returns A promise that resolves with the IDs of the added documents.\n     */\n    addVectors(vectors: number[][], documents: Document[], options?: {\n        ids?: string[];\n    }): Promise<string[]>;\n    /**\n     * Method to perform a similarity search in the Elasticsearch database\n     * using a vector. It returns the k most similar documents along with\n     * their similarity scores.\n     * @param query The query vector.\n     * @param k The number of most similar documents to return.\n     * @param filter Optional filter to apply to the search.\n     * @returns A promise that resolves with an array of tuples, where each tuple contains a Document and its similarity score.\n     */\n    similaritySearchVectorWithScore(query: number[], k: number, filter?: ElasticFilter): Promise<[Document, number][]>;\n    /**\n     * Method to delete documents from the Elasticsearch database.\n     * @param params Object containing the IDs of the documents to delete.\n     * @returns A promise that resolves when the deletion is complete.\n     */\n    delete(params: {\n        ids: string[];\n    }): Promise<void>;\n    /**\n     * Static method to create an ElasticVectorSearch instance from texts. It\n     * creates Document instances from the texts and their corresponding\n     * metadata, then calls the fromDocuments method to create the\n     * ElasticVectorSearch instance.\n     * @param texts The texts to create the ElasticVectorSearch instance from.\n     * @param metadatas The metadata corresponding to the texts.\n     * @param embeddings The embeddings to use for the documents.\n     * @param args The arguments to create the Elasticsearch client.\n     * @returns A promise that resolves with the created ElasticVectorSearch instance.\n     */\n    static fromTexts(texts: string[], metadatas: object[] | object, embeddings: EmbeddingsInterface, args: ElasticClientArgs): Promise<ElasticVectorSearch>;\n    /**\n     * Static method to create an ElasticVectorSearch instance from Document\n     * instances. It adds the documents to the Elasticsearch database, then\n     * returns the ElasticVectorSearch instance.\n     * @param docs The Document instances to create the ElasticVectorSearch instance from.\n     * @param embeddings The embeddings to use for the documents.\n     * @param dbConfig The configuration for the Elasticsearch database.\n     * @returns A promise that resolves with the created ElasticVectorSearch instance.\n     */\n    static fromDocuments(docs: Document[], embeddings: EmbeddingsInterface, dbConfig: ElasticClientArgs): Promise<ElasticVectorSearch>;\n    /**\n     * Static method to create an ElasticVectorSearch instance from an\n     * existing index in the Elasticsearch database. It checks if the index\n     * exists, then returns the ElasticVectorSearch instance if it does.\n     * @param embeddings The embeddings to use for the documents.\n     * @param dbConfig The configuration for the Elasticsearch database.\n     * @returns A promise that resolves with the created ElasticVectorSearch instance if the index exists, otherwise it throws an error.\n     */\n    static fromExistingIndex(embeddings: EmbeddingsInterface, dbConfig: ElasticClientArgs): Promise<ElasticVectorSearch>;\n    private ensureIndexExists;\n    private buildMetadataTerms;\n    /**\n     * Method to check if an index exists in the Elasticsearch database.\n     * @returns A promise that resolves with a boolean indicating whether the index exists.\n     */\n    doesIndexExist(): Promise<boolean>;\n    /**\n     * Method to delete an index from the Elasticsearch database if it exists.\n     * @returns A promise that resolves when the deletion is complete.\n     */\n    deleteIfExists(): Promise<void>;\n}\nexport {};\n"],"mappings":";;;;;;;;;;;;;KAQKI,gBAAAA;;;;AALgD,KAShDC,iBAAAA,GAJgB,SAAA,GAAA,aAAA,GAAA,QAAA;AAAA;AAIC;;UAIZC,mBAAAA,CACYF;EAAgB,SACZC,MAAAA,CAAAA,EADJD,gBACIC;EAAiB,SAAA,UAAA,CAAA,EAAjBA,iBAAiB;EAS1BE,SAAAA,CAAAA,CAAAA,EAAAA,MAAAA;EAAiB,SAAA,cAAA,CAAA,EAAA,MAAA;EAAA,SACbP,UAAAA,CAAAA,EAAAA,MAAAA;;AAEiC;AACrD;AAgBD;;AACgBQ,UArBCD,iBAAAA,CAqBDC;EAAa,SASDP,MAAAA,EA7BPD,MA6BOC;EAAmB,SAAQM,SAAAA,CAAAA,EAAAA,MAAAA;EAAiB,SAS5CJ,mBAAAA,CAAAA,EApCOG,mBAoCPH;;;;;;KA9BvBK,aAAAA,GAsDoFE,MAAAA,GAAAA;EAAO,KAQxFA,EAAAA,MAAAA;EAAO,QAYiET,EAAAA,MAAAA;EAAmB,KAAQM,EAAAA,GAAAA;CAAiB,EAAA;;;;;;;AAmBnFN,cAlFpBQ,mBAAAA,SAA4BP,WAAAA,CAkFRD;EAAmB,UAAYM,EAjFxDC,aAiFwDD;EAAiB,iBAAWE,MAAAA;EAAmB,iBAA3BC,SAAAA;EAAO,iBAO7EA,MAAAA;EAAO,iBAKPA,UAAAA;EAAO,iBA9FoBR,cAAAA;EAAW,iBAAA,CAAA;;;0BAUhCD,2BAA2BM;;;;;;;;;0BAS3BJ;;MAEpBO;;;;;;;;;;6CAUuCP;;MAEvCO;;;;;;;;;;uEAUiEF,gBAAgBE,SAASP;;;;;;;;MAQ1FO;;;;;;;;;;;;8EAYwET,2BAA2BM,oBAAoBG,QAAQD;;;;;;;;;;6BAUxGN,wBAAwBF,+BAA+BM,oBAAoBG,QAAQD;;;;;;;;;uCASzER,+BAA+BM,oBAAoBG,QAAQD;;;;;;;oBAO9EC;;;;;oBAKAA"}