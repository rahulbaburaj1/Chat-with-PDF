{"version":3,"file":"taskade.d.cts","names":["Document","BaseDocumentLoader","TaskadeLoaderParams","TaskadeProject","Array","TaskadeProjectLoader","personalAccessToken","projectId","Promise"],"sources":["../../../src/document_loaders/web/taskade.d.ts"],"sourcesContent":["import { Document } from \"@langchain/core/documents\";\nimport { BaseDocumentLoader } from \"@langchain/core/document_loaders/base\";\n/**\n * Interface representing the parameters for configuring the TaskadeLoader.\n * It includes optional properties for the personal access token and project id.\n */\nexport interface TaskadeLoaderParams {\n    personalAccessToken?: string;\n    projectId: string;\n}\n/**\n * Interface representing a Taskade project. It includes properties for the\n * id, text, parentId and completed.\n */\nexport interface TaskadeProject {\n    tasks: Array<{\n        id: string;\n        text: string;\n        parentId: string;\n        completed: boolean;\n    }>;\n}\n/**\n * Class representing a document loader for loading Taskade project. It\n * extends the BaseDocumentLoader and implements the TaskadeLoaderParams\n * interface. The constructor takes a config object as a parameter, which\n * contains the personal access token and project ID.\n * @example\n * ```typescript\n * const loader = new TaskadeProjectLoader({\n *   personalAccessToken: \"TASKADE_PERSONAL_ACCESS_TOKEN\",\n *   projectId: \"projectId\",\n * });\n * const docs = await loader.load();\n * ```\n */\nexport declare class TaskadeProjectLoader extends BaseDocumentLoader implements TaskadeLoaderParams {\n    readonly personalAccessToken?: string;\n    readonly projectId: string;\n    private headers;\n    constructor({ personalAccessToken, projectId }: TaskadeLoaderParams);\n    private getTaskadeProject;\n    /**\n     * Fetches the Taskade project using the Taskade API, creates a Document instance\n     * with the JSON representation of the file as the page content and the\n     * API URL as the metadata, and returns it.\n     * @returns A Promise that resolves to an array of Document instances.\n     */\n    load(): Promise<Document[]>;\n}\n"],"mappings":";;;;;;;;;;;UAMiBE,mBAAAA;;;;;AAAjB;AAQA;AAsBA;AAAyC,UAtBxBC,cAAAA,CAsBwB;EAAA,KAIvBG,EAzBPF,KAyBOE,CAAAA;IAAqBC,EAAAA,EAAAA,MAAAA;IAAaL,IAAAA,EAAAA,MAAAA;IAQhCF,QAAAA,EAAAA,MAAAA;IAARQ,SAAAA,EAAAA,OAAAA;EAAO,CAAA,CAAA;;AAZgF;;;;;;;;;;;;;;cAA9EH,oBAAAA,SAA6BJ,kBAAAA,YAA8BC;;;;;;;KAI5BA;;;;;;;;UAQxCM,QAAQR"}