{"version":3,"file":"ibm.cjs","names":["BaseDocumentCompressor","fields: WatsonxInputRerank & WatsonxAuth","authenticateAndSetInstance","options?: Partial<WatsonxInputRerank>","documents: DocumentInterface[]","query: string","AsyncCaller","documents: Array<\n      DocumentInterface | string | Record<\"pageContent\", string>\n    >"],"sources":["../../src/document_compressors/ibm.ts"],"sourcesContent":["import { DocumentInterface } from \"@langchain/core/documents\";\nimport { BaseDocumentCompressor } from \"@langchain/core/retrievers/document_compressors\";\nimport { WatsonXAI } from \"@ibm-cloud/watsonx-ai\";\nimport { AsyncCaller } from \"@langchain/core/utils/async_caller\";\nimport { WatsonxAuth, WatsonxParams } from \"../types/ibm.js\";\nimport { authenticateAndSetInstance } from \"../utils/ibm.js\";\n\nexport interface WatsonxInputRerank extends Omit<WatsonxParams, \"idOrName\"> {\n  truncateInputTokens?: number;\n  returnOptions?: {\n    topN?: number;\n    inputs?: boolean;\n  };\n}\nexport class WatsonxRerank\n  extends BaseDocumentCompressor\n  implements WatsonxInputRerank\n{\n  maxRetries = 0;\n\n  version = \"2024-05-31\";\n\n  truncateInputTokens?: number | undefined;\n\n  returnOptions?:\n    | { topN?: number; inputs?: boolean; query?: boolean }\n    | undefined;\n\n  model: string;\n\n  spaceId?: string | undefined;\n\n  projectId?: string | undefined;\n\n  maxConcurrency?: number | undefined;\n\n  serviceUrl: string;\n\n  service: WatsonXAI;\n\n  constructor(fields: WatsonxInputRerank & WatsonxAuth) {\n    super();\n    if (fields.projectId && fields.spaceId)\n      throw new Error(\"Maximum 1 id type can be specified per instance\");\n\n    if (!fields.projectId && !fields.spaceId)\n      throw new Error(\n        \"No id specified! At least id of 1 type has to be specified\"\n      );\n    this.model = fields.model;\n    this.serviceUrl = fields.serviceUrl;\n    this.version = fields.version;\n    this.projectId = fields?.projectId;\n    this.spaceId = fields?.spaceId;\n    this.maxRetries = fields.maxRetries ?? this.maxRetries;\n    this.maxConcurrency = fields.maxConcurrency;\n    this.truncateInputTokens = fields.truncateInputTokens;\n    this.returnOptions = fields.returnOptions;\n\n    const {\n      watsonxAIApikey,\n      watsonxAIAuthType,\n      watsonxAIBearerToken,\n      watsonxAIUsername,\n      watsonxAIPassword,\n      watsonxAIUrl,\n      disableSSL,\n      version,\n      serviceUrl,\n    } = fields;\n\n    const auth = authenticateAndSetInstance({\n      watsonxAIApikey,\n      watsonxAIAuthType,\n      watsonxAIBearerToken,\n      watsonxAIUsername,\n      watsonxAIPassword,\n      watsonxAIUrl,\n      disableSSL,\n      version,\n      serviceUrl,\n    });\n    if (auth) this.service = auth;\n    else throw new Error(\"You have not provided one type of authentication\");\n  }\n\n  scopeId() {\n    if (this.projectId)\n      return { projectId: this.projectId, modelId: this.model };\n    else return { spaceId: this.spaceId, modelId: this.model };\n  }\n\n  invocationParams(options?: Partial<WatsonxInputRerank>) {\n    return {\n      truncate_input_tokens:\n        options?.truncateInputTokens ?? this.truncateInputTokens,\n      return_options: {\n        top_n: options?.returnOptions?.topN ?? this.returnOptions?.topN,\n        inputs: options?.returnOptions?.inputs ?? this.returnOptions?.inputs,\n      },\n    };\n  }\n\n  async compressDocuments(\n    documents: DocumentInterface[],\n    query: string\n  ): Promise<DocumentInterface[]> {\n    const caller = new AsyncCaller({\n      maxConcurrency: this.maxConcurrency,\n      maxRetries: this.maxRetries,\n    });\n    const inputs = documents.map((document) => ({\n      text: document.pageContent,\n    }));\n    const { result } = await caller.call(() =>\n      this.service.textRerank({\n        ...this.scopeId(),\n        inputs,\n        query,\n        parameters: {\n          truncate_input_tokens: this.truncateInputTokens,\n        },\n      })\n    );\n    const resultDocuments = result.results.map(({ index, score }) => {\n      const rankedDocument = documents[index];\n      rankedDocument.metadata.relevanceScore = score;\n      return rankedDocument;\n    });\n    return resultDocuments;\n  }\n\n  async rerank(\n    documents: Array<\n      DocumentInterface | string | Record<\"pageContent\", string>\n    >,\n    query: string,\n    options?: Partial<WatsonxInputRerank>\n  ): Promise<Array<{ index: number; relevanceScore: number; input?: string }>> {\n    const inputs = documents.map((document) => {\n      if (typeof document === \"string\") {\n        return { text: document };\n      }\n      return { text: document.pageContent };\n    });\n\n    const caller = new AsyncCaller({\n      maxConcurrency: this.maxConcurrency,\n      maxRetries: this.maxRetries,\n    });\n    const { result } = await caller.call(() =>\n      this.service.textRerank({\n        ...this.scopeId(),\n        inputs,\n        query,\n        parameters: this.invocationParams(options),\n      })\n    );\n    const response = result.results.map((document) => {\n      return document?.input\n        ? {\n            index: document.index,\n            relevanceScore: document.score,\n            input: document?.input.text,\n          }\n        : {\n            index: document.index,\n            relevanceScore: document.score,\n          };\n    });\n    return response;\n  }\n}\n"],"mappings":";;;;;;;;AAcA,IAAa,gBAAb,cACUA,wEAEV;CACE,aAAa;CAEb,UAAU;CAEV;CAEA;CAIA;CAEA;CAEA;CAEA;CAEA;CAEA;CAEA,YAAYC,QAA0C;EACpD,OAAO;AACP,MAAI,OAAO,aAAa,OAAO,QAC7B,OAAM,IAAI,MAAM;AAElB,MAAI,CAAC,OAAO,aAAa,CAAC,OAAO,QAC/B,OAAM,IAAI,MACR;EAEJ,KAAK,QAAQ,OAAO;EACpB,KAAK,aAAa,OAAO;EACzB,KAAK,UAAU,OAAO;EACtB,KAAK,YAAY,QAAQ;EACzB,KAAK,UAAU,QAAQ;EACvB,KAAK,aAAa,OAAO,cAAc,KAAK;EAC5C,KAAK,iBAAiB,OAAO;EAC7B,KAAK,sBAAsB,OAAO;EAClC,KAAK,gBAAgB,OAAO;EAE5B,MAAM,EACJ,iBACA,mBACA,sBACA,mBACA,mBACA,cACA,YACA,SACA,YACD,GAAG;EAEJ,MAAM,OAAOC,uCAA2B;GACtC;GACA;GACA;GACA;GACA;GACA;GACA;GACA;GACA;EACD,EAAC;AACF,MAAI,MAAM,KAAK,UAAU;MACpB,OAAM,IAAI,MAAM;CACtB;CAED,UAAU;AACR,MAAI,KAAK,UACP,QAAO;GAAE,WAAW,KAAK;GAAW,SAAS,KAAK;EAAO;MACtD,QAAO;GAAE,SAAS,KAAK;GAAS,SAAS,KAAK;EAAO;CAC3D;CAED,iBAAiBC,SAAuC;AACtD,SAAO;GACL,uBACE,SAAS,uBAAuB,KAAK;GACvC,gBAAgB;IACd,OAAO,SAAS,eAAe,QAAQ,KAAK,eAAe;IAC3D,QAAQ,SAAS,eAAe,UAAU,KAAK,eAAe;GAC/D;EACF;CACF;CAED,MAAM,kBACJC,WACAC,OAC8B;EAC9B,MAAM,SAAS,IAAIC,gDAAY;GAC7B,gBAAgB,KAAK;GACrB,YAAY,KAAK;EAClB;EACD,MAAM,SAAS,UAAU,IAAI,CAAC,cAAc,EAC1C,MAAM,SAAS,YAChB,GAAE;EACH,MAAM,EAAE,QAAQ,GAAG,MAAM,OAAO,KAAK,MACnC,KAAK,QAAQ,WAAW;GACtB,GAAG,KAAK,SAAS;GACjB;GACA;GACA,YAAY,EACV,uBAAuB,KAAK,oBAC7B;EACF,EAAC,CACH;EACD,MAAM,kBAAkB,OAAO,QAAQ,IAAI,CAAC,EAAE,OAAO,OAAO,KAAK;GAC/D,MAAM,iBAAiB,UAAU;GACjC,eAAe,SAAS,iBAAiB;AACzC,UAAO;EACR,EAAC;AACF,SAAO;CACR;CAED,MAAM,OACJC,WAGAF,OACAF,SAC2E;EAC3E,MAAM,SAAS,UAAU,IAAI,CAAC,aAAa;AACzC,OAAI,OAAO,aAAa,SACtB,QAAO,EAAE,MAAM,SAAU;AAE3B,UAAO,EAAE,MAAM,SAAS,YAAa;EACtC,EAAC;EAEF,MAAM,SAAS,IAAIG,gDAAY;GAC7B,gBAAgB,KAAK;GACrB,YAAY,KAAK;EAClB;EACD,MAAM,EAAE,QAAQ,GAAG,MAAM,OAAO,KAAK,MACnC,KAAK,QAAQ,WAAW;GACtB,GAAG,KAAK,SAAS;GACjB;GACA;GACA,YAAY,KAAK,iBAAiB,QAAQ;EAC3C,EAAC,CACH;EACD,MAAM,WAAW,OAAO,QAAQ,IAAI,CAAC,aAAa;AAChD,UAAO,UAAU,QACb;IACE,OAAO,SAAS;IAChB,gBAAgB,SAAS;IACzB,OAAO,UAAU,MAAM;GACxB,IACD;IACE,OAAO,SAAS;IAChB,gBAAgB,SAAS;GAC1B;EACN,EAAC;AACF,SAAO;CACR;AACF"}