{"version":3,"file":"faiss.d.cts","names":["IndexFlatL2","NameRegistry","Parser","EmbeddingsInterface","SaveableVectorStore","Document","SynchronousInMemoryDocstore","FaissLibArgs","Record","FaissStore","Promise"],"sources":["../../src/vectorstores/faiss.d.ts"],"sourcesContent":["import type { IndexFlatL2 } from \"faiss-node\";\nimport type { NameRegistry, Parser } from \"pickleparser\";\nimport type { EmbeddingsInterface } from \"@langchain/core/embeddings\";\nimport { SaveableVectorStore } from \"@langchain/core/vectorstores\";\nimport { Document } from \"@langchain/core/documents\";\nimport { SynchronousInMemoryDocstore } from \"@langchain/classic/stores/doc/in_memory\";\n/**\n * Interface for the arguments required to initialize a FaissStore\n * instance.\n */\nexport interface FaissLibArgs {\n    docstore?: SynchronousInMemoryDocstore;\n    index?: IndexFlatL2;\n    mapping?: Record<number, string>;\n}\n/**\n * A class that wraps the FAISS (Facebook AI Similarity Search) vector\n * database for efficient similarity search and clustering of dense\n * vectors.\n */\nexport declare class FaissStore extends SaveableVectorStore {\n    _index?: IndexFlatL2;\n    _mapping: Record<number, string>;\n    docstore: SynchronousInMemoryDocstore;\n    args: FaissLibArgs;\n    _vectorstoreType(): string;\n    getMapping(): Record<number, string>;\n    getDocstore(): SynchronousInMemoryDocstore;\n    constructor(embeddings: EmbeddingsInterface, args: FaissLibArgs);\n    /**\n     * Adds an array of Document objects to the store.\n     * @param documents An array of Document objects.\n     * @returns A Promise that resolves when the documents have been added.\n     */\n    addDocuments(documents: Document[], options?: {\n        ids?: string[];\n    }): Promise<string[]>;\n    get index(): IndexFlatL2;\n    private set index(value);\n    /**\n     * Adds an array of vectors and their corresponding Document objects to\n     * the store.\n     * @param vectors An array of vectors.\n     * @param documents An array of Document objects corresponding to the vectors.\n     * @returns A Promise that resolves with an array of document IDs when the vectors and documents have been added.\n     */\n    addVectors(vectors: number[][], documents: Document[], options?: {\n        ids?: string[];\n    }): Promise<string[]>;\n    /**\n     * Performs a similarity search in the vector store using a query vector\n     * and returns the top k results along with their scores.\n     * @param query A query vector.\n     * @param k The number of top results to return.\n     * @returns A Promise that resolves with an array of tuples, each containing a Document and its corresponding score.\n     */\n    similaritySearchVectorWithScore(query: number[], k: number): Promise<[Document<Record<string, any>>, number][]>;\n    /**\n     * Saves the current state of the FaissStore to a specified directory.\n     * @param directory The directory to save the state to.\n     * @returns A Promise that resolves when the state has been saved.\n     */\n    save(directory: string): Promise<void>;\n    /**\n     * Method to delete documents.\n     * @param params Object containing the IDs of the documents to delete.\n     * @returns A promise that resolves when the deletion is complete.\n     */\n    delete(params: {\n        ids: string[];\n    }): Promise<void>;\n    /**\n     * Merges the current FaissStore with another FaissStore.\n     * @param targetIndex The FaissStore to merge with.\n     * @returns A Promise that resolves with an array of document IDs when the merge is complete.\n     */\n    mergeFrom(targetIndex: FaissStore): Promise<string[]>;\n    /**\n     * Loads a FaissStore from a specified directory.\n     * @param directory The directory to load the FaissStore from.\n     * @param embeddings An Embeddings object.\n     * @returns A Promise that resolves with a new FaissStore instance.\n     */\n    static load(directory: string, embeddings: EmbeddingsInterface): Promise<FaissStore>;\n    static loadFromPython(directory: string, embeddings: EmbeddingsInterface): Promise<FaissStore>;\n    /**\n     * Creates a new FaissStore from an array of texts, their corresponding\n     * metadata, and an Embeddings object.\n     * @param texts An array of texts.\n     * @param metadatas An array of metadata corresponding to the texts, or a single metadata object to be used for all texts.\n     * @param embeddings An Embeddings object.\n     * @param dbConfig An optional configuration object for the document store.\n     * @returns A Promise that resolves with a new FaissStore instance.\n     */\n    static fromTexts(texts: string[], metadatas: object[] | object, embeddings: EmbeddingsInterface, dbConfig?: {\n        docstore?: SynchronousInMemoryDocstore;\n    }): Promise<FaissStore>;\n    /**\n     * Creates a new FaissStore from an array of Document objects and an\n     * Embeddings object.\n     * @param docs An array of Document objects.\n     * @param embeddings An Embeddings object.\n     * @param dbConfig An optional configuration object for the document store.\n     * @returns A Promise that resolves with a new FaissStore instance.\n     */\n    static fromDocuments(docs: Document[], embeddings: EmbeddingsInterface, dbConfig?: {\n        docstore?: SynchronousInMemoryDocstore;\n    }): Promise<FaissStore>;\n    /**\n     * Creates a new FaissStore from an existing FaissStore and an Embeddings\n     * object.\n     * @param targetIndex An existing FaissStore.\n     * @param embeddings An Embeddings object.\n     * @param dbConfig An optional configuration object for the document store.\n     * @returns A Promise that resolves with a new FaissStore instance.\n     */\n    static fromIndex(targetIndex: FaissStore, embeddings: EmbeddingsInterface, dbConfig?: {\n        docstore?: SynchronousInMemoryDocstore;\n    }): Promise<FaissStore>;\n    static importFaiss(): Promise<{\n        IndexFlatL2: typeof IndexFlatL2;\n    }>;\n    static importPickleparser(): Promise<{\n        Parser: typeof Parser;\n        NameRegistry: typeof NameRegistry;\n    }>;\n}\n"],"mappings":";;;;;;;;;;;;;;;UAUiBO,YAAAA;aACFD;UACHN;YACEQ;AAHd;;;;;AAGoB;AAOCC,cAAAA,UAAAA,SAAmBL,mBAAAA,CAAT;EAAA,MAAA,CAAA,EAClBJ,WADkB;EAAA,QAClBA,EACCQ,MADDR,CAAAA,MAAAA,EAAAA,MAAAA,CAAAA;EAAW,QACVQ,EACAF,2BADAE;EAAM,IACNF,EACJC,YADID;EAA2B,gBAC/BC,CAAAA,CAAAA,EAAAA,MAAAA;EAAY,UAEJC,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,MAAAA,EAAAA,MAAAA,CAAAA;EAAM,WACLF,CAAAA,CAAAA,EAAAA,2BAAAA;EAA2B,WAClBH,CAAAA,UAAAA,EAAAA,mBAAAA,EAAAA,IAAAA,EAA2BI,YAA3BJ;EAAmB;;;;;EAkBQ,YAE/CO,CAAAA,SAAAA,EAdoBL,QAcpBK,EAAAA,EAAAA,OAQiF,CARjFA,EAAAA;IAQ2EF,GAAAA,CAAAA,EAAAA,MAAAA,EAAAA;EAAM,CAAA,CAAA,EApBjFE,OAoBkEL,CAAAA,MAAAA,EAAAA,CAAAA;EAAQ,IAAjBK,KAAAA,CAAAA,CAAAA,EAnBhDV,WAmBgDU;EAAO,YAM3CA,KAAAA,CAAAA,KAAAA;EAAO;;;;;;;EAsBwC,UAAWD,CAAAA,OAAAA,EAAAA,MAAAA,EAAAA,EAAAA,EAAAA,SAAAA,EAtCxCJ,QAsCwCI,EAAAA,EAAAA,OAAD,CAACA,EAAAA;IAARC,GAAAA,CAAAA,EAAAA,MAAAA,EAAAA;EAAO,CAAA,CAAA,EApC9EA,OA8CwEP,CAAAA,MAAAA,EAAAA,CAAAA;EAAmB;;;;;;;EAazE,+BAAlBO,CAAAA,KAAAA,EAAAA,MAAAA,EAAAA,EAAAA,CAAAA,EAAAA,MAAAA,CAAAA,EAnDyDA,OAmDzDA,CAAAA,CAnDkEL,QAmDlEK,CAnD2EF,MAmD3EE,CAAAA,MAAAA,EAAAA,GAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,EAAAA,CAAAA;EAAO;;;;;EAWA,IAEaV,CAAAA,SAAAA,EAAAA,MAAAA,CAAAA,EA1DCU,OA0DDV,CAAAA,IAAAA,CAAAA;EAAW;;;;;EApGoB,MAAA,CAAA,MAAA,EAAA;;MAkDnDU;;;;;;yBAMmBD,aAAaC;;;;;;;6CAOOP,sBAAsBO,QAAQD;uDACpBN,sBAAsBO,QAAQD;;;;;;;;;;8EAUPN;eAC7DG;MACXI,QAAQD;;;;;;;;;6BASeJ,wBAAwBF;eACpCG;MACXI,QAAQD;;;;;;;;;gCASkBA,wBAAwBN;eACvCG;MACXI,QAAQD;wBACUC;wBACEV;;+BAEKU;mBACVR;yBACMD"}