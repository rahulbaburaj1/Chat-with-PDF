{"version":3,"file":"base.d.ts","names":["Embeddings","EmbeddingsParams","sign","TencentHunyuanEmbeddingsParams","TencentHunyuanEmbeddingsParamsWithSign","TencentHunyuanEmbeddings","Promise"],"sources":["../../../src/embeddings/tencent_hunyuan/base.d.ts"],"sourcesContent":["import { Embeddings, type EmbeddingsParams } from \"@langchain/core/embeddings\";\nimport { sign } from \"../../utils/tencent_hunyuan/common.js\";\n/**\n * Interface that extends EmbeddingsParams and defines additional\n * parameters specific to the TencentHunyuanEmbeddingsParams class.\n */\nexport interface TencentHunyuanEmbeddingsParams extends EmbeddingsParams {\n    /**\n     * Tencent Cloud API Host.\n     * @default \"hunyuan.tencentcloudapi.com\"\n     */\n    host?: string;\n    /**\n     * SecretID to use when making requests, can be obtained from https://console.cloud.tencent.com/cam/capi.\n     * Defaults to the value of `TENCENT_SECRET_ID` environment variable.\n     */\n    tencentSecretId?: string;\n    /**\n     * Secret key to use when making requests, can be obtained from https://console.cloud.tencent.com/cam/capi.\n     * Defaults to the value of `TENCENT_SECRET_KEY` environment variable.\n     */\n    tencentSecretKey?: string;\n}\n/**\n * Interface that extends EmbeddingsParams and defines additional\n * parameters specific to the TencentHunyuanEmbeddingsParams class.\n */\ninterface TencentHunyuanEmbeddingsParamsWithSign extends TencentHunyuanEmbeddingsParams {\n    /**\n     * Tencent Cloud API v3 sign method.\n     */\n    sign: sign;\n}\n/**\n * Class for generating embeddings using the Tencent Hunyuan API.\n */\nexport declare class TencentHunyuanEmbeddings extends Embeddings implements TencentHunyuanEmbeddingsParams {\n    tencentSecretId?: string;\n    tencentSecretKey?: string;\n    host: string;\n    sign: sign;\n    constructor(fields?: TencentHunyuanEmbeddingsParamsWithSign);\n    private embeddingWithRetry;\n    /**\n     * Method to generate an embedding for a single document. Calls the\n     * embeddingWithRetry method with the document as the input.\n     * @param {string} text Document to generate an embedding for.\n     * @returns {Promise<number[]>} Promise that resolves to an embedding for the document.\n     */\n    embedQuery(text: string): Promise<number[]>;\n    /**\n     * Method that takes an array of documents as input and returns a promise\n     * that resolves to a 2D array of embeddings for each document. It calls\n     * the embedQuery method for each document in the array.\n     * @param documents Array of documents for which to generate embeddings.\n     * @returns Promise that resolves to a 2D array of embeddings for each input document.\n     */\n    embedDocuments(documents: string[]): Promise<number[][]>;\n}\nexport {};\n"],"mappings":";;;;;;;AAMA;AAgBC;AAK+C,UArB/BG,8BAAAA,SAAuCF,gBAqBR,CAAA;EAAA;;AAAuC;AASvF;EAA6C,IAAA,CAAA,EAAA,MAAA;EAAA;;;;EAqBG,eArBMD,CAAAA,EAAAA,MAAAA;EAAU;AAA0C;;;;;;;;;UAThGI,sCAAAA,SAA+CD;;;;QAI/CD;;;;;cAKWG,wBAAAA,SAAiCL,UAAAA,YAAsBG;;;;QAIlED;uBACeE;;;;;;;;4BAQKE;;;;;;;;uCAQWA"}