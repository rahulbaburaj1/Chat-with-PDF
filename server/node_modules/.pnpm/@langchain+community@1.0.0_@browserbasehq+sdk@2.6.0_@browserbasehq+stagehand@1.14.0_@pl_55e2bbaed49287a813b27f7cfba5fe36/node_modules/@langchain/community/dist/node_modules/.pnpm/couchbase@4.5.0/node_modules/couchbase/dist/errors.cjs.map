{"version":3,"file":"errors.cjs","names":[],"sources":["../../../../../../../../../node_modules/.pnpm/couchbase@4.5.0/node_modules/couchbase/dist/errors.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DocumentNotJsonError = exports.ValueInvalidError = exports.ValueTooDeepError = exports.PathTooDeepError = exports.PathTooBigError = exports.PathInvalidError = exports.PathMismatchError = exports.PathNotFoundError = exports.MutationLostError = exports.DurableWriteReCommitInProgressError = exports.DurableWriteInProgressError = exports.DurabilityAmbiguousError = exports.DurabilityImpossibleError = exports.DurabilityLevelNotAvailableError = exports.ValueNotJsonError = exports.DocumentExistsError = exports.ValueTooLargeError = exports.DocumentNotLockedError = exports.DocumentLockedError = exports.DocumentUnretrievableError = exports.DocumentNotFoundError = exports.IndexExistsError = exports.QuotaLimitedError = exports.RateLimitedError = exports.IndexNotFoundError = exports.ScopeNotFoundError = exports.FeatureNotAvailableError = exports.UnambiguousTimeoutError = exports.AmbiguousTimeoutError = exports.UnsupportedOperationError = exports.DecodingFailureError = exports.EncodingFailureError = exports.CollectionNotFoundError = exports.BucketNotFoundError = exports.CasMismatchError = exports.ParsingFailureError = exports.TemporaryFailureError = exports.AuthenticationFailureError = exports.InternalServerFailureError = exports.ServiceNotAvailableError = exports.InvalidArgumentError = exports.RequestCanceledError = exports.TimeoutError = exports.InvalidDurabilityReplicateToLevel = exports.InvalidDurabilityPersistToLevel = exports.InvalidDurabilityLevel = exports.NeedOpenBucketError = exports.ClusterClosedError = exports.ConnectionClosedError = exports.CouchbaseError = void 0;\nexports.TransactionCommitAmbiguousError = exports.TransactionExpiredError = exports.TransactionFailedError = exports.TransactionOperationFailedError = exports.EventingFunctionPausedError = exports.EventingFunctionDeployedError = exports.EventingFunctionNotBootstrappedError = exports.EventingFunctionIdenticalKeyspaceError = exports.EventingFunctionCompilationFailureError = exports.EventingFunctionNotDeployedError = exports.EventingFunctionNotFoundError = exports.BucketNotFlushableError = exports.UserExistsError = exports.BucketExistsError = exports.GroupNotFoundError = exports.UserNotFoundError = exports.ScopeExistsError = exports.CollectionExistsError = exports.DesignDocumentNotFoundError = exports.ViewNotFoundError = exports.LinkExistsError = exports.LinkNotFoundError = exports.DataverseExistsError = exports.DatasetExistsError = exports.DataverseNotFoundError = exports.DatasetNotFoundError = exports.JobQueueFullError = exports.CompilationFailureError = exports.IndexNotReadyError = exports.DmlFailureError = exports.PreparedStatementFailureError = exports.IndexFailureError = exports.PlanningFailureError = exports.PathExistsError = exports.DeltaInvalidError = exports.NumberTooBigError = void 0;\nrequire(\"./errorcontexts\");\n/**\n * A generic base error that all errors inherit.  Exposes the cause and\n * context of the error to enable easier debugging.\n *\n * @category Error Handling\n */\nclass CouchbaseError extends Error {\n    constructor(message, cause, context) {\n        super(message);\n        this.name = this.constructor.name;\n        this.stack = undefined;\n        this.cause = cause;\n        this.context = context;\n    }\n}\nexports.CouchbaseError = CouchbaseError;\n/**\n * Indicates that an operation was performed after a connection was closed.\n *\n * @category Error Handling\n */\nclass ConnectionClosedError extends CouchbaseError {\n    constructor() {\n        super('The connection has been closed.');\n    }\n}\nexports.ConnectionClosedError = ConnectionClosedError;\n/**\n * Indicates that an operation was performed after the cluster object was explicitly\n * closed by the user.\n *\n * @category Error Handling\n */\nclass ClusterClosedError extends CouchbaseError {\n    constructor() {\n        super('The parent cluster object has been closed.');\n    }\n}\nexports.ClusterClosedError = ClusterClosedError;\n/**\n * Indicates that an cluster-level operation could not be performed as no buckets\n * were open.  This occurs with pre-6.0 clusters which were not able to fetch cluster\n * topology without knowing the name of a bucket.\n *\n * @category Error Handling\n */\nclass NeedOpenBucketError extends CouchbaseError {\n    constructor() {\n        super('You must have one open bucket before you can perform queries.');\n    }\n}\nexports.NeedOpenBucketError = NeedOpenBucketError;\n/**\n * Indicates that the specific durability level was invalid.\n *\n * @category Error Handling\n */\nclass InvalidDurabilityLevel extends CouchbaseError {\n    constructor() {\n        super('An invalid durability level was specified.');\n    }\n}\nexports.InvalidDurabilityLevel = InvalidDurabilityLevel;\n/**\n * Indicates that the specific durabilityPersistTo level was invalid.\n *\n * @category Error Handling\n */\nclass InvalidDurabilityPersistToLevel extends CouchbaseError {\n    constructor() {\n        super('An invalid durability PersistTo level was specified.');\n    }\n}\nexports.InvalidDurabilityPersistToLevel = InvalidDurabilityPersistToLevel;\n/**\n * Indicates that the specific durabilityReplicateTo level was invalid.\n *\n * @category Error Handling\n */\nclass InvalidDurabilityReplicateToLevel extends CouchbaseError {\n    constructor() {\n        super('An invalid durability ReplicateTo level was specified.');\n    }\n}\nexports.InvalidDurabilityReplicateToLevel = InvalidDurabilityReplicateToLevel;\n/**\n * Indicates that the operation timed out.\n *\n * @category Error Handling\n */\nclass TimeoutError extends CouchbaseError {\n    constructor(cause, context) {\n        super('timeout', cause, context);\n    }\n}\nexports.TimeoutError = TimeoutError;\n/**\n * Indicates that the request was explicitly cancelled.\n *\n * @category Error Handling\n */\nclass RequestCanceledError extends CouchbaseError {\n    constructor(cause, context) {\n        super('request canceled', cause, context);\n    }\n}\nexports.RequestCanceledError = RequestCanceledError;\n/**\n * Indicates that one of the passed arguments was invalid.\n *\n * @category Error Handling\n */\nclass InvalidArgumentError extends CouchbaseError {\n    constructor(cause, context) {\n        super('invalid argument', cause, context);\n    }\n}\nexports.InvalidArgumentError = InvalidArgumentError;\n/**\n * Indicates that the operation requires a service which was not available.\n * For instance, attempting to perform a query without the query service\n * being enabled.\n *\n * @category Error Handling\n */\nclass ServiceNotAvailableError extends CouchbaseError {\n    constructor(cause, context) {\n        super('service not available', cause, context);\n    }\n}\nexports.ServiceNotAvailableError = ServiceNotAvailableError;\n/**\n * Indicates some form of internal error occured on the server and the\n * request could not be completed.\n *\n * @category Error Handling\n */\nclass InternalServerFailureError extends CouchbaseError {\n    constructor(cause, context) {\n        super('internal server failure', cause, context);\n    }\n}\nexports.InternalServerFailureError = InternalServerFailureError;\n/**\n * Indicates that an error occurred authenticating the user to the cluster.\n *\n * @category Error Handling\n */\nclass AuthenticationFailureError extends CouchbaseError {\n    constructor(cause, context) {\n        super('authentication failure', cause, context);\n    }\n}\nexports.AuthenticationFailureError = AuthenticationFailureError;\n/**\n * Indicates that a temporary failure occured, attempting the same operation\n * in the future may succeed.\n *\n * @category Error Handling\n */\nclass TemporaryFailureError extends CouchbaseError {\n    constructor(cause, context) {\n        super('temporary failure', cause, context);\n    }\n}\nexports.TemporaryFailureError = TemporaryFailureError;\n/**\n * Indicates that a parsing failure occured.\n *\n * @category Error Handling\n */\nclass ParsingFailureError extends CouchbaseError {\n    constructor(cause, context) {\n        super('parsing failure', cause, context);\n    }\n}\nexports.ParsingFailureError = ParsingFailureError;\n/**\n * Indicates that a CAS mismatch occurred.  This means that the document\n * has changed since the last access and should be fetched again before\n * attempting to make further changes.\n *\n * @category Error Handling\n */\nclass CasMismatchError extends CouchbaseError {\n    constructor(cause, context) {\n        super('cas mismatch', cause, context);\n    }\n}\nexports.CasMismatchError = CasMismatchError;\n/**\n * Indicates that the bucket being referenced does not exist.\n *\n * @category Error Handling\n */\nclass BucketNotFoundError extends CouchbaseError {\n    constructor(cause, context) {\n        super('bucket not found', cause, context);\n    }\n}\nexports.BucketNotFoundError = BucketNotFoundError;\n/**\n * Indicates that the collection being referenced does not exist.\n *\n * @category Error Handling\n */\nclass CollectionNotFoundError extends CouchbaseError {\n    constructor(cause, context) {\n        super('collection not found', cause, context);\n    }\n}\nexports.CollectionNotFoundError = CollectionNotFoundError;\n/**\n * Indicates that there was a failure during encoding.\n *\n * @category Error Handling\n */\nclass EncodingFailureError extends CouchbaseError {\n    constructor(cause, context) {\n        super('encoding failure', cause, context);\n    }\n}\nexports.EncodingFailureError = EncodingFailureError;\n/**\n * Indicates that there was a failure during decoding.\n *\n * @category Error Handling\n */\nclass DecodingFailureError extends CouchbaseError {\n    constructor(cause, context) {\n        super('decoding failure', cause, context);\n    }\n}\nexports.DecodingFailureError = DecodingFailureError;\n/**\n * Indicates that an operation which is not supported was executed.\n *\n * @category Error Handling\n */\nclass UnsupportedOperationError extends CouchbaseError {\n    constructor(cause, context) {\n        super('unsupported operation', cause, context);\n    }\n}\nexports.UnsupportedOperationError = UnsupportedOperationError;\n/**\n * Indicates that an ambiguous timeout has occured.  The outcome of the\n * operation is unknown, and it is possible that it completed after the\n * generation of this error.\n *\n * @category Error Handling\n */\nclass AmbiguousTimeoutError extends TimeoutError {\n    constructor(cause, context) {\n        super(cause, context);\n        this.message = 'ambiguous timeout';\n    }\n}\nexports.AmbiguousTimeoutError = AmbiguousTimeoutError;\n/**\n * Indicates an unambiguous timeout has occurred.  The outcome of the\n * operation is objective failure and it is known to have not completed.\n *\n * @category Error Handling\n */\nclass UnambiguousTimeoutError extends TimeoutError {\n    constructor(cause, context) {\n        super(cause, context);\n        this.message = 'unambiguous timeout';\n    }\n}\nexports.UnambiguousTimeoutError = UnambiguousTimeoutError;\n/**\n * Indicates a feature which is not available was used.  This primarily can\n * occur if you attempt to perform a query when no query services are enabled\n * on the cluster, or if a newer server feature which is not available in the\n * connected server version is used.\n *\n * @category Error Handling\n */\nclass FeatureNotAvailableError extends CouchbaseError {\n    constructor(cause, context) {\n        super('feature not available', cause, context);\n    }\n}\nexports.FeatureNotAvailableError = FeatureNotAvailableError;\n/**\n * Indicates that the referenced scope does not exist.\n *\n * @category Error Handling\n */\nclass ScopeNotFoundError extends CouchbaseError {\n    constructor(cause, context) {\n        super('scope not found', cause, context);\n    }\n}\nexports.ScopeNotFoundError = ScopeNotFoundError;\n/**\n * Indicates that the referenced index does not exist.\n *\n * @category Error Handling\n */\nclass IndexNotFoundError extends CouchbaseError {\n    constructor(cause, context) {\n        super('index not found', cause, context);\n    }\n}\nexports.IndexNotFoundError = IndexNotFoundError;\n/**\n * Indicates that a rate limit was exceeded while attempting to\n * execute the operation.\n *\n * @category Error Handling\n */\nclass RateLimitedError extends CouchbaseError {\n    constructor(cause, context) {\n        super('operation was rate limited', cause, context);\n    }\n}\nexports.RateLimitedError = RateLimitedError;\n/**\n * Indicates that a quota limit was exceeded while attempting to\n * execute the operation.\n *\n * @category Error Handling\n */\nclass QuotaLimitedError extends CouchbaseError {\n    constructor(cause, context) {\n        super('operation was quota limited', cause, context);\n    }\n}\nexports.QuotaLimitedError = QuotaLimitedError;\n/**\n * Indicates that the referenced index already existed, but was expected\n * to not yet exist for the operation.\n *\n * @category Error Handling\n */\nclass IndexExistsError extends CouchbaseError {\n    constructor(cause, context) {\n        super('index exists', cause, context);\n    }\n}\nexports.IndexExistsError = IndexExistsError;\n/**\n * Indicates that the referenced document does not exist.\n *\n * @category Error Handling\n */\nclass DocumentNotFoundError extends CouchbaseError {\n    constructor(cause, context) {\n        super('document not found', cause, context);\n    }\n}\nexports.DocumentNotFoundError = DocumentNotFoundError;\n/**\n * Indicates that the referenced document could not be retrieved.\n *\n * @category Error Handling\n */\nclass DocumentUnretrievableError extends CouchbaseError {\n    constructor(cause, context) {\n        super('document unretrievable', cause, context);\n    }\n}\nexports.DocumentUnretrievableError = DocumentUnretrievableError;\n/**\n * Indicates that the referenced document could not be used as it is currently\n * locked, likely by another actor in the system.\n *\n * @category Error Handling\n */\nclass DocumentLockedError extends CouchbaseError {\n    constructor(cause, context) {\n        super('document locked', cause, context);\n    }\n}\nexports.DocumentLockedError = DocumentLockedError;\n/**\n * Indicates that the referenced document is not locked.  Generally raised when an unlock\n * operation is performed.\n *\n * @category Error Handling\n */\nclass DocumentNotLockedError extends CouchbaseError {\n    constructor(cause, context) {\n        super('document not locked', cause, context);\n    }\n}\nexports.DocumentNotLockedError = DocumentNotLockedError;\n/**\n * Indicates that a value could not be stored as it was too large.\n *\n * @category Error Handling\n */\nclass ValueTooLargeError extends CouchbaseError {\n    constructor(cause, context) {\n        super('value too large', cause, context);\n    }\n}\nexports.ValueTooLargeError = ValueTooLargeError;\n/**\n * Indicates that the referenced document exists already, but the operation\n * was not expecting it to exist.\n *\n * @category Error Handling\n */\nclass DocumentExistsError extends CouchbaseError {\n    constructor(cause, context) {\n        super('document exists', cause, context);\n    }\n}\nexports.DocumentExistsError = DocumentExistsError;\n/**\n * Indicates that a JSON operation was attempted with non-JSON data.\n *\n * @category Error Handling\n */\nclass ValueNotJsonError extends CouchbaseError {\n    constructor(cause, context) {\n        super('value not json', cause, context);\n    }\n}\nexports.ValueNotJsonError = ValueNotJsonError;\n/**\n * Indicates that a durability level which is not available was specified.\n *\n * @category Error Handling\n */\nclass DurabilityLevelNotAvailableError extends CouchbaseError {\n    constructor(cause, context) {\n        super('durability level not available', cause, context);\n    }\n}\nexports.DurabilityLevelNotAvailableError = DurabilityLevelNotAvailableError;\n/**\n * Indicates that a durability level which is impossible to achieve was\n * specified.  This can occur when you try to use Majority but there is\n * less than the majority of nodes available.\n *\n * @category Error Handling\n */\nclass DurabilityImpossibleError extends CouchbaseError {\n    constructor(cause, context) {\n        super('durability impossible', cause, context);\n    }\n}\nexports.DurabilityImpossibleError = DurabilityImpossibleError;\n/**\n * Indicates that the durable operation that was performed has failed\n * ambiguously and may or may not have completed, or may complete in\n * the future.\n *\n * @category Error Handling\n */\nclass DurabilityAmbiguousError extends CouchbaseError {\n    constructor(cause, context) {\n        super('durability ambiguous', cause, context);\n    }\n}\nexports.DurabilityAmbiguousError = DurabilityAmbiguousError;\n/**\n * Indicates that a write was failed as an existing durable write against\n * that key is already in progress.\n *\n * @category Error Handling\n */\nclass DurableWriteInProgressError extends CouchbaseError {\n    constructor(cause, context) {\n        super('durable write in progress', cause, context);\n    }\n}\nexports.DurableWriteInProgressError = DurableWriteInProgressError;\n/**\n * Indicates that a write was failed as the server is currently reconstructing\n * it's durable data following a failover.\n *\n * @category Error Handling\n */\nclass DurableWriteReCommitInProgressError extends CouchbaseError {\n    constructor(cause, context) {\n        super('durable write recommit in progress', cause, context);\n    }\n}\nexports.DurableWriteReCommitInProgressError = DurableWriteReCommitInProgressError;\n/**\n * Indicates that a mutation was lost.\n *\n * @category Error Handling\n */\nclass MutationLostError extends CouchbaseError {\n    constructor(cause, context) {\n        super('mutation lost', cause, context);\n    }\n}\nexports.MutationLostError = MutationLostError;\n/**\n * Indicates that the reference path was not found.\n *\n * @category Error Handling\n */\nclass PathNotFoundError extends CouchbaseError {\n    constructor(cause, context) {\n        super('path not found', cause, context);\n    }\n}\nexports.PathNotFoundError = PathNotFoundError;\n/**\n * Indicates that the referenced path made incorrect assumptions about\n * the structure of a document, for instance attempting to access a field\n * as an object when in fact it is an array.\n *\n * @category Error Handling\n */\nclass PathMismatchError extends CouchbaseError {\n    constructor(cause, context) {\n        super('path mismatch', cause, context);\n    }\n}\nexports.PathMismatchError = PathMismatchError;\n/**\n * Indicates that the referenced path is not valid.\n *\n * @category Error Handling\n */\nclass PathInvalidError extends CouchbaseError {\n    constructor(cause, context) {\n        super('path invalid', cause, context);\n    }\n}\nexports.PathInvalidError = PathInvalidError;\n/**\n * Indicates that the specified path was too large to parse.\n *\n * @category Error Handling\n */\nclass PathTooBigError extends CouchbaseError {\n    constructor(cause, context) {\n        super('path too big', cause, context);\n    }\n}\nexports.PathTooBigError = PathTooBigError;\n/**\n * Indicates that the referenced path was too deep to parse.\n *\n * @category Error Handling\n */\nclass PathTooDeepError extends CouchbaseError {\n    constructor(cause, context) {\n        super('path too deep', cause, context);\n    }\n}\nexports.PathTooDeepError = PathTooDeepError;\n/**\n * Indicates that the document created by the operation would become\n * too deep to operate on.\n *\n * @category Error Handling\n */\nclass ValueTooDeepError extends CouchbaseError {\n    constructor(cause, context) {\n        super('value too deep', cause, context);\n    }\n}\nexports.ValueTooDeepError = ValueTooDeepError;\n/**\n * Indicates that the value passed is invalid.\n *\n * @category Error Handling\n */\nclass ValueInvalidError extends CouchbaseError {\n    constructor(cause, context) {\n        super('value invalid', cause, context);\n    }\n}\nexports.ValueInvalidError = ValueInvalidError;\n/**\n * Indicates that an operation expecting JSON was performed against a document\n * which is not JSON.\n *\n * @category Error Handling\n */\nclass DocumentNotJsonError extends CouchbaseError {\n    constructor(cause, context) {\n        super('document not json', cause, context);\n    }\n}\nexports.DocumentNotJsonError = DocumentNotJsonError;\n/**\n * Indicates that a number has grown too large.\n *\n * @category Error Handling\n */\nclass NumberTooBigError extends CouchbaseError {\n    constructor(cause, context) {\n        super('number too big', cause, context);\n    }\n}\nexports.NumberTooBigError = NumberTooBigError;\n/**\n * Indicates that the delta specified is invalid.\n *\n * @category Error Handling\n */\nclass DeltaInvalidError extends CouchbaseError {\n    constructor(cause, context) {\n        super('delta invalid', cause, context);\n    }\n}\nexports.DeltaInvalidError = DeltaInvalidError;\n/**\n * Indicates that the reference path already existed, but the operation\n * expected that it did not.\n *\n * @category Error Handling\n */\nclass PathExistsError extends CouchbaseError {\n    constructor(cause, context) {\n        super('path exists', cause, context);\n    }\n}\nexports.PathExistsError = PathExistsError;\n/**\n * Indicates that a failure occurred while planning a query.\n *\n * @category Error Handling\n */\nclass PlanningFailureError extends CouchbaseError {\n    constructor(cause, context) {\n        super('planning failure', cause, context);\n    }\n}\nexports.PlanningFailureError = PlanningFailureError;\n/**\n * Indicates that a failure occured while querying an index.\n *\n * @category Error Handling\n */\nclass IndexFailureError extends CouchbaseError {\n    constructor(cause, context) {\n        super('index failure', cause, context);\n    }\n}\nexports.IndexFailureError = IndexFailureError;\n/**\n * Indicates that an error occurred with a prepared statement.\n *\n * @category Error Handling\n */\nclass PreparedStatementFailureError extends CouchbaseError {\n    constructor(cause, context) {\n        super('prepared statement failure', cause, context);\n    }\n}\nexports.PreparedStatementFailureError = PreparedStatementFailureError;\n/**\n * Indicates that a generic DML error occurred with a query.\n *\n * @category Error Handling\n */\nclass DmlFailureError extends CouchbaseError {\n    constructor(cause, context) {\n        super('generic dml failure', cause, context);\n    }\n}\nexports.DmlFailureError = DmlFailureError;\n/**\n * Indicates that the index was not ready yet.\n *\n * @category Error Handling\n */\nclass IndexNotReadyError extends CouchbaseError {\n    constructor(cause, context) {\n        super('index not ready', cause, context);\n    }\n}\nexports.IndexNotReadyError = IndexNotReadyError;\n/**\n * Indicates that an error occurred while compiling a query.\n *\n * @category Error Handling\n */\nclass CompilationFailureError extends CouchbaseError {\n    constructor(cause, context) {\n        super('compilation failure', cause, context);\n    }\n}\nexports.CompilationFailureError = CompilationFailureError;\n/**\n * Indicates that the job queue for the service was full and further requests will\n * be rejected for a period of time until the queue shrinks.\n *\n * @category Error Handling\n */\nclass JobQueueFullError extends CouchbaseError {\n    constructor(cause, context) {\n        super('job queue full', cause, context);\n    }\n}\nexports.JobQueueFullError = JobQueueFullError;\n/**\n * Indicates that the referenced dataset does not exist.\n *\n * @category Error Handling\n */\nclass DatasetNotFoundError extends CouchbaseError {\n    constructor(cause, context) {\n        super('dataset not found', cause, context);\n    }\n}\nexports.DatasetNotFoundError = DatasetNotFoundError;\n/**\n * Indicates that the referenced dataverse does not exist.\n *\n * @category Error Handling\n */\nclass DataverseNotFoundError extends CouchbaseError {\n    constructor(cause, context) {\n        super('dataverse not found', cause, context);\n    }\n}\nexports.DataverseNotFoundError = DataverseNotFoundError;\n/**\n * Indicates that the referenced dataset already exists, but the operation\n * expected that it did not.\n *\n * @category Error Handling\n */\nclass DatasetExistsError extends CouchbaseError {\n    constructor(cause, context) {\n        super('dataset exists', cause, context);\n    }\n}\nexports.DatasetExistsError = DatasetExistsError;\n/**\n * Indicates that the referenced dataverse already exists, but the operation\n * expected that it did not.\n *\n * @category Error Handling\n */\nclass DataverseExistsError extends CouchbaseError {\n    constructor(cause, context) {\n        super('dataverse exists', cause, context);\n    }\n}\nexports.DataverseExistsError = DataverseExistsError;\n/**\n * Indicates that the referenced link does not exist.\n *\n * @category Error Handling\n */\nclass LinkNotFoundError extends CouchbaseError {\n    constructor(cause, context) {\n        super('link not found', cause, context);\n    }\n}\nexports.LinkNotFoundError = LinkNotFoundError;\n/**\n * Indicates that the link already exists.\n *\n * @category Error Handling\n */\nclass LinkExistsError extends CouchbaseError {\n    constructor(cause, context) {\n        super('link already exists', cause, context);\n    }\n}\nexports.LinkExistsError = LinkExistsError;\n/**\n * Indicates that the referenced view does not exist.\n *\n * @category Error Handling\n */\nclass ViewNotFoundError extends CouchbaseError {\n    constructor(cause, context) {\n        super('view not found', cause, context);\n    }\n}\nexports.ViewNotFoundError = ViewNotFoundError;\n/**\n * Indicates that the referenced design document does not exist.\n *\n * @category Error Handling\n */\nclass DesignDocumentNotFoundError extends CouchbaseError {\n    constructor(cause, context) {\n        super('design document not found', cause, context);\n    }\n}\nexports.DesignDocumentNotFoundError = DesignDocumentNotFoundError;\n/**\n * Indicates that the referenced collection already exists, but the operation\n * expected that it did not.\n *\n * @category Error Handling\n */\nclass CollectionExistsError extends CouchbaseError {\n    constructor(cause, context) {\n        super('collection exists', cause, context);\n    }\n}\nexports.CollectionExistsError = CollectionExistsError;\n/**\n * Indicates that the referenced scope already exists, but the operation\n * expected that it did not.\n *\n * @category Error Handling\n */\nclass ScopeExistsError extends CouchbaseError {\n    constructor(cause, context) {\n        super('scope exists', cause, context);\n    }\n}\nexports.ScopeExistsError = ScopeExistsError;\n/**\n * Indicates that the referenced user does not exist.\n *\n * @category Error Handling\n */\nclass UserNotFoundError extends CouchbaseError {\n    constructor(cause, context) {\n        super('user not found', cause, context);\n    }\n}\nexports.UserNotFoundError = UserNotFoundError;\n/**\n * Indicates that the referenced group does not exist.\n *\n * @category Error Handling\n */\nclass GroupNotFoundError extends CouchbaseError {\n    constructor(cause, context) {\n        super('group not found', cause, context);\n    }\n}\nexports.GroupNotFoundError = GroupNotFoundError;\n/**\n * Indicates that the referenced bucket already exists, but the operation\n * expected it to not exist.\n *\n * @category Error Handling\n */\nclass BucketExistsError extends CouchbaseError {\n    constructor(cause, context) {\n        super('bucket exists', cause, context);\n    }\n}\nexports.BucketExistsError = BucketExistsError;\n/**\n * Indicates that the referenced user already exists, but the operation\n * expected it to not exist.\n *\n * @category Error Handling\n */\nclass UserExistsError extends CouchbaseError {\n    constructor(cause, context) {\n        super('user exists', cause, context);\n    }\n}\nexports.UserExistsError = UserExistsError;\n/**\n * Indicates that the bucket could not be flushed due to not having the flush\n * option enabled.  This option can be dynamically adjusted.\n *\n * @category Error Handling\n */\nclass BucketNotFlushableError extends CouchbaseError {\n    constructor(cause, context) {\n        super('bucket not flushable', cause, context);\n    }\n}\nexports.BucketNotFlushableError = BucketNotFlushableError;\n/**\n * Indicates that the referenced eventing function does not exist.\n *\n * @category Error Handling\n */\nclass EventingFunctionNotFoundError extends CouchbaseError {\n    constructor(cause, context) {\n        super('eventing function not found', cause, context);\n    }\n}\nexports.EventingFunctionNotFoundError = EventingFunctionNotFoundError;\n/**\n * Indicates that the referenced eventing function was not deployed but was\n * expected to have been.\n *\n * @category Error Handling\n */\nclass EventingFunctionNotDeployedError extends CouchbaseError {\n    constructor(cause, context) {\n        super('eventing function not deployed', cause, context);\n    }\n}\nexports.EventingFunctionNotDeployedError = EventingFunctionNotDeployedError;\n/**\n * Indicates that the eventing function was not able to be compiled.\n *\n * @category Error Handling\n */\nclass EventingFunctionCompilationFailureError extends CouchbaseError {\n    constructor(cause, context) {\n        super('eventing function compilation failed', cause, context);\n    }\n}\nexports.EventingFunctionCompilationFailureError = EventingFunctionCompilationFailureError;\n/**\n * Indicates that the source and metadata keyspaces both referenced the same\n * place for an eventing function.\n *\n * @category Error Handling\n */\nclass EventingFunctionIdenticalKeyspaceError extends CouchbaseError {\n    constructor(cause, context) {\n        super('eventing function identical keyspace', cause, context);\n    }\n}\nexports.EventingFunctionIdenticalKeyspaceError = EventingFunctionIdenticalKeyspaceError;\n/**\n * Indicates that an eventing function was deployed but has not yet fully\n * completed the bootstrapping process.\n *\n * @category Error Handling\n */\nclass EventingFunctionNotBootstrappedError extends CouchbaseError {\n    constructor(cause, context) {\n        super('eventing function not bootstrapped', cause, context);\n    }\n}\nexports.EventingFunctionNotBootstrappedError = EventingFunctionNotBootstrappedError;\n/**\n * Indicates that an eventing function is deployed but the operation expected\n * that it was not.\n *\n * @category Error Handling\n */\nclass EventingFunctionDeployedError extends CouchbaseError {\n    constructor(cause, context) {\n        super('eventing function deployed', cause, context);\n    }\n}\nexports.EventingFunctionDeployedError = EventingFunctionDeployedError;\n/**\n * Indicates that an eventing function is paused but the operation expected\n * that it was not.\n *\n * @category Error Handling\n */\nclass EventingFunctionPausedError extends CouchbaseError {\n    constructor(cause, context) {\n        super('eventing function paused', cause, context);\n    }\n}\nexports.EventingFunctionPausedError = EventingFunctionPausedError;\n/**\n * Indicates a transaction operation failed to complete.\n *\n * @category Error Handling\n */\nclass TransactionOperationFailedError extends CouchbaseError {\n    constructor(cause, context) {\n        super('transaction operation failed', cause, context);\n    }\n}\nexports.TransactionOperationFailedError = TransactionOperationFailedError;\n/**\n * Indicates a transaction failed to complete.\n *\n * @category Error Handling\n */\nclass TransactionFailedError extends CouchbaseError {\n    constructor(cause, context) {\n        super('transaction failed', cause, context);\n    }\n}\nexports.TransactionFailedError = TransactionFailedError;\n/**\n * Indicates a transaction failed to complete due to expiring.\n *\n * @category Error Handling\n */\nclass TransactionExpiredError extends CouchbaseError {\n    constructor(cause) {\n        super('transaction expired', cause);\n    }\n}\nexports.TransactionExpiredError = TransactionExpiredError;\n/**\n * Indicates the state of a transaction ended as ambiguous and may or\n * may not have committed successfully.\n *\n * @category Error Handling\n */\nclass TransactionCommitAmbiguousError extends CouchbaseError {\n    constructor(cause) {\n        super('transaction commit ambiguous', cause);\n    }\n}\nexports.TransactionCommitAmbiguousError = TransactionCommitAmbiguousError;\n"],"x_google_ignoreList":[0],"mappings":"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"}