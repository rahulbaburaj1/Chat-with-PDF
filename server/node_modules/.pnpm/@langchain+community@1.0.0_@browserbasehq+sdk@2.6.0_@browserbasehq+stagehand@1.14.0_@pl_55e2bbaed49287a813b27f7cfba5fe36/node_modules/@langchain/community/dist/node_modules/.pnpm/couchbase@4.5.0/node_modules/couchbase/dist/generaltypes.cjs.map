{"version":3,"file":"generaltypes.cjs","names":["ServiceType","DurabilityLevel","StoreSemantics","ReadPreference"],"sources":["../../../../../../../../../node_modules/.pnpm/couchbase@4.5.0/node_modules/couchbase/dist/generaltypes.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReadPreference = exports.StoreSemantics = exports.DurabilityLevel = exports.ServiceType = void 0;\n/**\n * Represents the various service types available.\n */\nvar ServiceType;\n(function (ServiceType) {\n    /**\n     * The key-value service, responsible for data storage.\n     */\n    ServiceType[\"KeyValue\"] = \"kv\";\n    /**\n     * The management service, responsible for managing the cluster.\n     */\n    ServiceType[\"Management\"] = \"mgmt\";\n    /**\n     * The views service, responsible for views querying.\n     */\n    ServiceType[\"Views\"] = \"views\";\n    /**\n     * The query service, responsible for N1QL querying.\n     */\n    ServiceType[\"Query\"] = \"query\";\n    /**\n     * The search service, responsible for full-text search querying.\n     */\n    ServiceType[\"Search\"] = \"search\";\n    /**\n     * The analytics service, responsible for analytics querying.\n     */\n    ServiceType[\"Analytics\"] = \"analytics\";\n    /**\n     * The eventing service, responsible for event-driven actions.\n     */\n    ServiceType[\"Eventing\"] = \"eventing\";\n})(ServiceType || (exports.ServiceType = ServiceType = {}));\n/**\n * Represents the durability level required for an operation.\n */\nvar DurabilityLevel;\n(function (DurabilityLevel) {\n    /**\n     * Indicates that no durability is needed.\n     */\n    DurabilityLevel[DurabilityLevel[\"None\"] = 0] = \"None\";\n    /**\n     * Indicates that mutations should be replicated to a majority of the\n     * nodes in the cluster before the operation is marked as successful.\n     */\n    DurabilityLevel[DurabilityLevel[\"Majority\"] = 1] = \"Majority\";\n    /**\n     * Indicates that mutations should be replicated to a majority of the\n     * nodes in the cluster and persisted to the master node before the\n     * operation is marked as successful.\n     */\n    DurabilityLevel[DurabilityLevel[\"MajorityAndPersistOnMaster\"] = 2] = \"MajorityAndPersistOnMaster\";\n    /**\n     * Indicates that mutations should be persisted to the majority of the\n     * nodes in the cluster before the operation is marked as successful.\n     */\n    DurabilityLevel[DurabilityLevel[\"PersistToMajority\"] = 3] = \"PersistToMajority\";\n})(DurabilityLevel || (exports.DurabilityLevel = DurabilityLevel = {}));\n/**\n * Represents the storage semantics to use for some types of operations.\n */\nvar StoreSemantics;\n(function (StoreSemantics) {\n    /**\n     * Indicates that replace semantics should be used.  This will replace\n     * the document if it exists, and the operation will fail if the\n     * document does not exist.\n     */\n    StoreSemantics[StoreSemantics[\"Replace\"] = 0] = \"Replace\";\n    /**\n     * Indicates that upsert semantics should be used.  This will replace\n     * the document if it exists, and create it if it does not.\n     */\n    StoreSemantics[StoreSemantics[\"Upsert\"] = 1] = \"Upsert\";\n    /**\n     * Indicates that insert semantics should be used.  This will insert\n     * the document if it does not exist, and fail the operation if the\n     * document already exists.\n     */\n    StoreSemantics[StoreSemantics[\"Insert\"] = 2] = \"Insert\";\n})(StoreSemantics || (exports.StoreSemantics = StoreSemantics = {}));\n/**\n * Represents the various scan consistency options that are available when\n * querying against the query service.\n */\nvar ReadPreference;\n(function (ReadPreference) {\n    /**\n     * Indicates that filtering for replica set should not be enforced.\n     */\n    ReadPreference[\"NoPreference\"] = \"no_preference\";\n    /**\n     * Indicates that any nodes that do not belong to local group selected during\n     * cluster instantiation using the `ConnectOptions.preferredServerGroup` option\n     * should be excluded.\n     */\n    ReadPreference[\"SelectedServerGroup\"] = \"selected_server_group\";\n})(ReadPreference || (exports.ReadPreference = ReadPreference = {}));\n"],"x_google_ignoreList":[0],"mappings":";;;;;;;CACA,OAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAM,EAAC;CAC7D,QAAQ,iBAAiB,QAAQ,iBAAiB,QAAQ,kBAAkB,QAAQ,cAAc,KAAK;;;;CAIvG,IAAI;EACH,SAAUA,eAAa;;;;EAIpBA,cAAY,cAAc;;;;EAI1BA,cAAY,gBAAgB;;;;EAI5BA,cAAY,WAAW;;;;EAIvBA,cAAY,WAAW;;;;EAIvBA,cAAY,YAAY;;;;EAIxBA,cAAY,eAAe;;;;EAI3BA,cAAY,cAAc;CAC7B,GAAE,gBAAgB,QAAQ,cAAc,cAAc,CAAE,GAAE;;;;CAI3D,IAAI;EACH,SAAUC,mBAAiB;;;;EAIxBA,kBAAgBA,kBAAgB,UAAU,KAAK;;;;;EAK/CA,kBAAgBA,kBAAgB,cAAc,KAAK;;;;;;EAMnDA,kBAAgBA,kBAAgB,gCAAgC,KAAK;;;;;EAKrEA,kBAAgBA,kBAAgB,uBAAuB,KAAK;CAC/D,GAAE,oBAAoB,QAAQ,kBAAkB,kBAAkB,CAAE,GAAE;;;;CAIvE,IAAI;EACH,SAAUC,kBAAgB;;;;;;EAMvBA,iBAAeA,iBAAe,aAAa,KAAK;;;;;EAKhDA,iBAAeA,iBAAe,YAAY,KAAK;;;;;;EAM/CA,iBAAeA,iBAAe,YAAY,KAAK;CAClD,GAAE,mBAAmB,QAAQ,iBAAiB,iBAAiB,CAAE,GAAE;;;;;CAKpE,IAAI;EACH,SAAUC,kBAAgB;;;;EAIvBA,iBAAe,kBAAkB;;;;;;EAMjCA,iBAAe,yBAAyB;CAC3C,GAAE,mBAAmB,QAAQ,iBAAiB,iBAAiB,CAAE,GAAE"}