{"version":3,"file":"deepinfra.d.ts","names":["BaseChatModel","BaseChatModelParams","BindToolsInput","BaseChatModelCallOptions","BaseMessage","AIMessageChunk","ChatResult","Runnable","BaseLanguageModelInput","DEFAULT_MODEL","DeepInfraMessageRole","API_BASE_URL","ENV_VARIABLE_API_KEY","DeepInfraFinishReason","DeepInfraToolCall","DeepInfraMessage","ChatCompletionRequest","BaseResponse","ChoiceMessage","ResponseChoice","ChatCompletionResponse","DeepInfraCallOptions","ChatDeepInfraParams","ChatDeepInfra","Partial","Omit","Promise","AbortSignal"],"sources":["../../src/chat_models/deepinfra.d.ts"],"sourcesContent":["import { BaseChatModel, type BaseChatModelParams, BindToolsInput, type BaseChatModelCallOptions } from \"@langchain/core/language_models/chat_models\";\nimport { type BaseMessage, type AIMessageChunk } from \"@langchain/core/messages\";\nimport { type ChatResult } from \"@langchain/core/outputs\";\nimport { Runnable } from \"@langchain/core/runnables\";\nimport { BaseLanguageModelInput } from \"@langchain/core/language_models/base\";\nexport declare const DEFAULT_MODEL = \"meta-llama/Meta-Llama-3-70B-Instruct\";\nexport type DeepInfraMessageRole = \"system\" | \"assistant\" | \"user\" | \"tool\";\nexport declare const API_BASE_URL = \"https://api.deepinfra.com/v1/openai/chat/completions\";\nexport declare const ENV_VARIABLE_API_KEY = \"DEEPINFRA_API_TOKEN\";\ntype DeepInfraFinishReason = \"stop\" | \"length\" | \"tool_calls\" | \"null\" | null;\ninterface DeepInfraToolCall {\n    id: string;\n    type: \"function\";\n    function: {\n        name: string;\n        arguments: string;\n    };\n}\ninterface DeepInfraMessage {\n    role: DeepInfraMessageRole;\n    content: string;\n    tool_calls?: DeepInfraToolCall[];\n}\ninterface ChatCompletionRequest {\n    model: string;\n    messages?: DeepInfraMessage[];\n    stream?: boolean;\n    max_tokens?: number | null;\n    temperature?: number | null;\n    tools?: BindToolsInput[];\n    stop?: string[];\n}\ninterface BaseResponse {\n    code?: string;\n    message?: string;\n}\ninterface ChoiceMessage {\n    role: string;\n    content: string;\n    tool_calls?: DeepInfraToolCall[];\n}\ninterface ResponseChoice {\n    index: number;\n    finish_reason: DeepInfraFinishReason;\n    delta: ChoiceMessage;\n    message: ChoiceMessage;\n}\ninterface ChatCompletionResponse extends BaseResponse {\n    choices: ResponseChoice[];\n    usage: {\n        completion_tokens: number;\n        prompt_tokens: number;\n        total_tokens: number;\n    };\n    output: {\n        text: string;\n        finish_reason: DeepInfraFinishReason;\n    };\n}\nexport interface DeepInfraCallOptions extends BaseChatModelCallOptions {\n    stop?: string[];\n    tools?: BindToolsInput[];\n}\nexport interface ChatDeepInfraParams {\n    model: string;\n    apiKey?: string;\n    temperature?: number;\n    maxTokens?: number;\n}\nexport declare class ChatDeepInfra extends BaseChatModel<DeepInfraCallOptions> implements ChatDeepInfraParams {\n    static lc_name(): string;\n    get callKeys(): string[];\n    apiKey?: string;\n    model: string;\n    apiUrl: string;\n    maxTokens?: number;\n    temperature?: number;\n    constructor(fields?: Partial<ChatDeepInfraParams> & BaseChatModelParams);\n    invocationParams(options?: this[\"ParsedCallOptions\"]): Omit<ChatCompletionRequest, \"messages\">;\n    identifyingParams(): Omit<ChatCompletionRequest, \"messages\">;\n    _generate(messages: BaseMessage[], options?: this[\"ParsedCallOptions\"]): Promise<ChatResult>;\n    completionWithRetry(request: ChatCompletionRequest, stream: boolean, signal?: AbortSignal): Promise<ChatCompletionResponse>;\n    bindTools(tools: BindToolsInput[], kwargs?: Partial<DeepInfraCallOptions>): Runnable<BaseLanguageModelInput, AIMessageChunk, DeepInfraCallOptions>;\n    _llmType(): string;\n}\nexport {};\n"],"mappings":"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"}