{"version":3,"file":"togetherai.js","names":["fields?: Partial<\n      Omit<OpenAIChatInput, \"openAIApiKey\" | TogetherAIUnsupportedArgs>\n    > &\n      BaseChatModelParams & {\n        /**\n         * Prefer `apiKey`\n         */\n        togetherAIApiKey?: string;\n        /**\n         * The TogetherAI API key to use.\n         */\n        apiKey?: string;\n      }","options: this[\"ParsedCallOptions\"]","request:\n      | OpenAIClient.Chat.ChatCompletionCreateParamsStreaming\n      | OpenAIClient.Chat.ChatCompletionCreateParamsNonStreaming","options?: OpenAICoreRequestOptions"],"sources":["../../src/chat_models/togetherai.ts"],"sourcesContent":["import type {\n  BaseChatModelParams,\n  LangSmithParams,\n} from \"@langchain/core/language_models/chat_models\";\nimport {\n  type OpenAIClient,\n  type ChatOpenAICallOptions,\n  type OpenAIChatInput,\n  type OpenAICoreRequestOptions,\n  ChatOpenAICompletions,\n} from \"@langchain/openai\";\nimport { getEnvironmentVariable } from \"@langchain/core/utils/env\";\n\ntype TogetherAIUnsupportedArgs =\n  | \"frequencyPenalty\"\n  | \"presencePenalty\"\n  | \"logitBias\"\n  | \"functions\";\n\ntype TogetherAIUnsupportedCallOptions = \"functions\" | \"function_call\";\n\nexport interface ChatTogetherAICallOptions\n  extends Omit<ChatOpenAICallOptions, TogetherAIUnsupportedCallOptions> {\n  response_format: {\n    type: \"json_object\";\n    schema: Record<string, unknown>;\n  };\n}\n\nexport interface ChatTogetherAIInput\n  extends Omit<OpenAIChatInput, \"openAIApiKey\" | TogetherAIUnsupportedArgs>,\n    BaseChatModelParams {\n  /**\n   * The TogetherAI API key to use for requests.\n   * Alias for `apiKey`\n   * @default process.env.TOGETHER_AI_API_KEY\n   */\n  togetherAIApiKey?: string;\n  /**\n   * The TogetherAI API key to use for requests.\n   * @default process.env.TOGETHER_AI_API_KEY\n   */\n  apiKey?: string;\n}\n\n/**\n * TogetherAI chat model integration.\n *\n * The TogetherAI API is compatible to the OpenAI API with some limitations. View the\n * full API ref at:\n * @link {https://docs.together.ai/reference/chat-completions}\n *\n * Setup:\n * Install `@langchain/community` and set an environment variable named `TOGETHER_AI_API_KEY`.\n *\n * ```bash\n * npm install @langchain/community\n * export TOGETHER_AI_API_KEY=\"your-api-key\"\n * ```\n *\n * ## [Constructor args](https://api.js.langchain.com/classes/_langchain_community.chat_models_togetherai.ChatTogetherAI.html#constructor)\n *\n * ## [Runtime args](https://api.js.langchain.com/interfaces/_langchain_community.chat_models_togetherai.ChatTogetherAICallOptions.html)\n *\n * Runtime args can be passed as the second argument to any of the base runnable methods `.invoke`. `.stream`, `.batch`, etc.\n * They can also be passed via `.withConfig`, or the second arg in `.bindTools`, like shown in the examples below:\n *\n * ```typescript\n * // When calling `.withConfig`, call options should be passed via the first argument\n * const llmWithArgsBound = llm.withConfig({\n *   stop: [\"\\n\"],\n *   tools: [...],\n * });\n *\n * // When calling `.bindTools`, call options should be passed via the second argument\n * const llmWithTools = llm.bindTools(\n *   [...],\n *   {\n *     tool_choice: \"auto\",\n *   }\n * );\n * ```\n *\n * ## Examples\n *\n * <details open>\n * <summary><strong>Instantiate</strong></summary>\n *\n * ```typescript\n * import { ChatTogetherAI } from '@langchain/community/chat_models/togetherai';\n *\n * const llm = new ChatTogetherAI({\n *   model: \"meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo\",\n *   temperature: 0,\n *   // other params...\n * });\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Invoking</strong></summary>\n *\n * ```typescript\n * const input = `Translate \"I love programming\" into French.`;\n *\n * // Models also accept a list of chat messages or a formatted prompt\n * const result = await llm.invoke(input);\n * console.log(result);\n * ```\n *\n * ```txt\n * AIMessage {\n *   \"id\": \"8b23ea7bcc4c924b-MUC\",\n *   \"content\": \"\\\"J'adore programmer\\\"\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"tokenUsage\": {\n *       \"completionTokens\": 8,\n *       \"promptTokens\": 19,\n *       \"totalTokens\": 27\n *     },\n *     \"finish_reason\": \"eos\"\n *   },\n *   \"tool_calls\": [],\n *   \"invalid_tool_calls\": [],\n *   \"usage_metadata\": {\n *     \"input_tokens\": 19,\n *     \"output_tokens\": 8,\n *     \"total_tokens\": 27\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Streaming Chunks</strong></summary>\n *\n * ```typescript\n * for await (const chunk of await llm.stream(input)) {\n *   console.log(chunk);\n * }\n * ```\n *\n * ```txt\n * AIMessageChunk {\n *   \"id\": \"8b23eb602fb19263-MUC\",\n *   \"content\": \"\\\"\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0,\n *     \"finish_reason\": null\n *   },\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *   \"id\": \"8b23eb602fb19263-MUC\",\n *   \"content\": \"J\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0,\n *     \"finish_reason\": null\n *   },\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *   \"id\": \"8b23eb602fb19263-MUC\",\n *   \"content\": \"'\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0,\n *     \"finish_reason\": null\n *   },\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *   \"id\": \"8b23eb602fb19263-MUC\",\n *   \"content\": \"ad\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0,\n *     \"finish_reason\": null\n *   },\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *   \"id\": \"8b23eb602fb19263-MUC\",\n *   \"content\": \"ore\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0,\n *     \"finish_reason\": null\n *   },\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *   \"id\": \"8b23eb602fb19263-MUC\",\n *   \"content\": \" programmer\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0,\n *     \"finish_reason\": null\n *   },\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *   \"id\": \"8b23eb602fb19263-MUC\",\n *   \"content\": \"\\\"\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0,\n *     \"finish_reason\": null\n *   },\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *   \"id\": \"8b23eb602fb19263-MUC\",\n *   \"content\": \"\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0,\n *     \"finish_reason\": \"eos\"\n *   },\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *   \"content\": \"\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {},\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": [],\n *   \"usage_metadata\": {\n *     \"input_tokens\": 19,\n *     \"output_tokens\": 8,\n *     \"total_tokens\": 27\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Aggregate Streamed Chunks</strong></summary>\n *\n * ```typescript\n * import { AIMessageChunk } from '@langchain/core/messages';\n * import { concat } from '@langchain/core/utils/stream';\n *\n * const stream = await llm.stream(input);\n * let full: AIMessageChunk | undefined;\n * for await (const chunk of stream) {\n *   full = !full ? chunk : concat(full, chunk);\n * }\n * console.log(full);\n * ```\n *\n * ```txt\n * AIMessageChunk {\n *   \"id\": \"8b23ecd42e469236-MUC\",\n *   \"content\": \"\\\"J'adore programmer\\\"\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0,\n *     \"finish_reason\": \"eos\"\n *   },\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": [],\n *   \"usage_metadata\": {\n *     \"input_tokens\": 19,\n *     \"output_tokens\": 8,\n *     \"total_tokens\": 27\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Bind tools</strong></summary>\n *\n * ```typescript\n * import { z } from 'zod';\n *\n * const GetWeather = {\n *   name: \"GetWeather\",\n *   description: \"Get the current weather in a given location\",\n *   schema: z.object({\n *     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n *   }),\n * }\n *\n * const GetPopulation = {\n *   name: \"GetPopulation\",\n *   description: \"Get the current population in a given location\",\n *   schema: z.object({\n *     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n *   }),\n * }\n *\n * const llmWithTools = llm.bindTools([GetWeather, GetPopulation]);\n * const aiMsg = await llmWithTools.invoke(\n *   \"Which city is hotter today and which is bigger: LA or NY? Respond with JSON and use tools.\"\n * );\n * console.log(aiMsg.tool_calls);\n * ```\n *\n * ```txt\n * [\n *   {\n *     name: 'GetWeather',\n *     args: { location: 'Los Angeles' },\n *     type: 'tool_call',\n *     id: 'call_q8i4zx1udqjjnou2bzbrg8ms'\n *   }\n * ]\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Structured Output</strong></summary>\n *\n * ```typescript\n * import { z } from 'zod';\n *\n * const Joke = z.object({\n *   setup: z.string().describe(\"The setup of the joke\"),\n *   punchline: z.string().describe(\"The punchline to the joke\"),\n *   rating: z.number().optional().describe(\"How funny the joke is, from 1 to 10\")\n * }).describe('Joke to tell user.');\n *\n * const structuredLlm = llm.withStructuredOutput(Joke, { name: \"Joke\" });\n * const jokeResult = await structuredLlm.invoke(\"Tell me a joke about cats\");\n * console.log(jokeResult);\n * ```\n *\n * ```txt\n * {\n *   setup: 'Why did the cat join a band',\n *   punchline: 'Because it wanted to be the purr-cussionist'\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Usage Metadata</strong></summary>\n *\n * ```typescript\n * const aiMsgForMetadata = await llm.invoke(input);\n * console.log(aiMsgForMetadata.usage_metadata);\n * ```\n *\n * ```txt\n * { input_tokens: 19, output_tokens: 65, total_tokens: 84 }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Response Metadata</strong></summary>\n *\n * ```typescript\n * const aiMsgForResponseMetadata = await llm.invoke(input);\n * console.log(aiMsgForResponseMetadata.response_metadata);\n * ```\n *\n * ```txt\n * {\n *   tokenUsage: { completionTokens: 91, promptTokens: 19, totalTokens: 110 },\n *   finish_reason: 'eos'\n * }\n * ```\n * </details>\n *\n * <br />\n */\nexport class ChatTogetherAI extends ChatOpenAICompletions<ChatTogetherAICallOptions> {\n  static lc_name() {\n    return \"ChatTogetherAI\";\n  }\n\n  _llmType() {\n    return \"togetherAI\";\n  }\n\n  get lc_secrets(): { [key: string]: string } | undefined {\n    return {\n      togetherAIApiKey: \"TOGETHER_AI_API_KEY\",\n      apiKey: \"TOGETHER_AI_API_KEY\",\n    };\n  }\n\n  lc_serializable = true;\n\n  constructor(\n    fields?: Partial<\n      Omit<OpenAIChatInput, \"openAIApiKey\" | TogetherAIUnsupportedArgs>\n    > &\n      BaseChatModelParams & {\n        /**\n         * Prefer `apiKey`\n         */\n        togetherAIApiKey?: string;\n        /**\n         * The TogetherAI API key to use.\n         */\n        apiKey?: string;\n      }\n  ) {\n    const togetherAIApiKey =\n      fields?.apiKey ||\n      fields?.togetherAIApiKey ||\n      getEnvironmentVariable(\"TOGETHER_AI_API_KEY\");\n\n    if (!togetherAIApiKey) {\n      throw new Error(\n        `TogetherAI API key not found. Please set the TOGETHER_AI_API_KEY environment variable or provide the key into \"togetherAIApiKey\"`\n      );\n    }\n\n    super({\n      ...fields,\n      model: fields?.model || \"mistralai/Mixtral-8x7B-Instruct-v0.1\",\n      apiKey: togetherAIApiKey,\n      configuration: {\n        baseURL: \"https://api.together.xyz/v1/\",\n      },\n    });\n  }\n\n  getLsParams(options: this[\"ParsedCallOptions\"]): LangSmithParams {\n    const params = super.getLsParams(options);\n    params.ls_provider = \"together\";\n    return params;\n  }\n\n  toJSON() {\n    const result = super.toJSON();\n\n    if (\n      \"kwargs\" in result &&\n      typeof result.kwargs === \"object\" &&\n      result.kwargs != null\n    ) {\n      delete result.kwargs.openai_api_key;\n      delete result.kwargs.configuration;\n    }\n\n    return result;\n  }\n\n  async completionWithRetry(\n    request: OpenAIClient.Chat.ChatCompletionCreateParamsStreaming,\n    options?: OpenAICoreRequestOptions\n  ): Promise<AsyncIterable<OpenAIClient.Chat.Completions.ChatCompletionChunk>>;\n\n  async completionWithRetry(\n    request: OpenAIClient.Chat.ChatCompletionCreateParamsNonStreaming,\n    options?: OpenAICoreRequestOptions\n  ): Promise<OpenAIClient.Chat.Completions.ChatCompletion>;\n\n  /**\n   * Calls the TogetherAI API with retry logic in case of failures.\n   * @param request The request to send to the TogetherAI API.\n   * @param options Optional configuration for the API call.\n   * @returns The response from the TogetherAI API.\n   */\n  async completionWithRetry(\n    request:\n      | OpenAIClient.Chat.ChatCompletionCreateParamsStreaming\n      | OpenAIClient.Chat.ChatCompletionCreateParamsNonStreaming,\n    options?: OpenAICoreRequestOptions\n  ): Promise<\n    | AsyncIterable<OpenAIClient.Chat.Completions.ChatCompletionChunk>\n    | OpenAIClient.Chat.Completions.ChatCompletion\n  > {\n    delete request.frequency_penalty;\n    delete request.presence_penalty;\n    delete request.logit_bias;\n    delete request.functions;\n\n    if (request.stream === true) {\n      return super.completionWithRetry(request, options);\n    }\n\n    return super.completionWithRetry(request, options);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4ZA,IAAa,iBAAb,cAAoC,sBAAiD;CACnF,OAAO,UAAU;AACf,SAAO;CACR;CAED,WAAW;AACT,SAAO;CACR;CAED,IAAI,aAAoD;AACtD,SAAO;GACL,kBAAkB;GAClB,QAAQ;EACT;CACF;CAED,kBAAkB;CAElB,YACEA,QAaA;EACA,MAAM,mBACJ,QAAQ,UACR,QAAQ,oBACR,uBAAuB,sBAAsB;AAE/C,MAAI,CAAC,iBACH,OAAM,IAAI,MACR,CAAC,gIAAgI,CAAC;EAItI,MAAM;GACJ,GAAG;GACH,OAAO,QAAQ,SAAS;GACxB,QAAQ;GACR,eAAe,EACb,SAAS,+BACV;EACF,EAAC;CACH;CAED,YAAYC,SAAqD;EAC/D,MAAM,SAAS,MAAM,YAAY,QAAQ;EACzC,OAAO,cAAc;AACrB,SAAO;CACR;CAED,SAAS;EACP,MAAM,SAAS,MAAM,QAAQ;AAE7B,MACE,YAAY,UACZ,OAAO,OAAO,WAAW,YACzB,OAAO,UAAU,MACjB;GACA,OAAO,OAAO,OAAO;GACrB,OAAO,OAAO,OAAO;EACtB;AAED,SAAO;CACR;;;;;;;CAkBD,MAAM,oBACJC,SAGAC,SAIA;EACA,OAAO,QAAQ;EACf,OAAO,QAAQ;EACf,OAAO,QAAQ;EACf,OAAO,QAAQ;AAEf,MAAI,QAAQ,WAAW,KACrB,QAAO,MAAM,oBAAoB,SAAS,QAAQ;AAGpD,SAAO,MAAM,oBAAoB,SAAS,QAAQ;CACnD;AACF"}