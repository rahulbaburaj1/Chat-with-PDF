{"version":3,"file":"mutationstate.cjs","names":[],"sources":["../../../../../../../../../node_modules/.pnpm/couchbase@4.5.0/node_modules/couchbase/dist/mutationstate.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MutationState = void 0;\n/**\n * Aggregates a number of {@link MutationToken}'s which have been returned by mutation\n * operations, which can then be used when performing queries.  This will guarenteed\n * that the query includes the specified set of mutations without incurring the wait\n * associated with request_plus level consistency.\n */\nclass MutationState {\n    constructor(...tokens) {\n        this._data = {};\n        tokens.forEach((token) => this._addOne(token));\n    }\n    /**\n     * Adds a set of tokens to this state.\n     *\n     * @param tokens The tokens to add.\n     */\n    add(...tokens) {\n        tokens.forEach((token) => this._addOne(token));\n    }\n    _addOne(token) {\n        if (!token) {\n            return;\n        }\n        const cppToken = token;\n        const tokenData = cppToken.toJSON();\n        const vbId = parseInt(tokenData.partition_id, 10);\n        const vbSeqNo = parseInt(tokenData.sequence_number, 10);\n        const bucketName = tokenData.bucket_name;\n        if (!this._data[bucketName]) {\n            this._data[bucketName] = {};\n        }\n        if (!this._data[bucketName][vbId]) {\n            this._data[bucketName][vbId] = cppToken;\n        }\n        else {\n            const otherToken = this._data[bucketName][vbId];\n            const otherTokenSeqNo = parseInt(otherToken.toJSON().sequence, 10);\n            if (otherTokenSeqNo < vbSeqNo) {\n                this._data[bucketName][vbId] = cppToken;\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    toJSON() {\n        return this._data;\n    }\n    /**\n     * @internal\n     */\n    inspect() {\n        const tokens = [];\n        for (const bucketName in this._data) {\n            for (const vbId in this._data[bucketName]) {\n                const info = this._data[bucketName][vbId];\n                tokens.push(bucketName + ':' + vbId + ':' + info.toString());\n            }\n        }\n        return 'MutationState<' + tokens.join('; ') + '>';\n    }\n}\nexports.MutationState = MutationState;\n"],"x_google_ignoreList":[0],"mappings":";;;;;;;CACA,OAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAM,EAAC;CAC7D,QAAQ,gBAAgB,KAAK;;;;;;;CAO7B,IAAM,gBAAN,MAAoB;EAChB,YAAY,GAAG,QAAQ;GACnB,KAAK,QAAQ,CAAE;GACf,OAAO,QAAQ,CAAC,UAAU,KAAK,QAAQ,MAAM,CAAC;EACjD;;;;;;EAMD,IAAI,GAAG,QAAQ;GACX,OAAO,QAAQ,CAAC,UAAU,KAAK,QAAQ,MAAM,CAAC;EACjD;EACD,QAAQ,OAAO;AACX,OAAI,CAAC,MACD;GAEJ,MAAM,WAAW;GACjB,MAAM,YAAY,SAAS,QAAQ;GACnC,MAAM,OAAO,SAAS,UAAU,cAAc,GAAG;GACjD,MAAM,UAAU,SAAS,UAAU,iBAAiB,GAAG;GACvD,MAAM,aAAa,UAAU;AAC7B,OAAI,CAAC,KAAK,MAAM,aACZ,KAAK,MAAM,cAAc,CAAE;AAE/B,OAAI,CAAC,KAAK,MAAM,YAAY,OACxB,KAAK,MAAM,YAAY,QAAQ;QAE9B;IACD,MAAM,aAAa,KAAK,MAAM,YAAY;IAC1C,MAAM,kBAAkB,SAAS,WAAW,QAAQ,CAAC,UAAU,GAAG;AAClE,QAAI,kBAAkB,SAClB,KAAK,MAAM,YAAY,QAAQ;GAEtC;EACJ;;;;EAID,SAAS;AACL,UAAO,KAAK;EACf;;;;EAID,UAAU;GACN,MAAM,SAAS,CAAE;AACjB,QAAK,MAAM,cAAc,KAAK,MAC1B,MAAK,MAAM,QAAQ,KAAK,MAAM,aAAa;IACvC,MAAM,OAAO,KAAK,MAAM,YAAY;IACpC,OAAO,KAAK,aAAa,MAAM,OAAO,MAAM,KAAK,UAAU,CAAC;GAC/D;AAEL,UAAO,mBAAmB,OAAO,KAAK,KAAK,GAAG;EACjD;CACJ;CACD,QAAQ,gBAAgB"}