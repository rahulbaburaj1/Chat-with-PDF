{"version":3,"file":"stackexchange.d.cts","names":["Tool","StackExchangeAnswer","StackExchangeItem","StackExchangeOptions","Record","StackExchangeAPIParams","StackExchangeAPI","Promise"],"sources":["../../src/tools/stackexchange.d.ts"],"sourcesContent":["import { Tool } from \"@langchain/core/tools\";\nexport interface StackExchangeAnswer {\n    items: StackExchangeItem[];\n    has_more: boolean;\n    quota_max: number;\n    quota_remaining: number;\n}\nexport interface StackExchangeItem {\n    tags: string[];\n    question_score: number;\n    is_accepted: boolean;\n    has_accepted_answer?: boolean;\n    answer_count?: number;\n    is_answered: boolean;\n    question_id: number;\n    item_type: string;\n    score: number;\n    last_activity_date: number;\n    creation_date: number;\n    body: string;\n    excerpt: string;\n    title: string;\n    answer_id?: number;\n}\ntype StackExchangeOptions = Record<string, string | number | boolean>;\nexport interface StackExchangeAPIParams {\n    /**\n     * The maximum number of results to return from the search.\n     * Limiting to 10 to avoid context overload.\n     * @default 3\n     */\n    maxResult?: number;\n    /**\n     * Which part of StackOverflows items to match against. One of 'all', 'title',\n     * 'body'.\n     * @default \"all\"\n     */\n    queryType?: \"all\" | \"title\" | \"body\";\n    /**\n     * Additional params to pass to the StackExchange API\n     */\n    options?: StackExchangeOptions;\n    /**\n     * Separator between question,answer pairs.\n     * @default \"\\n\\n\"\n     */\n    resultSeparator?: string;\n}\n/**\n * Class for interacting with the StackExchange API\n * It extends the base Tool class to perform retrieval.\n */\nexport declare class StackExchangeAPI extends Tool {\n    name: string;\n    description: string;\n    private pageSize;\n    private maxResult;\n    private key;\n    private accessToken;\n    private site;\n    private version;\n    private baseUrl;\n    private queryType;\n    private options?;\n    private resultSeparator?;\n    constructor(params?: StackExchangeAPIParams);\n    _call(query: string): Promise<string>;\n    private _fetch;\n    private _makeRequest;\n}\nexport {};\n"],"mappings":";;;;;;UACiBC,mBAAAA;SACNC;;;;;UAKMA,iBAAAA;;;;EANAD,mBAAAA,CAAAA,EAAmB,OAAA;EAMnBC,YAAAA,CAAAA,EAAAA,MAAiB;EAiB7BC,WAAAA,EAAAA,OAAAA;EACYE,WAAAA,EAAAA,MAAAA;EA2BIC,SAAAA,EAAAA,MAAAA;EAAgB,KAAA,EAAA,MAAA;EAAA,kBAaZD,EAAAA,MAAAA;EAAsB,aACrBE,EAAAA,MAAAA;EAAO,IAdaP,EAAAA,MAAAA;EAAI,OAAA,EAAA,MAAA;;;;KA5B7CG,oBAAAA,GAAuBC;UACXC,sBAAAA;;;;;;;;;;;;;;;;YAgBHF;;;;;;;;;;;cAWOG,gBAAAA,SAAyBN,IAAAA;;;;;;;;;;;;;uBAarBK;wBACCE"}