{"version":3,"file":"vectara.d.ts","names":["BaseTranslator","Comparator","Comparison","Operation","Operator","StructuredQuery","VectaraFilter","VectaraStore","VectaraVisitorResult","VectaraOperationResult","VectaraComparisonResult","VectaraVisitorStructuredQueryResult","String","VectaraTranslator","T"],"sources":["../../src/structured_query/vectara.d.ts"],"sourcesContent":["import { BaseTranslator, Comparator, Comparison, Operation, Operator, StructuredQuery } from \"@langchain/core/structured_query\";\nimport { VectaraFilter, VectaraStore } from \"../vectorstores/vectara.js\";\nexport type VectaraVisitorResult = VectaraOperationResult | VectaraComparisonResult | VectaraVisitorStructuredQueryResult;\nexport type VectaraOperationResult = String;\nexport type VectaraComparisonResult = String;\nexport type VectaraVisitorStructuredQueryResult = {\n    filter?: {\n        filter?: VectaraOperationResult | VectaraComparisonResult;\n    };\n};\nexport declare class VectaraTranslator<T extends VectaraStore> extends BaseTranslator<T> {\n    VisitOperationOutput: VectaraOperationResult;\n    VisitComparisonOutput: VectaraComparisonResult;\n    allowedOperators: Operator[];\n    allowedComparators: Comparator[];\n    formatFunction(func: Operator | Comparator): string;\n    /**\n     * Visits an operation and returns a VectaraOperationResult. The\n     * operation's arguments are visited and the operator is formatted.\n     * @param operation The operation to visit.\n     * @returns A VectaraOperationResult.\n     */\n    visitOperation(operation: Operation): this[\"VisitOperationOutput\"];\n    /**\n     * Visits a comparison and returns a VectaraComparisonResult. The\n     * comparison's value is checked for type and the comparator is formatted.\n     * Throws an error if the value type is not supported.\n     * @param comparison The comparison to visit.\n     * @returns A VectaraComparisonResult.\n     */\n    visitComparison(comparison: Comparison): this[\"VisitComparisonOutput\"];\n    /**\n     * Visits a structured query and returns a VectaraStructuredQueryResult.\n     * If the query has a filter, it is visited.\n     * @param query The structured query to visit.\n     * @returns A VectaraStructuredQueryResult.\n     */\n    visitStructuredQuery(query: StructuredQuery): this[\"VisitStructuredQueryOutput\"];\n    mergeFilters(defaultFilter: VectaraFilter | undefined, generatedFilter: VectaraFilter | undefined, mergeType?: string, forceDefaultFilter?: boolean): VectaraFilter | undefined;\n}\n"],"mappings":";;;;;;;KAEYQ,oBAAAA,GAAuBC,yBAAyBC,0BAA0BC;KAC1EF,sBAAAA,GAAyBG;KACzBF,uBAAAA,GAA0BE;KAC1BD,mCAAAA;;aAEKF,yBAAyBC;;;cAGrBG,4BAA4BN,sBAAsBP,eAAec;wBAC5DL;yBACCC;EAVfF,gBAAAA,EAWUJ,QAXU,EAAA;EAAA,kBAAA,EAYRH,UAZQ,EAAA;EAAA,cAAGQ,CAAAA,IAAAA,EAaVL,QAbUK,GAaCR,UAbDQ,CAAAA,EAAAA,MAAAA;EAAsB;;AAAgE;AACzH;AACA;AACA;EAA+C,cAAA,CAAA,SAAA,EAiBjBN,SAjBiB,CAAA,EAAA,IAAA,CAAA,sBAAA,CAAA;EAAA;;AAEkB;AAGjE;;;;EAAuF,eAC7DM,CAAAA,UAAAA,EAmBMP,UAnBNO,CAAAA,EAAAA,IAAAA,CAAAA,uBAAAA,CAAAA;EAAsB;;;;;;EAWT,oBAQPP,CAAAA,KAAAA,EAOAG,eAPAH,CAAAA,EAAAA,IAAAA,CAAAA,4BAAAA,CAAAA;EAAU,YAOVG,CAAAA,aAAAA,EACAC,aADAD,GAAAA,SAAAA,EAAAA,eAAAA,EAC4CC,aAD5CD,GAAAA,SAAAA,EAAAA,SAAAA,CAAAA,EAAAA,MAAAA,EAAAA,kBAAAA,CAAAA,EAAAA,OAAAA,CAAAA,EAC0HC,aAD1HD,GAAAA,SAAAA"}