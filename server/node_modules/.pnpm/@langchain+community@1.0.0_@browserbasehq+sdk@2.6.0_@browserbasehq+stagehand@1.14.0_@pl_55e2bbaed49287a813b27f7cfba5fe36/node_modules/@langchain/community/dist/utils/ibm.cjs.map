{"version":3,"file":"ibm.cjs","names":["WatsonXAI","IamAuthenticator","BearerTokenAuthenticator","CloudPakForDataAuthenticator","toolCallId: string","num: number","arr: string[]","str: string","JsonOutputToolsParser","params: WatsonxToolsOutputParserParams<T>","result: unknown","e: any","OutputParserException","generations: ChatGeneration[]","tool","toolCall: ToolCall","obj: WatsonXAI.JsonObject | undefined","shape: Record<string, any>","z"],"sources":["../../src/utils/ibm.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { WatsonXAI } from \"@ibm-cloud/watsonx-ai\";\nimport {\n  IamAuthenticator,\n  BearerTokenAuthenticator,\n  CloudPakForDataAuthenticator,\n} from \"ibm-cloud-sdk-core\";\nimport {\n  JsonOutputKeyToolsParserParamsInterop,\n  JsonOutputToolsParser,\n} from \"@langchain/core/output_parsers/openai_tools\";\nimport { OutputParserException } from \"@langchain/core/output_parsers\";\nimport { z } from \"zod/v3\";\nimport { ChatGeneration } from \"@langchain/core/outputs\";\nimport { AIMessageChunk } from \"@langchain/core/messages\";\nimport { ToolCall } from \"@langchain/core/messages/tool\";\nimport {\n  InteropZodType,\n  interopSafeParseAsync,\n} from \"@langchain/core/utils/types\";\nimport { WatsonxAuth, WatsonxInit } from \"../types/ibm.js\";\n\nexport const authenticateAndSetInstance = ({\n  watsonxAIApikey,\n  watsonxAIAuthType,\n  watsonxAIBearerToken,\n  watsonxAIUsername,\n  watsonxAIPassword,\n  watsonxAIUrl,\n  disableSSL,\n  version,\n  serviceUrl,\n}: WatsonxAuth & Omit<WatsonxInit, \"authenticator\">): WatsonXAI | undefined => {\n  if (watsonxAIAuthType === \"iam\" && watsonxAIApikey) {\n    return WatsonXAI.newInstance({\n      version,\n      serviceUrl,\n      authenticator: new IamAuthenticator({\n        apikey: watsonxAIApikey,\n      }),\n    });\n  } else if (watsonxAIAuthType === \"bearertoken\" && watsonxAIBearerToken) {\n    return WatsonXAI.newInstance({\n      version,\n      serviceUrl,\n      authenticator: new BearerTokenAuthenticator({\n        bearerToken: watsonxAIBearerToken,\n      }),\n    });\n  } else if (watsonxAIAuthType === \"cp4d\") {\n    // cp4d auth requires username with either Password of ApiKey but not both.\n    if (watsonxAIUsername && (watsonxAIPassword || watsonxAIApikey)) {\n      const watsonxCPDAuthUrl = watsonxAIUrl ?? serviceUrl;\n      return WatsonXAI.newInstance({\n        version,\n        serviceUrl,\n        disableSslVerification: disableSSL,\n        authenticator: new CloudPakForDataAuthenticator({\n          username: watsonxAIUsername,\n          password: watsonxAIPassword,\n          url: watsonxCPDAuthUrl.concat(\"/icp4d-api/v1/authorize\"),\n          apikey: watsonxAIApikey,\n          disableSslVerification: disableSSL,\n        }),\n      });\n    }\n  } else\n    return WatsonXAI.newInstance({\n      version,\n      serviceUrl,\n    });\n  return undefined;\n};\n\n// Mistral enforces a specific pattern for tool call IDs\n// Thanks to Mistral for implementing this, I was unable to import which is why this is copied 1:1\nconst TOOL_CALL_ID_PATTERN = /^[a-zA-Z0-9]{9}$/;\n\nexport function _isValidMistralToolCallId(toolCallId: string): boolean {\n  return TOOL_CALL_ID_PATTERN.test(toolCallId);\n}\n\nfunction _base62Encode(num: number): string {\n  let numCopy = num;\n  const base62 =\n    \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  if (numCopy === 0) return base62[0];\n  const arr: string[] = [];\n  const base = base62.length;\n  while (numCopy) {\n    arr.push(base62[numCopy % base]);\n    numCopy = Math.floor(numCopy / base);\n  }\n  return arr.reverse().join(\"\");\n}\n\nfunction _simpleHash(str: string): number {\n  let hash = 0;\n  for (let i = 0; i < str.length; i += 1) {\n    const char = str.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash &= hash; // Convert to 32-bit integer\n  }\n  return Math.abs(hash);\n}\n\nexport function _convertToolCallIdToMistralCompatible(\n  toolCallId: string\n): string {\n  if (_isValidMistralToolCallId(toolCallId)) {\n    return toolCallId;\n  } else {\n    const hash = _simpleHash(toolCallId);\n    const base62Str = _base62Encode(hash);\n    if (base62Str.length >= 9) {\n      return base62Str.slice(0, 9);\n    } else {\n      return base62Str.padStart(9, \"0\");\n    }\n  }\n}\n\ninterface WatsonxToolsOutputParserParams<T extends Record<string, any>>\n  extends JsonOutputKeyToolsParserParamsInterop<T> {}\n\nexport class WatsonxToolsOutputParser<\n  T extends Record<string, any> = Record<string, any>\n> extends JsonOutputToolsParser<T> {\n  static lc_name() {\n    return \"WatsonxToolsOutputParser\";\n  }\n\n  lc_namespace = [\"langchain\", \"watsonx\", \"output_parsers\"];\n\n  returnId = false;\n\n  keyName: string;\n\n  returnSingle = false;\n\n  zodSchema?: InteropZodType<T>;\n\n  latestCorrect?: ToolCall;\n\n  constructor(params: WatsonxToolsOutputParserParams<T>) {\n    super(params);\n    this.keyName = params.keyName;\n    this.returnSingle = params.returnSingle ?? this.returnSingle;\n    this.zodSchema = params.zodSchema;\n  }\n\n  protected async _validateResult(result: unknown): Promise<T> {\n    let parsedResult = result;\n    if (typeof result === \"string\") {\n      try {\n        parsedResult = JSON.parse(result);\n      } catch (e: any) {\n        throw new OutputParserException(\n          `Failed to parse. Text: \"${JSON.stringify(\n            result,\n            null,\n            2\n          )}\". Error: ${JSON.stringify(e.message)}`,\n          result\n        );\n      }\n    } else {\n      parsedResult = result;\n    }\n    if (this.zodSchema === undefined) {\n      return parsedResult as T;\n    }\n    const zodParsedResult = await interopSafeParseAsync(\n      this.zodSchema,\n      parsedResult\n    );\n    if (zodParsedResult.success) {\n      return zodParsedResult.data;\n    } else {\n      throw new OutputParserException(\n        `Failed to parse. Text: \"${JSON.stringify(\n          result,\n          null,\n          2\n        )}\". Error: ${JSON.stringify(zodParsedResult.error.issues)}`,\n        JSON.stringify(result, null, 2)\n      );\n    }\n  }\n\n  async parsePartialResult(generations: ChatGeneration[]): Promise<T> {\n    const tools = generations.flatMap((generation) => {\n      const message = generation.message as AIMessageChunk;\n      if (!Array.isArray(message.tool_calls)) {\n        return [];\n      }\n      const tool = message.tool_calls;\n      return tool;\n    });\n\n    if (tools[0] === undefined) {\n      if (this.latestCorrect) {\n        tools.push(this.latestCorrect);\n      } else {\n        const toolCall: ToolCall = { name: \"\", args: {} };\n        tools.push(toolCall);\n      }\n    }\n\n    const [tool] = tools;\n    tool.name = \"\";\n    this.latestCorrect = tool;\n    return tool.args as T;\n  }\n}\n\nexport function jsonSchemaToZod(obj: WatsonXAI.JsonObject | undefined) {\n  if (obj?.properties && obj.type === \"object\") {\n    const shape: Record<string, any> = {};\n\n    Object.keys(obj.properties).forEach((key) => {\n      if (obj.properties) {\n        const prop = obj.properties[key];\n\n        let zodType;\n        if (prop.type === \"string\") {\n          zodType = z.string();\n          if (prop?.pattern) {\n            zodType = zodType.regex(prop.pattern, \"Invalid pattern\");\n          }\n        } else if (\n          prop.type === \"number\" ||\n          prop.type === \"integer\" ||\n          prop.type === \"float\"\n        ) {\n          zodType = z.number();\n          if (typeof prop?.minimum === \"number\") {\n            zodType = zodType.min(prop.minimum, {\n              message: `${key} must be at least ${prop.minimum}`,\n            });\n          }\n          if (prop?.maximum)\n            zodType = zodType.lte(prop.maximum, {\n              message: `${key} must be maximum of ${prop.maximum}`,\n            });\n        } else if (prop.type === \"boolean\") zodType = z.boolean();\n        else if (prop.type === \"array\")\n          zodType = z.array(jsonSchemaToZod(prop.items));\n        else if (prop.type === \"object\") {\n          zodType = jsonSchemaToZod(prop);\n        } else throw new Error(`Unsupported type: ${prop.type}`);\n\n        if (prop.description) {\n          zodType = zodType.describe(prop.description);\n        }\n\n        if (!obj.required?.includes(key)) {\n          zodType = zodType.optional();\n        }\n\n        shape[key] = zodType;\n      }\n    });\n    return z.object(shape);\n  }\n  throw new Error(\"Unsupported root schema type\");\n}\n"],"mappings":"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"}