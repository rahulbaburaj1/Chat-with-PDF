{"version":3,"file":"vectara.d.ts","names":["Document","EmbeddingsInterface","VectorStore","BaseCallbackConfig","Callbacks","VectaraLibArgs","VectaraCallHeader","VectaraFile","Blob","VectaraContextConfig","MMRConfig","VectaraSummary","VectaraFilter","DEFAULT_FILTER","SummaryResult","VectaraRetrieverInput","VectaraStore","Record","Promise"],"sources":["../../src/vectorstores/vectara.d.ts"],"sourcesContent":["import { Document } from \"@langchain/core/documents\";\nimport type { EmbeddingsInterface } from \"@langchain/core/embeddings\";\nimport { VectorStore } from \"@langchain/core/vectorstores\";\nimport { BaseCallbackConfig, Callbacks } from \"@langchain/core/callbacks/manager\";\n/**\n * Interface for the arguments required to initialize a VectaraStore\n * instance.\n */\nexport interface VectaraLibArgs {\n    customerId: number;\n    corpusId: number | number[];\n    apiKey: string;\n    verbose?: boolean;\n    source?: string;\n}\n/**\n * Interface for the headers required for Vectara API calls.\n */\ninterface VectaraCallHeader {\n    headers: {\n        \"x-api-key\": string;\n        \"Content-Type\": string;\n        \"customer-id\": string;\n        \"X-Source\": string;\n    };\n}\n/**\n * Interface for the file objects to be uploaded to Vectara.\n */\nexport interface VectaraFile {\n    // The contents of the file to be uploaded.\n    blob: Blob;\n    // The name of the file to be uploaded.\n    fileName: string;\n}\n/**\n * Interface for the context configuration used in Vectara API calls.\n */\nexport interface VectaraContextConfig {\n    // The amount of context before. Ignored if sentences_before is set.\n    charsBefore?: number;\n    // The amount of context after. Ignored if sentences_after is set.\n    charsAfter?: number;\n    // The amount of context before, in sentences.\n    sentencesBefore?: number;\n    // The amount of context after, in sentences.\n    sentencesAfter?: number;\n    // The tag that wraps the snippet at the start.\n    startTag?: string;\n    // The tag that wraps the snippet at the end.\n    endTag?: string;\n}\nexport interface MMRConfig {\n    enabled?: boolean;\n    mmrTopK?: number;\n    diversityBias?: number;\n}\nexport interface VectaraSummary {\n    // Whether to enable summarization.\n    enabled: boolean;\n    // The name of the summarizer+prompt combination to use for summarization.\n    summarizerPromptName?: string;\n    // Maximum number of results to summarize.\n    maxSummarizedResults: number;\n    // ISO 639-1 or ISO 639-3 language code for the response, or \"auto\" to indicate that\n    // the auto-detected language of the incoming query should be used.\n    responseLang: string;\n}\n// VectaraFilter holds all the arguments for result retrieval by Vectara\n// It's not really a filter, but a collection of arguments for the Vectara API\n// However, it's been named \"XXXFilter\" in other places, so we keep the name here for consistency.\nexport interface VectaraFilter extends BaseCallbackConfig {\n    // The start position in the result set\n    start?: number;\n    // Example of a vectara filter string can be: \"doc.rating > 3.0 and part.lang = 'deu'\"\n    // See https://docs.vectara.com/docs/search-apis/sql/filter-overview for more details.\n    filter?: string;\n    // Improve retrieval accuracy using Hybrid search, by adjusting the value of lambda (0...1)\n    // between neural search and keyword-based search factors. Values between 0.01 and 0.2 tend to work well.\n    // see https://docs.vectara.com/docs/api-reference/search-apis/lexical-matching for more details.\n    lambda?: number;\n    // See Vectara Search API docs for more details on the following options: https://docs.vectara.com/docs/api-reference/search-apis/search\n    contextConfig?: VectaraContextConfig;\n    mmrConfig?: MMRConfig;\n}\nexport declare const DEFAULT_FILTER: VectaraFilter;\ninterface SummaryResult {\n    documents: Document[];\n    scores: number[];\n    summary: string;\n}\nexport interface VectaraRetrieverInput {\n    vectara: VectaraStore;\n    topK: number;\n    summaryConfig?: VectaraSummary;\n    callbacks?: Callbacks;\n    tags?: string[];\n    metadata?: Record<string, unknown>;\n    verbose?: boolean;\n}\n/**\n * Class for interacting with the Vectara API. Extends the VectorStore\n * class.\n */\nexport declare class VectaraStore extends VectorStore {\n    get lc_secrets(): {\n        [key: string]: string;\n    };\n    get lc_aliases(): {\n        [key: string]: string;\n    };\n    FilterType: VectaraFilter;\n    private apiEndpoint;\n    private apiKey;\n    private corpusId;\n    private customerId;\n    private verbose;\n    private source;\n    private vectaraApiTimeoutSeconds;\n    _vectorstoreType(): string;\n    constructor(args: VectaraLibArgs);\n    /**\n     * Returns a header for Vectara API calls.\n     * @returns A Promise that resolves to a VectaraCallHeader object.\n     */\n    getJsonHeader(): Promise<VectaraCallHeader>;\n    /**\n     * Throws an error, as this method is not implemented. Use addDocuments\n     * instead.\n     * @param _vectors Not used.\n     * @param _documents Not used.\n     * @returns Does not return a value.\n     */\n    addVectors(_vectors: number[][], _documents: Document[]): Promise<void>;\n    /**\n     * Method to delete data from the Vectara corpus.\n     * @param params an array of document IDs to be deleted\n     * @returns Promise that resolves when the deletion is complete.\n     */\n    deleteDocuments(ids: string[]): Promise<void>;\n    /**\n     * Adds documents to the Vectara store.\n     * @param documents An array of Document objects to add to the Vectara store.\n     * @returns A Promise that resolves to an array of document IDs indexed in Vectara.\n     */\n    addDocuments(documents: Document[]): Promise<string[]>;\n    /**\n     * Vectara provides a way to add documents directly via their API. This API handles\n     * pre-processing and chunking internally in an optimal manner. This method is a wrapper\n     * to utilize that API within LangChain.\n     *\n     * @param files An array of VectaraFile objects representing the files and their respective file names to be uploaded to Vectara.\n     * @param metadata Optional. An array of metadata objects corresponding to each file in the `filePaths` array.\n     * @returns A Promise that resolves to the number of successfully uploaded files.\n     */\n    addFiles(files: VectaraFile[], metadatas?: Record<string, unknown> | undefined): Promise<string[]>;\n    /**\n     * Performs a Vectara API call based on the arguments provided.\n     * @param query The query string for the similarity search.\n     * @param k Optional. The number of results to return. Default is 10.\n     * @param filter Optional. A VectaraFilter object to refine the search results.\n     * @returns A Promise that resolves to an array of tuples, each containing a Document and its score.\n     */\n    vectaraQuery(query: string, k: number, vectaraFilterObject: VectaraFilter, summary?: VectaraSummary): Promise<SummaryResult>;\n    /**\n     * Performs a similarity search and returns documents along with their\n     * scores.\n     * @param query The query string for the similarity search.\n     * @param k Optional. The number of results to return. Default is 10.\n     * @param filter Optional. A VectaraFilter object to refine the search results.\n     * @returns A Promise that resolves to an array of tuples, each containing a Document and its score.\n     */\n    similaritySearchWithScore(query: string, k?: number, filter?: VectaraFilter): Promise<[Document, number][]>;\n    /**\n     * Performs a similarity search and returns documents.\n     * @param query The query string for the similarity search.\n     * @param k Optional. The number of results to return. Default is 10.\n     * @param filter Optional. A VectaraFilter object to refine the search results.\n     * @returns A Promise that resolves to an array of Document objects.\n     */\n    similaritySearch(query: string, k?: number, filter?: VectaraFilter): Promise<Document[]>;\n    /**\n     * Throws an error, as this method is not implemented. Use\n     * similaritySearch or similaritySearchWithScore instead.\n     * @param _query Not used.\n     * @param _k Not used.\n     * @param _filter Not used.\n     * @returns Does not return a value.\n     */\n    similaritySearchVectorWithScore(_query: number[], _k: number, _filter?: VectaraFilter | undefined): Promise<[Document, number][]>;\n    /**\n     * Creates a VectaraStore instance from texts.\n     * @param texts An array of text strings.\n     * @param metadatas Metadata for the texts. Can be a single object or an array of objects.\n     * @param _embeddings Not used.\n     * @param args A VectaraLibArgs object for initializing the VectaraStore instance.\n     * @returns A Promise that resolves to a VectaraStore instance.\n     */\n    static fromTexts(texts: string[], metadatas: object | object[], _embeddings: EmbeddingsInterface, args: VectaraLibArgs): Promise<VectaraStore>;\n    /**\n     * Creates a VectaraStore instance from documents.\n     * @param docs An array of Document objects.\n     * @param _embeddings Not used.\n     * @param args A VectaraLibArgs object for initializing the VectaraStore instance.\n     * @returns A Promise that resolves to a VectaraStore instance.\n     */\n    static fromDocuments(docs: Document[], _embeddings: EmbeddingsInterface, args: VectaraLibArgs): Promise<VectaraStore>;\n}\nexport {};\n"],"mappings":";;;;;;;;;;;;;UAQiBK,cAAAA;;;;;;;;;;UAUPC,iBAAAA;EAVOD,OAAAA,EAAAA;IAUPC,WAAAA,EAAAA,MAAiB;IAWVC,cAAW,EAAA,MAElBC;IAOOC,aAAAA,EAAAA,MAAoB;IAcpBC,UAAS,EAAA,MAAA;EAKTC,CAAAA;AAcjB;;;;AAAuCR,UA1CtBI,WAAAA,CA0CsBJ;EAAkB;EAcpCU,IAAAA,EAtDXL,IAsDWK;EACXC;EAKOC,QAAAA,EAAAA,MAAAA;;;;;AAMFE,UA3DER,oBAAAA,CA2DFQ;EAAM;EAOAD,WAAAA,CAAAA,EAAAA,MAAY;EAAA;EAAA,UAOjBJ,CAAAA,EAAAA,MAAAA;EAAa;EASO,eAKPN,CAAAA,EAAAA,MAAAA;EAAiB;EAAlB,cAQqBN,CAAAA,EAAAA,MAAAA;EAAQ;EAAY,QAMjCkB,CAAAA,EAAAA,MAAAA;EAAO;EAMP,MAAKA,CAAAA,EAAAA,MAAAA;;AAUMD,UAvG9BP,SAAAA,CAuG8BO;EAAM,OAAgCC,CAAAA,EAAAA,OAAAA;EAAO,OAQ5BN,CAAAA,EAAAA,MAAAA;EAAa,aAAYD,CAAAA,EAAAA,MAAAA;;AAAiBO,UA1GzFP,cAAAA,CA0GyFO;EAAO;EASlC,OAAYlB,EAAAA,OAAAA;EAAQ;EAAV,oBAQhCY,CAAAA,EAAAA,MAAAA;EAAa;EAAmB,oBAAhBM,EAAAA,MAAAA;EAAO;EASS;EAAgC,YAAjBA,EAAAA,MAAAA;;;;;AAiBzElB,UAvIdY,aAAAA,SAAsBT,kBAuIRH,CAAAA;EAAQ;EAAoC,KAAQK,CAAAA,EAAAA,MAAAA;EAAc;EAAuB;EAAb,MAtGjEH,CAAAA,EAAAA,MAAAA;EAAW;;;;;kBAtBjCO;cACJC;;cAEKG,gBAAgBD;UAC3BE,aAAAA;aACKd;;;;UAIEe,qBAAAA;WACJC;;kBAEOL;cACJP;;aAEDa;;;;;;;cAOMD,YAAAA,SAAqBd,WAAAA;;;;;;;cAO1BU;;;;;;;;;oBASMP;;;;;mBAKDa,QAAQZ;;;;;;;;+CAQoBN,aAAakB;;;;;;kCAM1BA;;;;;;0BAMRlB,aAAakB;;;;;;;;;;kBAUrBX,2BAA2BU,sCAAsCC;;;;;;;;8DAQrBN,yBAAyBD,iBAAiBO,QAAQJ;;;;;;;;;gEAShDF,gBAAgBM,SAASlB;;;;;;;;uDAQlCY,gBAAgBM,QAAQlB;;;;;;;;;0EASLY,4BAA4BM,SAASlB;;;;;;;;;+EAShCC,2BAA2BI,iBAAiBa,QAAQF;;;;;;;;6BAQtGhB,yBAAyBC,2BAA2BI,iBAAiBa,QAAQF"}