{"version":3,"file":"zep_cloud.d.cts","names":["ZepClient","SearchScope","SearchType","BaseRetriever","BaseRetrieverInput","Document","ZepCloudRetrieverConfig","Record","ZepCloudRetriever","Promise"],"sources":["../../src/retrievers/zep_cloud.d.ts"],"sourcesContent":["import { ZepClient } from \"@getzep/zep-cloud\";\nimport { SearchScope, SearchType } from \"@getzep/zep-cloud/api\";\nimport { BaseRetriever, BaseRetrieverInput } from \"@langchain/core/retrievers\";\nimport { Document } from \"@langchain/core/documents\";\n/**\n * Configuration interface for the ZepRetriever class. Extends the\n * BaseRetrieverInput interface.\n *\n * @argument {string} sessionId - The ID of the Zep session.\n * @argument {string} [apiKey] - The Zep Cloud Project Key.\n * @argument {number} [topK] - The number of results to return.\n * @argument [searchScope] [searchScope] - The scope of the search: \"messages\" or \"summary\".\n * @argument [searchType] [searchType] - The type of search to perform: \"similarity\" or \"mmr\".\n * @argument {number} [mmrLambda] - The lambda value for the MMR search.\n * @argument {Record<string, unknown>} [filter] - The metadata filter to apply to the search.\n */\nexport interface ZepCloudRetrieverConfig extends BaseRetrieverInput {\n    sessionId: string;\n    topK?: number;\n    apiKey: string;\n    searchScope?: SearchScope;\n    searchType?: SearchType;\n    mmrLambda?: number;\n    filter?: Record<string, unknown>;\n}\n/**\n * Class for retrieving information from a Zep Cloud long-term memory store.\n * Extends the BaseRetriever class.\n * @example\n * ```typescript\n * const retriever = new ZepCloudRetriever({\n *   apiKey: \"<zep cloud project api key>\",\n *   sessionId: \"session_exampleUUID\",\n *   topK: 3,\n * });\n * const query = \"Can I drive red cars in France?\";\n * const docs = await retriever.getRelevantDocuments(query);\n * ```\n */\nexport declare class ZepCloudRetriever extends BaseRetriever {\n    static lc_name(): string;\n    lc_namespace: string[];\n    get lc_secrets(): {\n        [key: string]: string;\n    } | undefined;\n    get lc_aliases(): {\n        [key: string]: string;\n    } | undefined;\n    client: ZepClient;\n    private sessionId;\n    private topK?;\n    private searchScope?;\n    private searchType?;\n    private mmrLambda?;\n    private filter?;\n    constructor(config: ZepCloudRetrieverConfig);\n    /**\n     *  Converts an array of message search results to an array of Document objects.\n     *  @param {MemorySearchResult[]} results - The array of search results.\n     *  @returns {Document[]} An array of Document objects representing the search results.\n     */\n    private searchMessageResultToDoc;\n    /**\n     *  Converts an array of summary search results to an array of Document objects.\n     *  @param {MemorySearchResult[]} results - The array of search results.\n     *  @returns {Document[]} An array of Document objects representing the search results.\n     */\n    private searchSummaryResultToDoc;\n    /**\n     *  Retrieves the relevant documents based on the given query.\n     *  @param {string} query - The query string.\n     *  @returns {Promise<Document[]>} A promise that resolves to an array of relevant Document objects.\n     */\n    _getRelevantDocuments(query: string): Promise<Document[]>;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAgBA;;;;AAOaO,UAPID,uBAAAA,SAAgCF,kBAOpCG,CAAAA;EAAM,SAP8BH,EAAAA,MAAAA;EAAkB,IAAA,CAAA,EAAA,MAAA;EAuB9CI,MAAAA,EAAAA,MAAAA;EAAiB,WAAA,CAAA,EAnBpBP,WAmBoB;EAAA,UAS1BD,CAAAA,EA3BKE,UA2BLF;EAAS,SAOGM,CAAAA,EAAAA,MAAAA;EAAuB,MAkBGD,CAAAA,EAlDrCE,MAkDqCF,CAAAA,MAAAA,EAAAA,OAAAA,CAAAA;;;AAlCU;;;;;;;;;;;;;cAAvCG,iBAAAA,SAA0BL,aAAAA;;;;;;;;;UASnCH;;;;;;;sBAOYM;;;;;;;;;;;;;;;;;;wCAkBkBG,QAAQJ"}