{"version":3,"file":"playwright.d.cts","names":["LaunchOptions","Page","Browser","Response","Document","BaseDocumentLoader","DocumentLoader","PlaywrightGotoOptions","PlaywrightEvaluate","Promise","PlaywrightWebBaseLoaderOptions","PlaywrightWebBaseLoader","playwright0","chromium"],"sources":["../../../src/document_loaders/web/playwright.d.ts"],"sourcesContent":["import type { LaunchOptions, Page, Browser, Response } from \"playwright\";\nimport { Document } from \"@langchain/core/documents\";\nimport { BaseDocumentLoader } from \"@langchain/core/document_loaders/base\";\nimport type { DocumentLoader } from \"@langchain/core/document_loaders/base\";\nexport { Page, Browser, Response };\nexport type PlaywrightGotoOptions = {\n    referer?: string;\n    timeout?: number;\n    waitUntil?: \"load\" | \"domcontentloaded\" | \"networkidle\" | \"commit\";\n};\n/**\n * Type representing a function for evaluating JavaScript code on a web\n * page using Playwright. Takes a Page, Browser, and Response object as\n * parameters and returns a Promise that resolves to a string.\n */\nexport type PlaywrightEvaluate = (page: Page, browser: Browser, response: Response | null) => Promise<string>;\nexport type PlaywrightWebBaseLoaderOptions = {\n    launchOptions?: LaunchOptions;\n    gotoOptions?: PlaywrightGotoOptions;\n    evaluate?: PlaywrightEvaluate;\n};\n/**\n * Class representing a document loader for scraping web pages using\n * Playwright. Extends the BaseDocumentLoader class and implements the\n * DocumentLoader interface.\n */\nexport declare class PlaywrightWebBaseLoader extends BaseDocumentLoader implements DocumentLoader {\n    webPath: string;\n    options: PlaywrightWebBaseLoaderOptions | undefined;\n    constructor(webPath: string, options?: PlaywrightWebBaseLoaderOptions);\n    static _scrape(url: string, options?: PlaywrightWebBaseLoaderOptions): Promise<string>;\n    /**\n     * Method that calls the _scrape method to perform the scraping of the web\n     * page specified by the webPath property. Returns a Promise that resolves\n     * to the scraped HTML content of the web page.\n     * @returns Promise that resolves to the scraped HTML content of the web page.\n     */\n    scrape(): Promise<string>;\n    /**\n     * Method that calls the scrape method and returns the scraped HTML\n     * content as a Document object. Returns a Promise that resolves to an\n     * array of Document objects.\n     * @returns Promise that resolves to an array of Document objects.\n     */\n    load(): Promise<Document[]>;\n    /**\n     * Static method that imports the necessary Playwright modules. Returns a\n     * Promise that resolves to an object containing the imported modules.\n     * @returns Promise that resolves to an object containing the imported modules.\n     */\n    static imports(): Promise<{\n        chromium: typeof import(\"playwright\").chromium;\n    }>;\n}\n"],"mappings":";;;;;;;;;KAKYO,qBAAAA;;;;;;;;;;KAUAC,kBAAAA,UAA4BP,eAAeC,mBAAmBC,oBAAoBM;KAClFC,8BAAAA;EAXAH,aAAAA,CAAAA,EAYQP,aAZa;EAUrBQ,WAAAA,CAAAA,EAGMD,qBAHY;EAAA,QAAA,CAAA,EAIfC,kBAJe;CAAA;;;;AAAuE;AACrG;AAA0C,cAUrBG,uBAAAA,SAAgCN,kBAAAA,YAA8BC,cAVzC,CAAA;EAAA,OACtBN,EAAAA,MAAAA;EAAa,OACfO,EAULG,8BAVKH,GAAAA,SAAAA;EAAqB,WACxBC,CAAAA,OAAAA,EAAAA,MAAAA,EAAAA,OAAAA,CAAAA,EAU4BE,8BAV5BF;EAAkB,OAAA,OAAA,CAAA,GAAA,EAAA,MAAA,EAAA,OAAA,CAAA,EAWSE,8BAXT,CAAA,EAW0CD,OAX1C,CAAA,MAAA,CAAA;EAOZE;;;;;;EAI6D,MAOpEF,CAAAA,CAAAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA;EAAO;;;;;;EAX4E,IAAA,CAAA,CAAA,EAkBrFA,OAlBqF,CAkB7EL,QAlB6E,EAAA,CAAA;;;;;;oBAwB3EK;qBANHG,WAAAA,CAO2BC"}