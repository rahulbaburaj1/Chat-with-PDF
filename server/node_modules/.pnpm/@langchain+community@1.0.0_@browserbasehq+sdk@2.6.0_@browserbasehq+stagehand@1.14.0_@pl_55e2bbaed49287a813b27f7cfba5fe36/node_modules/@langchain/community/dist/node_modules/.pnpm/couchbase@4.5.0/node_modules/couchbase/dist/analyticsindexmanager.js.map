{"version":3,"file":"analyticsindexmanager.js","names":["AnalyticsLinkType","AnalyticsEncryptionLevel"],"sources":["../../../../../../../../../node_modules/.pnpm/couchbase@4.5.0/node_modules/couchbase/dist/analyticsindexmanager.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AnalyticsIndexManager = exports.AzureExternalAnalyticsLink = exports.S3ExternalAnalyticsLink = exports.CouchbaseRemoteAnalyticsLink = exports.AnalyticsLink = exports.CouchbaseAnalyticsEncryptionSettings = exports.AnalyticsIndex = exports.AnalyticsDataset = exports.AnalyticsEncryptionLevel = exports.AnalyticsLinkType = void 0;\nconst errors_1 = require(\"./errors\");\nconst bindingutilities_1 = require(\"./bindingutilities\");\nconst utilities_1 = require(\"./utilities\");\n/**\n * Represents the type of an analytics link.\n *\n * @category Analytics\n */\nvar AnalyticsLinkType;\n(function (AnalyticsLinkType) {\n    /**\n     * Indicates that the link is for S3.\n     */\n    AnalyticsLinkType[\"S3External\"] = \"s3\";\n    /**\n     * Indicates that the link is for Azure.\n     */\n    AnalyticsLinkType[\"AzureBlobExternal\"] = \"azureblob\";\n    /**\n     * Indicates that the link is for a remote Couchbase cluster.\n     */\n    AnalyticsLinkType[\"CouchbaseRemote\"] = \"couchbase\";\n})(AnalyticsLinkType || (exports.AnalyticsLinkType = AnalyticsLinkType = {}));\n/**\n * Represents what level of encryption to use for analytics remote links.\n *\n * @category Analytics\n */\nvar AnalyticsEncryptionLevel;\n(function (AnalyticsEncryptionLevel) {\n    /**\n     * Indicates that no encryption should be used.\n     */\n    AnalyticsEncryptionLevel[\"None\"] = \"none\";\n    /**\n     * Indicates that half encryption should be used.\n     */\n    AnalyticsEncryptionLevel[\"Half\"] = \"half\";\n    /**\n     * Indicates that full encryption should be used.\n     */\n    AnalyticsEncryptionLevel[\"Full\"] = \"full\";\n})(AnalyticsEncryptionLevel || (exports.AnalyticsEncryptionLevel = AnalyticsEncryptionLevel = {}));\n/**\n * Contains a specific dataset configuration for the analytics service.\n *\n * @category Management\n */\nclass AnalyticsDataset {\n    /**\n     * @internal\n     */\n    constructor(data) {\n        this.name = data.name;\n        this.dataverseName = data.dataverseName;\n        this.linkName = data.linkName;\n        this.bucketName = data.bucketName;\n    }\n}\nexports.AnalyticsDataset = AnalyticsDataset;\n/**\n * Contains a specific index configuration for the analytics service.\n *\n * @category Management\n */\nclass AnalyticsIndex {\n    /**\n     * @internal\n     */\n    constructor(data) {\n        this.name = data.name;\n        this.datasetName = data.datasetName;\n        this.dataverseName = data.dataverseName;\n        this.isPrimary = data.isPrimary;\n    }\n}\nexports.AnalyticsIndex = AnalyticsIndex;\n/**\n * Includes information about an analytics remote links encryption.\n */\nclass CouchbaseAnalyticsEncryptionSettings {\n    /**\n     * @internal\n     */\n    constructor(data) {\n        this.encryptionLevel = data.encryptionLevel;\n        this.certificate = data.certificate;\n        this.clientCertificate = data.clientCertificate;\n        this.clientKey = data.clientKey;\n    }\n}\nexports.CouchbaseAnalyticsEncryptionSettings = CouchbaseAnalyticsEncryptionSettings;\n/**\n * This is a base class for specific link configurations for the analytics service.\n */\nclass AnalyticsLink {\n    /**\n     * @internal\n     */\n    constructor() {\n        this.linkType = '';\n        this.dataverse = '';\n        this.name = '';\n    }\n    /**\n     * @internal\n     */\n    static _toHttpData(data) {\n        if (data.linkType === AnalyticsLinkType.CouchbaseRemote) {\n            return CouchbaseRemoteAnalyticsLink._toHttpData(new CouchbaseRemoteAnalyticsLink(data));\n        }\n        else if (data.linkType === AnalyticsLinkType.S3External) {\n            return S3ExternalAnalyticsLink._toHttpData(new S3ExternalAnalyticsLink(data));\n        }\n        else if (data.linkType === AnalyticsLinkType.AzureBlobExternal) {\n            return AzureExternalAnalyticsLink._toHttpData(new AzureExternalAnalyticsLink(data));\n        }\n        else {\n            throw new Error('invalid link type');\n        }\n    }\n    /**\n     * @internal\n     */\n    static _fromHttpData(data) {\n        if (data.type === 'couchbase') {\n            return CouchbaseRemoteAnalyticsLink._fromHttpData(data);\n        }\n        else if (data.type === 's3') {\n            return S3ExternalAnalyticsLink._fromHttpData(data);\n        }\n        else if (data.type === 'azure') {\n            return AzureExternalAnalyticsLink._fromHttpData(data);\n        }\n        else {\n            throw new Error('invalid link type');\n        }\n    }\n}\nexports.AnalyticsLink = AnalyticsLink;\n/**\n * Provides information about a analytics remote Couchbase link.\n */\nclass CouchbaseRemoteAnalyticsLink extends AnalyticsLink {\n    /**\n     * Validates the CouchbaseRemoteAnalyticsLink.\n     */\n    validate() {\n        if (!this.dataverse) {\n            throw new errors_1.InvalidArgumentError(new Error('Must provide a dataverse for the CouchbaseRemoteAnalyticsLink.'));\n        }\n        if (!this.name) {\n            throw new errors_1.InvalidArgumentError(new Error('Must provide a name for the CouchbaseRemoteAnalyticsLink.'));\n        }\n        if (!this.hostname) {\n            throw new errors_1.InvalidArgumentError(new Error('Must provide a hostname for the CouchbaseRemoteAnalyticsLink.'));\n        }\n        if (this.encryption) {\n            if ([AnalyticsEncryptionLevel.None, AnalyticsEncryptionLevel.Half].includes(this.encryption.encryptionLevel)) {\n                if (!this.username || !this.password) {\n                    throw new errors_1.InvalidArgumentError(new Error('When encryption level is half or none, username and password must be set for the CouchbaseRemoteAnalyticsLink.'));\n                }\n            }\n            else {\n                if (!this.encryption.certificate ||\n                    this.encryption.certificate.length == 0) {\n                    throw new errors_1.InvalidArgumentError(new Error('When encryption level full, a certificate must be set for the CouchbaseRemoteAnalyticsLink.'));\n                }\n                const clientCertificateInvalid = !this.encryption.clientCertificate ||\n                    this.encryption.clientCertificate.length == 0;\n                const clientKeyInvalid = !this.encryption.clientKey || this.encryption.clientKey.length == 0;\n                if (clientCertificateInvalid || clientKeyInvalid) {\n                    throw new errors_1.InvalidArgumentError(new Error('When encryption level full, a client key and certificate must be set for the CouchbaseRemoteAnalyticsLink.'));\n                }\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    constructor(data) {\n        super();\n        this.linkType = AnalyticsLinkType.CouchbaseRemote;\n        this.dataverse = data.dataverse;\n        this.name = data.name;\n        this.hostname = data.hostname;\n        this.encryption = data.encryption;\n        this.username = data.username;\n        this.password = data.password;\n    }\n    /**\n     * @internal\n     */\n    static _toCppData(data) {\n        data.validate();\n        return {\n            link_name: data.name,\n            dataverse: data.dataverse,\n            hostname: data.hostname,\n            username: data.hostname,\n            password: data.password,\n            encryption: (0, bindingutilities_1.encryptionSettingsToCpp)(data.encryption),\n        };\n    }\n    /**\n     * @internal\n     */\n    static _fromCppData(data) {\n        return new CouchbaseRemoteAnalyticsLink({\n            linkType: AnalyticsLinkType.CouchbaseRemote,\n            dataverse: data.dataverse,\n            name: data.link_name,\n            hostname: data.hostname,\n            encryption: (0, bindingutilities_1.encryptionSettingsFromCpp)(data.encryption),\n            username: data.username,\n            password: undefined,\n        });\n    }\n}\nexports.CouchbaseRemoteAnalyticsLink = CouchbaseRemoteAnalyticsLink;\n/**\n * Provides information about a analytics remote S3 link.\n */\nclass S3ExternalAnalyticsLink extends AnalyticsLink {\n    /**\n     * @internal\n     */\n    constructor(data) {\n        super();\n        this.linkType = AnalyticsLinkType.S3External;\n        this.dataverse = data.dataverse;\n        this.name = data.name;\n        this.accessKeyId = data.accessKeyId;\n        this.secretAccessKey = data.secretAccessKey;\n        this.sessionToken = data.sessionToken;\n        this.region = data.region;\n        this.serviceEndpoint = data.serviceEndpoint;\n    }\n    /**\n     * Validates the S3ExternalAnalyticsLink.\n     */\n    validate() {\n        if (!this.dataverse) {\n            throw new errors_1.InvalidArgumentError(new Error('Must provide a dataverse for the S3ExternalAnalyticsLink.'));\n        }\n        if (!this.name) {\n            throw new errors_1.InvalidArgumentError(new Error('Must provide a name for the S3ExternalAnalyticsLink.'));\n        }\n        if (!this.accessKeyId) {\n            throw new errors_1.InvalidArgumentError(new Error('Must provide an accessKeyId for the S3ExternalAnalyticsLink.'));\n        }\n        if (!this.secretAccessKey) {\n            throw new errors_1.InvalidArgumentError(new Error('Must provide an secretAccessKey for the S3ExternalAnalyticsLink.'));\n        }\n        if (!this.region) {\n            throw new errors_1.InvalidArgumentError(new Error('Must provide an region for the S3ExternalAnalyticsLink.'));\n        }\n    }\n    /**\n     * @internal\n     */\n    static _toCppData(data) {\n        data.validate();\n        return {\n            link_name: data.name,\n            dataverse: data.dataverse,\n            access_key_id: data.accessKeyId,\n            secret_access_key: data.secretAccessKey,\n            session_token: data.sessionToken,\n            region: data.region,\n            service_endpoint: data.serviceEndpoint,\n        };\n    }\n    /**\n     * @internal\n     */\n    static _fromCppData(data) {\n        return new S3ExternalAnalyticsLink({\n            name: data.link_name,\n            linkType: AnalyticsLinkType.S3External,\n            dataverse: data.dataverse,\n            accessKeyId: data.access_key_id,\n            secretAccessKey: undefined,\n            sessionToken: undefined,\n            region: data.region,\n            serviceEndpoint: data.service_endpoint,\n        });\n    }\n}\nexports.S3ExternalAnalyticsLink = S3ExternalAnalyticsLink;\n/**\n * Provides information about a analytics remote S3 link.\n */\nclass AzureExternalAnalyticsLink extends AnalyticsLink {\n    /**\n     * @internal\n     */\n    constructor(data) {\n        super();\n        this.linkType = AnalyticsLinkType.AzureBlobExternal;\n        this.dataverse = data.dataverse;\n        this.name = data.name;\n        this.connectionString = data.connectionString;\n        this.accountName = data.accountName;\n        this.accountKey = data.accountKey;\n        this.sharedAccessSignature = data.sharedAccessSignature;\n        this.blobEndpoint = data.blobEndpoint;\n        this.endpointSuffix = data.endpointSuffix;\n    }\n    /**\n     * Validates the AzureExternalAnalyticsLink.\n     */\n    validate() {\n        if (!this.dataverse) {\n            throw new errors_1.InvalidArgumentError(new Error('Must provide a dataverse for the AzureExternalAnalyticsLink.'));\n        }\n        if (!this.name) {\n            throw new errors_1.InvalidArgumentError(new Error('Must provide a name for the AzureExternalAnalyticsLink.'));\n        }\n        if (!this.connectionString) {\n            const missingAcctNameAndKey = !(this.accountName && this.accountKey);\n            const missingAcctNameAndSharedAccessSignature = !(this.accountName && this.sharedAccessSignature);\n            if (missingAcctNameAndKey && missingAcctNameAndSharedAccessSignature) {\n                throw new errors_1.InvalidArgumentError(new Error('If not providing connectionString, accountName and either accountKey' +\n                    ' or sharedAccessSignature must be provided for the AzureExternalAnalyticsLink.'));\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    static _toCppData(data) {\n        data.validate();\n        return {\n            link_name: data.name,\n            dataverse: data.dataverse,\n            connection_string: data.connectionString,\n            account_name: data.accountName,\n            account_key: data.accountKey,\n            shared_access_signature: data.sharedAccessSignature,\n            blob_endpoint: data.blobEndpoint,\n            endpoint_suffix: data.endpointSuffix,\n        };\n    }\n    /**\n     * @internal\n     */\n    static _fromCppData(data) {\n        return new AzureExternalAnalyticsLink({\n            name: data.link_name,\n            linkType: AnalyticsLinkType.AzureBlobExternal,\n            dataverse: data.dataverse,\n            connectionString: undefined,\n            accountName: data.account_name,\n            accountKey: undefined,\n            sharedAccessSignature: undefined,\n            blobEndpoint: data.blob_endpoint,\n            endpointSuffix: data.endpoint_suffix,\n        });\n    }\n}\nexports.AzureExternalAnalyticsLink = AzureExternalAnalyticsLink;\n/**\n * AnalyticsIndexManager provides an interface for performing management\n * operations against the analytics service of the cluster.\n *\n * @category Management\n */\nclass AnalyticsIndexManager {\n    /**\n     * @internal\n     */\n    constructor(cluster) {\n        this._cluster = cluster;\n    }\n    /**\n     * Creates a new dataverse.\n     *\n     * @param dataverseName The name of the dataverse to create.\n     * @param options Optional parameters for this operation.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async createDataverse(dataverseName, options, callback) {\n        if (options instanceof Function) {\n            callback = arguments[1];\n            options = undefined;\n        }\n        if (!options) {\n            options = {};\n        }\n        const timeout = options.timeout || this._cluster.managementTimeout;\n        const ignoreIfExists = options.ignoreIfExists || false;\n        return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n            this._cluster.conn.managementAnalyticsDataverseCreate({\n                dataverse_name: dataverseName,\n                timeout: timeout,\n                ignore_if_exists: ignoreIfExists,\n            }, (cppErr) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                if (err) {\n                    return wrapCallback(err, null);\n                }\n                wrapCallback(err);\n            });\n        }, callback);\n    }\n    /**\n     * Drops a previously created dataverse.\n     *\n     * @param dataverseName The name of the dataverse to drop.\n     * @param options Optional parameters for this operation.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async dropDataverse(dataverseName, options, callback) {\n        if (options instanceof Function) {\n            callback = arguments[1];\n            options = undefined;\n        }\n        if (!options) {\n            options = {};\n        }\n        const timeout = options.timeout || this._cluster.managementTimeout;\n        const ignoreIfNotExists = options.ignoreIfNotExists || false;\n        return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n            this._cluster.conn.managementAnalyticsDataverseDrop({\n                dataverse_name: dataverseName,\n                timeout: timeout,\n                ignore_if_does_not_exist: ignoreIfNotExists,\n            }, (cppErr) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                if (err) {\n                    return wrapCallback(err, null);\n                }\n                wrapCallback(err);\n            });\n        }, callback);\n    }\n    /**\n     * Creates a new dataset.\n     *\n     * @param bucketName The name of the bucket to create this dataset of.\n     * @param datasetName The name of the new dataset.\n     * @param options Optional parameters for this operation.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async createDataset(bucketName, datasetName, options, callback) {\n        if (options instanceof Function) {\n            callback = arguments[2];\n            options = undefined;\n        }\n        if (!options) {\n            options = {};\n        }\n        const dataverseName = options.dataverseName || 'Default';\n        const ignoreIfExists = options.ignoreIfExists || false;\n        const timeout = options.timeout || this._cluster.managementTimeout;\n        return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n            this._cluster.conn.managementAnalyticsDatasetCreate({\n                dataverse_name: dataverseName,\n                dataset_name: datasetName,\n                bucket_name: bucketName,\n                condition: options === null || options === void 0 ? void 0 : options.condition,\n                timeout: timeout,\n                ignore_if_exists: ignoreIfExists,\n            }, (cppErr) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                if (err) {\n                    return wrapCallback(err, null);\n                }\n                wrapCallback(err);\n            });\n        }, callback);\n    }\n    /**\n     * Drops a previously created dataset.\n     *\n     * @param datasetName The name of the dataset to drop.\n     * @param options Optional parameters for this operation.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async dropDataset(datasetName, options, callback) {\n        if (options instanceof Function) {\n            callback = arguments[1];\n            options = undefined;\n        }\n        if (!options) {\n            options = {};\n        }\n        const dataverseName = options.dataverseName || 'Default';\n        const ignoreIfNotExists = options.ignoreIfNotExists || false;\n        const timeout = options.timeout || this._cluster.managementTimeout;\n        return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n            this._cluster.conn.managementAnalyticsDatasetDrop({\n                dataverse_name: dataverseName,\n                dataset_name: datasetName,\n                timeout: timeout,\n                ignore_if_does_not_exist: ignoreIfNotExists,\n            }, (cppErr) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                if (err) {\n                    return wrapCallback(err, null);\n                }\n                wrapCallback(err);\n            });\n        }, callback);\n    }\n    /**\n     * Returns a list of all existing datasets.\n     *\n     * @param options Optional parameters for this operation.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async getAllDatasets(options, callback) {\n        if (options instanceof Function) {\n            callback = arguments[0];\n            options = undefined;\n        }\n        if (!options) {\n            options = {};\n        }\n        const timeout = options.timeout || this._cluster.managementTimeout;\n        return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n            this._cluster.conn.managementAnalyticsDatasetGetAll({\n                timeout: timeout,\n            }, (cppErr, resp) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                if (err) {\n                    return wrapCallback(err, null);\n                }\n                const dataSets = resp.datasets.map((dataset) => new AnalyticsDataset({\n                    name: dataset.name,\n                    dataverseName: dataset.dataverse_name,\n                    linkName: dataset.link_name,\n                    bucketName: dataset.bucket_name,\n                }));\n                wrapCallback(null, dataSets);\n            });\n        }, callback);\n    }\n    /**\n     * Creates a new index.\n     *\n     * @param datasetName The name of the dataset to create this index on.\n     * @param indexName The name of index to create.\n     * @param fields A map of fields that the index should contain.\n     * @param options Optional parameters for this operation.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async createIndex(datasetName, indexName, fields, options, callback) {\n        if (options instanceof Function) {\n            callback = arguments[3];\n            options = undefined;\n        }\n        if (!options) {\n            options = {};\n        }\n        const dataverseName = options.dataverseName || 'Default';\n        const ignoreIfExists = options.ignoreIfExists || false;\n        const timeout = options.timeout || this._cluster.managementTimeout;\n        return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n            this._cluster.conn.managementAnalyticsIndexCreate({\n                dataverse_name: dataverseName,\n                dataset_name: datasetName,\n                index_name: indexName,\n                fields: fields,\n                timeout: timeout,\n                ignore_if_exists: ignoreIfExists,\n            }, (cppErr) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                if (err) {\n                    return wrapCallback(err, null);\n                }\n                wrapCallback(err);\n            });\n        }, callback);\n    }\n    /**\n     * Drops a previously created index.\n     *\n     * @param datasetName The name of the dataset containing the index to drop.\n     * @param indexName The name of the index to drop.\n     * @param options Optional parameters for this operation.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async dropIndex(datasetName, indexName, options, callback) {\n        if (options instanceof Function) {\n            callback = arguments[2];\n            options = undefined;\n        }\n        if (!options) {\n            options = {};\n        }\n        const dataverseName = options.dataverseName || 'Default';\n        const ignoreIfNotExists = options.ignoreIfNotExists || false;\n        const timeout = options.timeout || this._cluster.managementTimeout;\n        return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n            this._cluster.conn.managementAnalyticsIndexDrop({\n                dataverse_name: dataverseName,\n                dataset_name: datasetName,\n                index_name: indexName,\n                timeout: timeout,\n                ignore_if_does_not_exist: ignoreIfNotExists,\n            }, (cppErr) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                if (err) {\n                    return wrapCallback(err, null);\n                }\n                wrapCallback(err);\n            });\n        }, callback);\n    }\n    /**\n     * Returns a list of all existing indexes.\n     *\n     * @param options Optional parameters for this operation.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async getAllIndexes(options, callback) {\n        if (options instanceof Function) {\n            callback = arguments[0];\n            options = undefined;\n        }\n        if (!options) {\n            options = {};\n        }\n        const timeout = options.timeout || this._cluster.managementTimeout;\n        return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n            this._cluster.conn.managementAnalyticsIndexGetAll({\n                timeout: timeout,\n            }, (cppErr, resp) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                if (err) {\n                    return wrapCallback(err, null);\n                }\n                const indexes = resp.indexes.map((index) => new AnalyticsIndex({\n                    name: index.name,\n                    dataverseName: index.dataverse_name,\n                    datasetName: index.dataset_name,\n                    isPrimary: index.is_primary,\n                }));\n                wrapCallback(null, indexes);\n            });\n        }, callback);\n    }\n    /**\n     * @internal\n     */\n    async connectLink() {\n        if (typeof arguments[0] === 'string') {\n            return this._connectLinkDeprecated(arguments[0], arguments[1], arguments[2]);\n        }\n        else {\n            return this._connectLink(arguments[0], arguments[1]);\n        }\n    }\n    // TODO(JSCBC-1293):  Remove deprecated path\n    /**\n     * @internal\n     */\n    async _connectLinkDeprecated(linkStr, options, callback) {\n        if (options instanceof Function) {\n            callback = arguments[1];\n            options = undefined;\n        }\n        if (!options) {\n            options = {};\n        }\n        const force = options.force || false;\n        const timeout = options.timeout || this._cluster.managementTimeout;\n        let qs = 'CONNECT LINK ' + linkStr;\n        if (force) {\n            qs += ' WITH {\"force\": true}';\n        }\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            await this._cluster.analyticsQuery(qs, {\n                timeout: timeout,\n            });\n        }, callback);\n    }\n    /**\n     * @internal\n     */\n    async _connectLink(options, callback) {\n        if (options instanceof Function) {\n            callback = arguments[1];\n            options = undefined;\n        }\n        if (!options) {\n            options = {};\n        }\n        const dataverseName = options.dataverseName || 'Default';\n        const linkName = options.linkName || 'Local';\n        const force = options.force || false;\n        const timeout = options.timeout || this._cluster.managementTimeout;\n        return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n            this._cluster.conn.managementAnalyticsLinkConnect({\n                dataverse_name: dataverseName,\n                link_name: linkName,\n                timeout: timeout,\n                force: force,\n            }, (cppErr) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                if (err) {\n                    return wrapCallback(err, null);\n                }\n                wrapCallback(err);\n            });\n        }, callback);\n    }\n    /**\n     * @internal\n     */\n    async disconnectLink() {\n        if (typeof arguments[0] === 'string') {\n            return this._disconnectLinkDeprecated(arguments[0], arguments[1], arguments[2]);\n        }\n        else {\n            return this._disconnectLink(arguments[0], arguments[1]);\n        }\n    }\n    // TODO(JSCBC-1293):  Remove deprecated path\n    /**\n     * @internal\n     */\n    async _disconnectLinkDeprecated(linkStr, options, callback) {\n        if (options instanceof Function) {\n            callback = arguments[1];\n            options = undefined;\n        }\n        if (!options) {\n            options = {};\n        }\n        const qs = 'DISCONNECT LINK ' + linkStr;\n        const timeout = options.timeout || this._cluster.managementTimeout;\n        return utilities_1.PromiseHelper.wrapAsync(async () => {\n            await this._cluster.analyticsQuery(qs, {\n                timeout: timeout,\n            });\n        }, callback);\n    }\n    /**\n     * @internal\n     */\n    async _disconnectLink(options, callback) {\n        if (options instanceof Function) {\n            callback = arguments[1];\n            options = undefined;\n        }\n        if (!options) {\n            options = {};\n        }\n        const dataverseName = options.dataverseName || 'Default';\n        const linkName = options.linkName || 'Local';\n        const timeout = options.timeout || this._cluster.managementTimeout;\n        return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n            this._cluster.conn.managementAnalyticsLinkDisconnect({\n                dataverse_name: dataverseName,\n                link_name: linkName,\n                timeout: timeout,\n            }, (cppErr) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                if (err) {\n                    return wrapCallback(err, null);\n                }\n                wrapCallback(err);\n            });\n        }, callback);\n    }\n    /**\n     * Returns a list of all pending mutations.\n     *\n     * @param options Optional parameters for this operation.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async getPendingMutations(options, callback) {\n        if (options instanceof Function) {\n            callback = arguments[0];\n            options = undefined;\n        }\n        if (!options) {\n            options = {};\n        }\n        const timeout = options.timeout || this._cluster.managementTimeout;\n        return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n            this._cluster.conn.managementAnalyticsGetPendingMutations({\n                timeout: timeout,\n            }, (cppErr, resp) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                if (err) {\n                    return wrapCallback(err, null);\n                }\n                const stats = {\n                    stats: resp.stats,\n                };\n                wrapCallback(null, stats);\n            });\n        }, callback);\n    }\n    /**\n     * Creates a new analytics remote link.\n     *\n     * @param link The settings for the link to create.\n     * @param options Optional parameters for this operation.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async createLink(link, options, callback) {\n        if (options instanceof Function) {\n            callback = arguments[1];\n            options = undefined;\n        }\n        if (!options) {\n            options = {};\n        }\n        const timeout = options.timeout || this._cluster.managementTimeout;\n        if (link.linkType == AnalyticsLinkType.CouchbaseRemote) {\n            return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n                this._cluster.conn.managementAnalyticsLinkCreateCouchbaseRemoteLink({\n                    link: CouchbaseRemoteAnalyticsLink._toCppData(new CouchbaseRemoteAnalyticsLink(link)),\n                    timeout: timeout,\n                }, (cppErr) => {\n                    const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                    if (err) {\n                        return wrapCallback(err, null);\n                    }\n                    wrapCallback(err);\n                });\n            }, callback);\n        }\n        else if (link.linkType == AnalyticsLinkType.S3External) {\n            return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n                this._cluster.conn.managementAnalyticsLinkCreateS3ExternalLink({\n                    link: S3ExternalAnalyticsLink._toCppData(new S3ExternalAnalyticsLink(link)),\n                    timeout: timeout,\n                }, (cppErr) => {\n                    const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                    if (err) {\n                        return wrapCallback(err, null);\n                    }\n                    wrapCallback(err);\n                });\n            }, callback);\n        }\n        else if (link.linkType == AnalyticsLinkType.AzureBlobExternal) {\n            return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n                this._cluster.conn.managementAnalyticsLinkCreateAzureBlobExternalLink({\n                    link: AzureExternalAnalyticsLink._toCppData(new AzureExternalAnalyticsLink(link)),\n                    timeout: timeout,\n                }, (cppErr) => {\n                    const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                    if (err) {\n                        return wrapCallback(err, null);\n                    }\n                    wrapCallback(err);\n                });\n            }, callback);\n        }\n        else {\n            throw new Error('invalid link type');\n        }\n    }\n    /**\n     * Replaces an existing analytics remote link.\n     *\n     * @param link The settings for the updated link.\n     * @param options Optional parameters for this operation.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async replaceLink(link, options, callback) {\n        if (options instanceof Function) {\n            callback = arguments[1];\n            options = undefined;\n        }\n        if (!options) {\n            options = {};\n        }\n        const timeout = options.timeout || this._cluster.managementTimeout;\n        if (link.linkType == AnalyticsLinkType.CouchbaseRemote) {\n            return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n                this._cluster.conn.managementAnalyticsLinkReplaceCouchbaseRemoteLink({\n                    link: CouchbaseRemoteAnalyticsLink._toCppData(new CouchbaseRemoteAnalyticsLink(link)),\n                    timeout: timeout,\n                }, (cppErr) => {\n                    const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                    if (err) {\n                        return wrapCallback(err, null);\n                    }\n                    wrapCallback(err);\n                });\n            }, callback);\n        }\n        else if (link.linkType == AnalyticsLinkType.S3External) {\n            return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n                this._cluster.conn.managementAnalyticsLinkReplaceS3ExternalLink({\n                    link: S3ExternalAnalyticsLink._toCppData(new S3ExternalAnalyticsLink(link)),\n                    timeout: timeout,\n                }, (cppErr) => {\n                    const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                    if (err) {\n                        return wrapCallback(err, null);\n                    }\n                    wrapCallback(err);\n                });\n            }, callback);\n        }\n        else if (link.linkType == AnalyticsLinkType.AzureBlobExternal) {\n            return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n                this._cluster.conn.managementAnalyticsLinkReplaceAzureBlobExternalLink({\n                    link: AzureExternalAnalyticsLink._toCppData(new AzureExternalAnalyticsLink(link)),\n                    timeout: timeout,\n                }, (cppErr) => {\n                    const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                    if (err) {\n                        return wrapCallback(err, null);\n                    }\n                    wrapCallback(err);\n                });\n            }, callback);\n        }\n        else {\n            throw new Error('invalid link type');\n        }\n    }\n    /**\n     * Drops an existing analytics remote link.\n     *\n     * @param linkName The name of the link to drop.\n     * @param dataverseName The dataverse containing the link to drop.\n     * @param options Optional parameters for this operation.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async dropLink(linkName, dataverseName, options, callback) {\n        if (options instanceof Function) {\n            callback = arguments[2];\n            options = undefined;\n        }\n        if (!options) {\n            options = {};\n        }\n        const timeout = options.timeout || this._cluster.managementTimeout;\n        return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n            this._cluster.conn.managementAnalyticsLinkDrop({\n                dataverse_name: dataverseName,\n                link_name: linkName,\n                timeout: timeout,\n            }, (cppErr) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                if (err) {\n                    return wrapCallback(err, null);\n                }\n                wrapCallback(err);\n            });\n        }, callback);\n    }\n    /**\n     * Returns a list of existing analytics remote links.\n     *\n     * @param options Optional parameters for this operation.\n     * @param callback A node-style callback to be invoked after execution.\n     */\n    async getAllLinks(options, callback) {\n        if (options instanceof Function) {\n            callback = arguments[0];\n            options = undefined;\n        }\n        if (!options) {\n            options = {};\n        }\n        const dataverseName = options.dataverse;\n        const linkName = options.name;\n        const linkType = options.linkType;\n        const timeout = options.timeout || this._cluster.managementTimeout;\n        return utilities_1.PromiseHelper.wrap((wrapCallback) => {\n            this._cluster.conn.managementAnalyticsLinkGetAll({\n                link_type: linkType,\n                link_name: linkName,\n                dataverse_name: dataverseName,\n                timeout: timeout,\n            }, (cppErr, resp) => {\n                const err = (0, bindingutilities_1.errorFromCpp)(cppErr);\n                if (err) {\n                    return wrapCallback(err, null);\n                }\n                const links = [];\n                resp.couchbase.forEach((link) => {\n                    links.push(CouchbaseRemoteAnalyticsLink._fromCppData(link));\n                });\n                resp.s3.forEach((link) => {\n                    links.push(S3ExternalAnalyticsLink._fromCppData(link));\n                });\n                resp.azure_blob.forEach((link) => {\n                    links.push(AzureExternalAnalyticsLink._fromCppData(link));\n                });\n                wrapCallback(null, links);\n            });\n        }, callback);\n    }\n}\nexports.AnalyticsIndexManager = AnalyticsIndexManager;\n"],"x_google_ignoreList":[0],"mappings":";;;;;;;;;CACA,OAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAM,EAAC;CAC7D,QAAQ,wBAAwB,QAAQ,6BAA6B,QAAQ,0BAA0B,QAAQ,+BAA+B,QAAQ,gBAAgB,QAAQ,uCAAuC,QAAQ,iBAAiB,QAAQ,mBAAmB,QAAQ,2BAA2B,QAAQ,oBAAoB,KAAK;CAC7U,MAAM;CACN,MAAM;CACN,MAAM;;;;;;CAMN,IAAI;EACH,SAAUA,qBAAmB;;;;EAI1BA,oBAAkB,gBAAgB;;;;EAIlCA,oBAAkB,uBAAuB;;;;EAIzCA,oBAAkB,qBAAqB;CAC1C,GAAE,sBAAsB,QAAQ,oBAAoB,oBAAoB,CAAE,GAAE;;;;;;CAM7E,IAAI;EACH,SAAUC,4BAA0B;;;;EAIjCA,2BAAyB,UAAU;;;;EAInCA,2BAAyB,UAAU;;;;EAInCA,2BAAyB,UAAU;CACtC,GAAE,6BAA6B,QAAQ,2BAA2B,2BAA2B,CAAE,GAAE;;;;;;CAMlG,IAAM,mBAAN,MAAuB;;;;EAInB,YAAY,MAAM;GACd,KAAK,OAAO,KAAK;GACjB,KAAK,gBAAgB,KAAK;GAC1B,KAAK,WAAW,KAAK;GACrB,KAAK,aAAa,KAAK;EAC1B;CACJ;CACD,QAAQ,mBAAmB;;;;;;CAM3B,IAAM,iBAAN,MAAqB;;;;EAIjB,YAAY,MAAM;GACd,KAAK,OAAO,KAAK;GACjB,KAAK,cAAc,KAAK;GACxB,KAAK,gBAAgB,KAAK;GAC1B,KAAK,YAAY,KAAK;EACzB;CACJ;CACD,QAAQ,iBAAiB;;;;CAIzB,IAAM,uCAAN,MAA2C;;;;EAIvC,YAAY,MAAM;GACd,KAAK,kBAAkB,KAAK;GAC5B,KAAK,cAAc,KAAK;GACxB,KAAK,oBAAoB,KAAK;GAC9B,KAAK,YAAY,KAAK;EACzB;CACJ;CACD,QAAQ,uCAAuC;;;;CAI/C,IAAM,gBAAN,MAAoB;;;;EAIhB,cAAc;GACV,KAAK,WAAW;GAChB,KAAK,YAAY;GACjB,KAAK,OAAO;EACf;;;;EAID,OAAO,YAAY,MAAM;AACrB,OAAI,KAAK,aAAa,kBAAkB,gBACpC,QAAO,6BAA6B,YAAY,IAAI,6BAA6B,MAAM;YAElF,KAAK,aAAa,kBAAkB,WACzC,QAAO,wBAAwB,YAAY,IAAI,wBAAwB,MAAM;YAExE,KAAK,aAAa,kBAAkB,kBACzC,QAAO,2BAA2B,YAAY,IAAI,2BAA2B,MAAM;OAGnF,OAAM,IAAI,MAAM;EAEvB;;;;EAID,OAAO,cAAc,MAAM;AACvB,OAAI,KAAK,SAAS,YACd,QAAO,6BAA6B,cAAc,KAAK;YAElD,KAAK,SAAS,KACnB,QAAO,wBAAwB,cAAc,KAAK;YAE7C,KAAK,SAAS,QACnB,QAAO,2BAA2B,cAAc,KAAK;OAGrD,OAAM,IAAI,MAAM;EAEvB;CACJ;CACD,QAAQ,gBAAgB;;;;CAIxB,IAAM,+BAAN,MAAM,qCAAqC,cAAc;;;;EAIrD,WAAW;AACP,OAAI,CAAC,KAAK,UACN,OAAM,IAAI,SAAS,qCAAqB,IAAI,MAAM;AAEtD,OAAI,CAAC,KAAK,KACN,OAAM,IAAI,SAAS,qCAAqB,IAAI,MAAM;AAEtD,OAAI,CAAC,KAAK,SACN,OAAM,IAAI,SAAS,qCAAqB,IAAI,MAAM;AAEtD,OAAI,KAAK,WACL,KAAI,CAAC,yBAAyB,MAAM,yBAAyB,IAAK,EAAC,SAAS,KAAK,WAAW,gBAAgB,EACxG;QAAI,CAAC,KAAK,YAAY,CAAC,KAAK,SACxB,OAAM,IAAI,SAAS,qCAAqB,IAAI,MAAM;GACrD,OAEA;AACD,QAAI,CAAC,KAAK,WAAW,eACjB,KAAK,WAAW,YAAY,UAAU,EACtC,OAAM,IAAI,SAAS,qCAAqB,IAAI,MAAM;IAEtD,MAAM,2BAA2B,CAAC,KAAK,WAAW,qBAC9C,KAAK,WAAW,kBAAkB,UAAU;IAChD,MAAM,mBAAmB,CAAC,KAAK,WAAW,aAAa,KAAK,WAAW,UAAU,UAAU;AAC3F,QAAI,4BAA4B,iBAC5B,OAAM,IAAI,SAAS,qCAAqB,IAAI,MAAM;GAEzD;EAER;;;;EAID,YAAY,MAAM;GACd,OAAO;GACP,KAAK,WAAW,kBAAkB;GAClC,KAAK,YAAY,KAAK;GACtB,KAAK,OAAO,KAAK;GACjB,KAAK,WAAW,KAAK;GACrB,KAAK,aAAa,KAAK;GACvB,KAAK,WAAW,KAAK;GACrB,KAAK,WAAW,KAAK;EACxB;;;;EAID,OAAO,WAAW,MAAM;GACpB,KAAK,UAAU;AACf,UAAO;IACH,WAAW,KAAK;IAChB,WAAW,KAAK;IAChB,UAAU,KAAK;IACf,UAAU,KAAK;IACf,UAAU,KAAK;IACf,aAAa,GAAG,mBAAmB,yBAAyB,KAAK,WAAW;GAC/E;EACJ;;;;EAID,OAAO,aAAa,MAAM;AACtB,UAAO,IAAI,6BAA6B;IACpC,UAAU,kBAAkB;IAC5B,WAAW,KAAK;IAChB,MAAM,KAAK;IACX,UAAU,KAAK;IACf,aAAa,GAAG,mBAAmB,2BAA2B,KAAK,WAAW;IAC9E,UAAU,KAAK;IACf,UAAU;GACb;EACJ;CACJ;CACD,QAAQ,+BAA+B;;;;CAIvC,IAAM,0BAAN,MAAM,gCAAgC,cAAc;;;;EAIhD,YAAY,MAAM;GACd,OAAO;GACP,KAAK,WAAW,kBAAkB;GAClC,KAAK,YAAY,KAAK;GACtB,KAAK,OAAO,KAAK;GACjB,KAAK,cAAc,KAAK;GACxB,KAAK,kBAAkB,KAAK;GAC5B,KAAK,eAAe,KAAK;GACzB,KAAK,SAAS,KAAK;GACnB,KAAK,kBAAkB,KAAK;EAC/B;;;;EAID,WAAW;AACP,OAAI,CAAC,KAAK,UACN,OAAM,IAAI,SAAS,qCAAqB,IAAI,MAAM;AAEtD,OAAI,CAAC,KAAK,KACN,OAAM,IAAI,SAAS,qCAAqB,IAAI,MAAM;AAEtD,OAAI,CAAC,KAAK,YACN,OAAM,IAAI,SAAS,qCAAqB,IAAI,MAAM;AAEtD,OAAI,CAAC,KAAK,gBACN,OAAM,IAAI,SAAS,qCAAqB,IAAI,MAAM;AAEtD,OAAI,CAAC,KAAK,OACN,OAAM,IAAI,SAAS,qCAAqB,IAAI,MAAM;EAEzD;;;;EAID,OAAO,WAAW,MAAM;GACpB,KAAK,UAAU;AACf,UAAO;IACH,WAAW,KAAK;IAChB,WAAW,KAAK;IAChB,eAAe,KAAK;IACpB,mBAAmB,KAAK;IACxB,eAAe,KAAK;IACpB,QAAQ,KAAK;IACb,kBAAkB,KAAK;GAC1B;EACJ;;;;EAID,OAAO,aAAa,MAAM;AACtB,UAAO,IAAI,wBAAwB;IAC/B,MAAM,KAAK;IACX,UAAU,kBAAkB;IAC5B,WAAW,KAAK;IAChB,aAAa,KAAK;IAClB,iBAAiB;IACjB,cAAc;IACd,QAAQ,KAAK;IACb,iBAAiB,KAAK;GACzB;EACJ;CACJ;CACD,QAAQ,0BAA0B;;;;CAIlC,IAAM,6BAAN,MAAM,mCAAmC,cAAc;;;;EAInD,YAAY,MAAM;GACd,OAAO;GACP,KAAK,WAAW,kBAAkB;GAClC,KAAK,YAAY,KAAK;GACtB,KAAK,OAAO,KAAK;GACjB,KAAK,mBAAmB,KAAK;GAC7B,KAAK,cAAc,KAAK;GACxB,KAAK,aAAa,KAAK;GACvB,KAAK,wBAAwB,KAAK;GAClC,KAAK,eAAe,KAAK;GACzB,KAAK,iBAAiB,KAAK;EAC9B;;;;EAID,WAAW;AACP,OAAI,CAAC,KAAK,UACN,OAAM,IAAI,SAAS,qCAAqB,IAAI,MAAM;AAEtD,OAAI,CAAC,KAAK,KACN,OAAM,IAAI,SAAS,qCAAqB,IAAI,MAAM;AAEtD,OAAI,CAAC,KAAK,kBAAkB;IACxB,MAAM,wBAAwB,EAAE,KAAK,eAAe,KAAK;IACzD,MAAM,0CAA0C,EAAE,KAAK,eAAe,KAAK;AAC3E,QAAI,yBAAyB,wCACzB,OAAM,IAAI,SAAS,qCAAqB,IAAI,MAAM;GAGzD;EACJ;;;;EAID,OAAO,WAAW,MAAM;GACpB,KAAK,UAAU;AACf,UAAO;IACH,WAAW,KAAK;IAChB,WAAW,KAAK;IAChB,mBAAmB,KAAK;IACxB,cAAc,KAAK;IACnB,aAAa,KAAK;IAClB,yBAAyB,KAAK;IAC9B,eAAe,KAAK;IACpB,iBAAiB,KAAK;GACzB;EACJ;;;;EAID,OAAO,aAAa,MAAM;AACtB,UAAO,IAAI,2BAA2B;IAClC,MAAM,KAAK;IACX,UAAU,kBAAkB;IAC5B,WAAW,KAAK;IAChB,kBAAkB;IAClB,aAAa,KAAK;IAClB,YAAY;IACZ,uBAAuB;IACvB,cAAc,KAAK;IACnB,gBAAgB,KAAK;GACxB;EACJ;CACJ;CACD,QAAQ,6BAA6B;;;;;;;CAOrC,IAAM,wBAAN,MAA4B;;;;EAIxB,YAAY,SAAS;GACjB,KAAK,WAAW;EACnB;;;;;;;;EAQD,MAAM,gBAAgB,eAAe,SAAS,UAAU;AACpD,OAAI,mBAAmB,UAAU;IAC7B,WAAW,UAAU;IACrB,UAAU;GACb;AACD,OAAI,CAAC,SACD,UAAU,CAAE;GAEhB,MAAM,UAAU,QAAQ,WAAW,KAAK,SAAS;GACjD,MAAM,iBAAiB,QAAQ,kBAAkB;AACjD,UAAO,YAAY,cAAc,KAAK,CAAC,iBAAiB;IACpD,KAAK,SAAS,KAAK,mCAAmC;KAClD,gBAAgB;KACP;KACT,kBAAkB;IACrB,GAAE,CAAC,WAAW;KACX,MAAM,OAAO,GAAG,mBAAmB,cAAc,OAAO;AACxD,SAAI,IACA,QAAO,aAAa,KAAK,KAAK;KAElC,aAAa,IAAI;IACpB,EAAC;GACL,GAAE,SAAS;EACf;;;;;;;;EAQD,MAAM,cAAc,eAAe,SAAS,UAAU;AAClD,OAAI,mBAAmB,UAAU;IAC7B,WAAW,UAAU;IACrB,UAAU;GACb;AACD,OAAI,CAAC,SACD,UAAU,CAAE;GAEhB,MAAM,UAAU,QAAQ,WAAW,KAAK,SAAS;GACjD,MAAM,oBAAoB,QAAQ,qBAAqB;AACvD,UAAO,YAAY,cAAc,KAAK,CAAC,iBAAiB;IACpD,KAAK,SAAS,KAAK,iCAAiC;KAChD,gBAAgB;KACP;KACT,0BAA0B;IAC7B,GAAE,CAAC,WAAW;KACX,MAAM,OAAO,GAAG,mBAAmB,cAAc,OAAO;AACxD,SAAI,IACA,QAAO,aAAa,KAAK,KAAK;KAElC,aAAa,IAAI;IACpB,EAAC;GACL,GAAE,SAAS;EACf;;;;;;;;;EASD,MAAM,cAAc,YAAY,aAAa,SAAS,UAAU;AAC5D,OAAI,mBAAmB,UAAU;IAC7B,WAAW,UAAU;IACrB,UAAU;GACb;AACD,OAAI,CAAC,SACD,UAAU,CAAE;GAEhB,MAAM,gBAAgB,QAAQ,iBAAiB;GAC/C,MAAM,iBAAiB,QAAQ,kBAAkB;GACjD,MAAM,UAAU,QAAQ,WAAW,KAAK,SAAS;AACjD,UAAO,YAAY,cAAc,KAAK,CAAC,iBAAiB;IACpD,KAAK,SAAS,KAAK,iCAAiC;KAChD,gBAAgB;KAChB,cAAc;KACd,aAAa;KACb,WAAW,YAAY,QAAQ,YAAY,KAAK,IAAI,KAAK,IAAI,QAAQ;KAC5D;KACT,kBAAkB;IACrB,GAAE,CAAC,WAAW;KACX,MAAM,OAAO,GAAG,mBAAmB,cAAc,OAAO;AACxD,SAAI,IACA,QAAO,aAAa,KAAK,KAAK;KAElC,aAAa,IAAI;IACpB,EAAC;GACL,GAAE,SAAS;EACf;;;;;;;;EAQD,MAAM,YAAY,aAAa,SAAS,UAAU;AAC9C,OAAI,mBAAmB,UAAU;IAC7B,WAAW,UAAU;IACrB,UAAU;GACb;AACD,OAAI,CAAC,SACD,UAAU,CAAE;GAEhB,MAAM,gBAAgB,QAAQ,iBAAiB;GAC/C,MAAM,oBAAoB,QAAQ,qBAAqB;GACvD,MAAM,UAAU,QAAQ,WAAW,KAAK,SAAS;AACjD,UAAO,YAAY,cAAc,KAAK,CAAC,iBAAiB;IACpD,KAAK,SAAS,KAAK,+BAA+B;KAC9C,gBAAgB;KAChB,cAAc;KACL;KACT,0BAA0B;IAC7B,GAAE,CAAC,WAAW;KACX,MAAM,OAAO,GAAG,mBAAmB,cAAc,OAAO;AACxD,SAAI,IACA,QAAO,aAAa,KAAK,KAAK;KAElC,aAAa,IAAI;IACpB,EAAC;GACL,GAAE,SAAS;EACf;;;;;;;EAOD,MAAM,eAAe,SAAS,UAAU;AACpC,OAAI,mBAAmB,UAAU;IAC7B,WAAW,UAAU;IACrB,UAAU;GACb;AACD,OAAI,CAAC,SACD,UAAU,CAAE;GAEhB,MAAM,UAAU,QAAQ,WAAW,KAAK,SAAS;AACjD,UAAO,YAAY,cAAc,KAAK,CAAC,iBAAiB;IACpD,KAAK,SAAS,KAAK,iCAAiC,EACvC,QACZ,GAAE,CAAC,QAAQ,SAAS;KACjB,MAAM,OAAO,GAAG,mBAAmB,cAAc,OAAO;AACxD,SAAI,IACA,QAAO,aAAa,KAAK,KAAK;KAElC,MAAM,WAAW,KAAK,SAAS,IAAI,CAAC,YAAY,IAAI,iBAAiB;MACjE,MAAM,QAAQ;MACd,eAAe,QAAQ;MACvB,UAAU,QAAQ;MAClB,YAAY,QAAQ;KACvB,GAAE;KACH,aAAa,MAAM,SAAS;IAC/B,EAAC;GACL,GAAE,SAAS;EACf;;;;;;;;;;EAUD,MAAM,YAAY,aAAa,WAAW,QAAQ,SAAS,UAAU;AACjE,OAAI,mBAAmB,UAAU;IAC7B,WAAW,UAAU;IACrB,UAAU;GACb;AACD,OAAI,CAAC,SACD,UAAU,CAAE;GAEhB,MAAM,gBAAgB,QAAQ,iBAAiB;GAC/C,MAAM,iBAAiB,QAAQ,kBAAkB;GACjD,MAAM,UAAU,QAAQ,WAAW,KAAK,SAAS;AACjD,UAAO,YAAY,cAAc,KAAK,CAAC,iBAAiB;IACpD,KAAK,SAAS,KAAK,+BAA+B;KAC9C,gBAAgB;KAChB,cAAc;KACd,YAAY;KACJ;KACC;KACT,kBAAkB;IACrB,GAAE,CAAC,WAAW;KACX,MAAM,OAAO,GAAG,mBAAmB,cAAc,OAAO;AACxD,SAAI,IACA,QAAO,aAAa,KAAK,KAAK;KAElC,aAAa,IAAI;IACpB,EAAC;GACL,GAAE,SAAS;EACf;;;;;;;;;EASD,MAAM,UAAU,aAAa,WAAW,SAAS,UAAU;AACvD,OAAI,mBAAmB,UAAU;IAC7B,WAAW,UAAU;IACrB,UAAU;GACb;AACD,OAAI,CAAC,SACD,UAAU,CAAE;GAEhB,MAAM,gBAAgB,QAAQ,iBAAiB;GAC/C,MAAM,oBAAoB,QAAQ,qBAAqB;GACvD,MAAM,UAAU,QAAQ,WAAW,KAAK,SAAS;AACjD,UAAO,YAAY,cAAc,KAAK,CAAC,iBAAiB;IACpD,KAAK,SAAS,KAAK,6BAA6B;KAC5C,gBAAgB;KAChB,cAAc;KACd,YAAY;KACH;KACT,0BAA0B;IAC7B,GAAE,CAAC,WAAW;KACX,MAAM,OAAO,GAAG,mBAAmB,cAAc,OAAO;AACxD,SAAI,IACA,QAAO,aAAa,KAAK,KAAK;KAElC,aAAa,IAAI;IACpB,EAAC;GACL,GAAE,SAAS;EACf;;;;;;;EAOD,MAAM,cAAc,SAAS,UAAU;AACnC,OAAI,mBAAmB,UAAU;IAC7B,WAAW,UAAU;IACrB,UAAU;GACb;AACD,OAAI,CAAC,SACD,UAAU,CAAE;GAEhB,MAAM,UAAU,QAAQ,WAAW,KAAK,SAAS;AACjD,UAAO,YAAY,cAAc,KAAK,CAAC,iBAAiB;IACpD,KAAK,SAAS,KAAK,+BAA+B,EACrC,QACZ,GAAE,CAAC,QAAQ,SAAS;KACjB,MAAM,OAAO,GAAG,mBAAmB,cAAc,OAAO;AACxD,SAAI,IACA,QAAO,aAAa,KAAK,KAAK;KAElC,MAAM,UAAU,KAAK,QAAQ,IAAI,CAAC,UAAU,IAAI,eAAe;MAC3D,MAAM,MAAM;MACZ,eAAe,MAAM;MACrB,aAAa,MAAM;MACnB,WAAW,MAAM;KACpB,GAAE;KACH,aAAa,MAAM,QAAQ;IAC9B,EAAC;GACL,GAAE,SAAS;EACf;;;;EAID,MAAM,cAAc;AAChB,OAAI,OAAO,UAAU,OAAO,SACxB,QAAO,KAAK,uBAAuB,UAAU,IAAI,UAAU,IAAI,UAAU,GAAG;OAG5E,QAAO,KAAK,aAAa,UAAU,IAAI,UAAU,GAAG;EAE3D;;;;EAKD,MAAM,uBAAuB,SAAS,SAAS,UAAU;AACrD,OAAI,mBAAmB,UAAU;IAC7B,WAAW,UAAU;IACrB,UAAU;GACb;AACD,OAAI,CAAC,SACD,UAAU,CAAE;GAEhB,MAAM,QAAQ,QAAQ,SAAS;GAC/B,MAAM,UAAU,QAAQ,WAAW,KAAK,SAAS;GACjD,IAAI,KAAK,kBAAkB;AAC3B,OAAI,OACA,MAAM;AAEV,UAAO,YAAY,cAAc,UAAU,YAAY;IACnD,MAAM,KAAK,SAAS,eAAe,IAAI,EAC1B,QACZ,EAAC;GACL,GAAE,SAAS;EACf;;;;EAID,MAAM,aAAa,SAAS,UAAU;AAClC,OAAI,mBAAmB,UAAU;IAC7B,WAAW,UAAU;IACrB,UAAU;GACb;AACD,OAAI,CAAC,SACD,UAAU,CAAE;GAEhB,MAAM,gBAAgB,QAAQ,iBAAiB;GAC/C,MAAM,WAAW,QAAQ,YAAY;GACrC,MAAM,QAAQ,QAAQ,SAAS;GAC/B,MAAM,UAAU,QAAQ,WAAW,KAAK,SAAS;AACjD,UAAO,YAAY,cAAc,KAAK,CAAC,iBAAiB;IACpD,KAAK,SAAS,KAAK,+BAA+B;KAC9C,gBAAgB;KAChB,WAAW;KACF;KACF;IACV,GAAE,CAAC,WAAW;KACX,MAAM,OAAO,GAAG,mBAAmB,cAAc,OAAO;AACxD,SAAI,IACA,QAAO,aAAa,KAAK,KAAK;KAElC,aAAa,IAAI;IACpB,EAAC;GACL,GAAE,SAAS;EACf;;;;EAID,MAAM,iBAAiB;AACnB,OAAI,OAAO,UAAU,OAAO,SACxB,QAAO,KAAK,0BAA0B,UAAU,IAAI,UAAU,IAAI,UAAU,GAAG;OAG/E,QAAO,KAAK,gBAAgB,UAAU,IAAI,UAAU,GAAG;EAE9D;;;;EAKD,MAAM,0BAA0B,SAAS,SAAS,UAAU;AACxD,OAAI,mBAAmB,UAAU;IAC7B,WAAW,UAAU;IACrB,UAAU;GACb;AACD,OAAI,CAAC,SACD,UAAU,CAAE;GAEhB,MAAM,KAAK,qBAAqB;GAChC,MAAM,UAAU,QAAQ,WAAW,KAAK,SAAS;AACjD,UAAO,YAAY,cAAc,UAAU,YAAY;IACnD,MAAM,KAAK,SAAS,eAAe,IAAI,EAC1B,QACZ,EAAC;GACL,GAAE,SAAS;EACf;;;;EAID,MAAM,gBAAgB,SAAS,UAAU;AACrC,OAAI,mBAAmB,UAAU;IAC7B,WAAW,UAAU;IACrB,UAAU;GACb;AACD,OAAI,CAAC,SACD,UAAU,CAAE;GAEhB,MAAM,gBAAgB,QAAQ,iBAAiB;GAC/C,MAAM,WAAW,QAAQ,YAAY;GACrC,MAAM,UAAU,QAAQ,WAAW,KAAK,SAAS;AACjD,UAAO,YAAY,cAAc,KAAK,CAAC,iBAAiB;IACpD,KAAK,SAAS,KAAK,kCAAkC;KACjD,gBAAgB;KAChB,WAAW;KACF;IACZ,GAAE,CAAC,WAAW;KACX,MAAM,OAAO,GAAG,mBAAmB,cAAc,OAAO;AACxD,SAAI,IACA,QAAO,aAAa,KAAK,KAAK;KAElC,aAAa,IAAI;IACpB,EAAC;GACL,GAAE,SAAS;EACf;;;;;;;EAOD,MAAM,oBAAoB,SAAS,UAAU;AACzC,OAAI,mBAAmB,UAAU;IAC7B,WAAW,UAAU;IACrB,UAAU;GACb;AACD,OAAI,CAAC,SACD,UAAU,CAAE;GAEhB,MAAM,UAAU,QAAQ,WAAW,KAAK,SAAS;AACjD,UAAO,YAAY,cAAc,KAAK,CAAC,iBAAiB;IACpD,KAAK,SAAS,KAAK,uCAAuC,EAC7C,QACZ,GAAE,CAAC,QAAQ,SAAS;KACjB,MAAM,OAAO,GAAG,mBAAmB,cAAc,OAAO;AACxD,SAAI,IACA,QAAO,aAAa,KAAK,KAAK;KAElC,MAAM,QAAQ,EACV,OAAO,KAAK,MACf;KACD,aAAa,MAAM,MAAM;IAC5B,EAAC;GACL,GAAE,SAAS;EACf;;;;;;;;EAQD,MAAM,WAAW,MAAM,SAAS,UAAU;AACtC,OAAI,mBAAmB,UAAU;IAC7B,WAAW,UAAU;IACrB,UAAU;GACb;AACD,OAAI,CAAC,SACD,UAAU,CAAE;GAEhB,MAAM,UAAU,QAAQ,WAAW,KAAK,SAAS;AACjD,OAAI,KAAK,YAAY,kBAAkB,gBACnC,QAAO,YAAY,cAAc,KAAK,CAAC,iBAAiB;IACpD,KAAK,SAAS,KAAK,iDAAiD;KAChE,MAAM,6BAA6B,WAAW,IAAI,6BAA6B,MAAM;KAC5E;IACZ,GAAE,CAAC,WAAW;KACX,MAAM,OAAO,GAAG,mBAAmB,cAAc,OAAO;AACxD,SAAI,IACA,QAAO,aAAa,KAAK,KAAK;KAElC,aAAa,IAAI;IACpB,EAAC;GACL,GAAE,SAAS;YAEP,KAAK,YAAY,kBAAkB,WACxC,QAAO,YAAY,cAAc,KAAK,CAAC,iBAAiB;IACpD,KAAK,SAAS,KAAK,4CAA4C;KAC3D,MAAM,wBAAwB,WAAW,IAAI,wBAAwB,MAAM;KAClE;IACZ,GAAE,CAAC,WAAW;KACX,MAAM,OAAO,GAAG,mBAAmB,cAAc,OAAO;AACxD,SAAI,IACA,QAAO,aAAa,KAAK,KAAK;KAElC,aAAa,IAAI;IACpB,EAAC;GACL,GAAE,SAAS;YAEP,KAAK,YAAY,kBAAkB,kBACxC,QAAO,YAAY,cAAc,KAAK,CAAC,iBAAiB;IACpD,KAAK,SAAS,KAAK,mDAAmD;KAClE,MAAM,2BAA2B,WAAW,IAAI,2BAA2B,MAAM;KACxE;IACZ,GAAE,CAAC,WAAW;KACX,MAAM,OAAO,GAAG,mBAAmB,cAAc,OAAO;AACxD,SAAI,IACA,QAAO,aAAa,KAAK,KAAK;KAElC,aAAa,IAAI;IACpB,EAAC;GACL,GAAE,SAAS;OAGZ,OAAM,IAAI,MAAM;EAEvB;;;;;;;;EAQD,MAAM,YAAY,MAAM,SAAS,UAAU;AACvC,OAAI,mBAAmB,UAAU;IAC7B,WAAW,UAAU;IACrB,UAAU;GACb;AACD,OAAI,CAAC,SACD,UAAU,CAAE;GAEhB,MAAM,UAAU,QAAQ,WAAW,KAAK,SAAS;AACjD,OAAI,KAAK,YAAY,kBAAkB,gBACnC,QAAO,YAAY,cAAc,KAAK,CAAC,iBAAiB;IACpD,KAAK,SAAS,KAAK,kDAAkD;KACjE,MAAM,6BAA6B,WAAW,IAAI,6BAA6B,MAAM;KAC5E;IACZ,GAAE,CAAC,WAAW;KACX,MAAM,OAAO,GAAG,mBAAmB,cAAc,OAAO;AACxD,SAAI,IACA,QAAO,aAAa,KAAK,KAAK;KAElC,aAAa,IAAI;IACpB,EAAC;GACL,GAAE,SAAS;YAEP,KAAK,YAAY,kBAAkB,WACxC,QAAO,YAAY,cAAc,KAAK,CAAC,iBAAiB;IACpD,KAAK,SAAS,KAAK,6CAA6C;KAC5D,MAAM,wBAAwB,WAAW,IAAI,wBAAwB,MAAM;KAClE;IACZ,GAAE,CAAC,WAAW;KACX,MAAM,OAAO,GAAG,mBAAmB,cAAc,OAAO;AACxD,SAAI,IACA,QAAO,aAAa,KAAK,KAAK;KAElC,aAAa,IAAI;IACpB,EAAC;GACL,GAAE,SAAS;YAEP,KAAK,YAAY,kBAAkB,kBACxC,QAAO,YAAY,cAAc,KAAK,CAAC,iBAAiB;IACpD,KAAK,SAAS,KAAK,oDAAoD;KACnE,MAAM,2BAA2B,WAAW,IAAI,2BAA2B,MAAM;KACxE;IACZ,GAAE,CAAC,WAAW;KACX,MAAM,OAAO,GAAG,mBAAmB,cAAc,OAAO;AACxD,SAAI,IACA,QAAO,aAAa,KAAK,KAAK;KAElC,aAAa,IAAI;IACpB,EAAC;GACL,GAAE,SAAS;OAGZ,OAAM,IAAI,MAAM;EAEvB;;;;;;;;;EASD,MAAM,SAAS,UAAU,eAAe,SAAS,UAAU;AACvD,OAAI,mBAAmB,UAAU;IAC7B,WAAW,UAAU;IACrB,UAAU;GACb;AACD,OAAI,CAAC,SACD,UAAU,CAAE;GAEhB,MAAM,UAAU,QAAQ,WAAW,KAAK,SAAS;AACjD,UAAO,YAAY,cAAc,KAAK,CAAC,iBAAiB;IACpD,KAAK,SAAS,KAAK,4BAA4B;KAC3C,gBAAgB;KAChB,WAAW;KACF;IACZ,GAAE,CAAC,WAAW;KACX,MAAM,OAAO,GAAG,mBAAmB,cAAc,OAAO;AACxD,SAAI,IACA,QAAO,aAAa,KAAK,KAAK;KAElC,aAAa,IAAI;IACpB,EAAC;GACL,GAAE,SAAS;EACf;;;;;;;EAOD,MAAM,YAAY,SAAS,UAAU;AACjC,OAAI,mBAAmB,UAAU;IAC7B,WAAW,UAAU;IACrB,UAAU;GACb;AACD,OAAI,CAAC,SACD,UAAU,CAAE;GAEhB,MAAM,gBAAgB,QAAQ;GAC9B,MAAM,WAAW,QAAQ;GACzB,MAAM,WAAW,QAAQ;GACzB,MAAM,UAAU,QAAQ,WAAW,KAAK,SAAS;AACjD,UAAO,YAAY,cAAc,KAAK,CAAC,iBAAiB;IACpD,KAAK,SAAS,KAAK,8BAA8B;KAC7C,WAAW;KACX,WAAW;KACX,gBAAgB;KACP;IACZ,GAAE,CAAC,QAAQ,SAAS;KACjB,MAAM,OAAO,GAAG,mBAAmB,cAAc,OAAO;AACxD,SAAI,IACA,QAAO,aAAa,KAAK,KAAK;KAElC,MAAM,QAAQ,CAAE;KAChB,KAAK,UAAU,QAAQ,CAAC,SAAS;MAC7B,MAAM,KAAK,6BAA6B,aAAa,KAAK,CAAC;KAC9D,EAAC;KACF,KAAK,GAAG,QAAQ,CAAC,SAAS;MACtB,MAAM,KAAK,wBAAwB,aAAa,KAAK,CAAC;KACzD,EAAC;KACF,KAAK,WAAW,QAAQ,CAAC,SAAS;MAC9B,MAAM,KAAK,2BAA2B,aAAa,KAAK,CAAC;KAC5D,EAAC;KACF,aAAa,MAAM,MAAM;IAC5B,EAAC;GACL,GAAE,SAAS;EACf;CACJ;CACD,QAAQ,wBAAwB"}