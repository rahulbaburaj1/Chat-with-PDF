{"version":3,"file":"web.d.ts","names":["EventStreamCodec","CallbackManagerForLLMRun","GenerationChunk","LLM","BaseLLMParams","BaseBedrockInput","CredentialType","SerializedFields","Bedrock","fetch","Record","Partial","Promise","Response","AsyncGenerator","ArrayBuffer","Uint8Array"],"sources":["../../../src/llms/bedrock/web.d.ts"],"sourcesContent":["import { EventStreamCodec } from \"@smithy/eventstream-codec\";\nimport { CallbackManagerForLLMRun } from \"@langchain/core/callbacks/manager\";\nimport { GenerationChunk } from \"@langchain/core/outputs\";\nimport { LLM, type BaseLLMParams } from \"@langchain/core/language_models/llms\";\nimport { BaseBedrockInput, type CredentialType } from \"../../utils/bedrock/index.js\";\nimport type { SerializedFields } from \"../../load/map_keys.js\";\n/**\n * A type of Large Language Model (LLM) that interacts with the Bedrock\n * service. It extends the base `LLM` class and implements the\n * `BaseBedrockInput` interface. The class is designed to authenticate and\n * interact with the Bedrock service, which is a part of Amazon Web\n * Services (AWS). It uses AWS credentials for authentication and can be\n * configured with various parameters such as the model to use, the AWS\n * region, and the maximum number of tokens to generate.\n */\nexport declare class Bedrock extends LLM implements BaseBedrockInput {\n    model: string;\n    modelProvider: string;\n    region: string;\n    credentials: CredentialType;\n    temperature?: number | undefined;\n    maxTokens?: number | undefined;\n    fetchFn: typeof fetch;\n    endpointHost?: string;\n    modelKwargs?: Record<string, unknown>;\n    codec: EventStreamCodec;\n    streaming: boolean;\n    lc_serializable: boolean;\n    get lc_aliases(): Record<string, string>;\n    get lc_secrets(): {\n        [key: string]: string;\n    } | undefined;\n    get lc_attributes(): SerializedFields | undefined;\n    _llmType(): string;\n    static lc_name(): string;\n    constructor(fields?: Partial<BaseBedrockInput> & BaseLLMParams);\n    /** Call out to Bedrock service model.\n      Arguments:\n        prompt: The prompt to pass into the model.\n  \n      Returns:\n        The string generated by the model.\n  \n      Example:\n        response = model.invoke(\"Tell me a joke.\")\n    */\n    _call(prompt: string, options: this[\"ParsedCallOptions\"], runManager?: CallbackManagerForLLMRun): Promise<string>;\n    _signedFetch(prompt: string, options: this[\"ParsedCallOptions\"], fields: {\n        bedrockMethod: \"invoke\" | \"invoke-with-response-stream\";\n        endpointHost: string;\n        provider: string;\n    }): Promise<Response>;\n    invocationParams(options?: this[\"ParsedCallOptions\"]): {\n        model: string;\n        region: string;\n        temperature: number | undefined;\n        maxTokens: number | undefined;\n        stop: string[] | undefined;\n        modelKwargs: Record<string, unknown> | undefined;\n    };\n    _streamResponseChunks(prompt: string, options: this[\"ParsedCallOptions\"], runManager?: CallbackManagerForLLMRun): AsyncGenerator<GenerationChunk>;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _readChunks(reader: any): {\n        [Symbol.asyncIterator](): AsyncGenerator<Uint8Array<ArrayBuffer>, void, unknown>;\n    };\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAeA;;;;AASkBU,cATGF,OAAAA,SAAgBL,GAAAA,YAAeE,gBASlCK,CAAAA;EAAM,KACbV,EAAAA,MAAAA;EAAgB,aAGLU,EAAAA,MAAAA;EAAM,MAIHH,EAAAA,MAAAA;EAAgB,WAGRF,EAhBhBC,cAgBgBD;EAAgB,WAAxBM,CAAAA,EAAAA,MAAAA,GAAAA,SAAAA;EAAO,SAAqBP,CAAAA,EAAAA,MAAAA,GAAAA,SAAAA;EAAa,OAWSH,EAAAA,OAxBvDQ,KAwBuDR;EAAwB,YAAGW,CAAAA,EAAAA,MAAAA;EAAO,WAK7FC,CAAAA,EA3BEH,MA2BFG,CAAAA,MAAAA,EAAAA,OAAAA,CAAAA;EAAQ,KAAhBD,EA1BGZ,gBA0BHY;EAAO,SAOMF,EAAAA,OAAAA;EAAM,eAEgET,EAAAA,OAAAA;EAAwB,IAAkBC,UAAAA,CAAAA,CAAAA,EAhC/GQ,MAgC+GR,CAAAA,MAAAA,EAAAA,MAAAA,CAAAA;EAAe,IAA9BY,UAAAA,CAAAA,CAAAA,EAAAA;IAG1DC,CAAAA,GAAAA,EAAAA,MAAAA,CAAAA,EAAAA,MAAAA;EAAW,CAAA,GAAtBC,SAAAA;EAAU,IAAzBF,aAAAA,CAAAA,CAAAA,EA/BTP,gBA+BSO,GAAAA,SAAAA;EAAc,QAhDXX,CAAAA,CAAAA,EAAAA,MAAAA;EAAG,OAAYE,OAAAA,CAAAA,CAAAA,EAAAA,MAAAA;EAAgB,WAAA,CAAA,MAAA,CAAA,EAoB3CM,OApB2C,CAoBnCN,gBApBmC,CAAA,GAoBfD,aApBe;;;;;;;;;yEA+BOH,2BAA2BW;;;;;MAK9FA,QAAQC;;;;;;;iBAOKH;;yFAEsET,2BAA2Ba,eAAeZ;;;8BAGnGY,eAAeE,WAAWD"}