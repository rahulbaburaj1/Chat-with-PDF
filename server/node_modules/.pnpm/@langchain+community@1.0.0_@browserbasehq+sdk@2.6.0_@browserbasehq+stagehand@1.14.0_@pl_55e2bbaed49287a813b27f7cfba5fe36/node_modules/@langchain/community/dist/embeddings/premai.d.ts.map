{"version":3,"file":"premai.d.ts","names":["Embeddings","EmbeddingsParams","Prem","PremEmbeddingsParams","PremEmbeddings","Promise"],"sources":["../../src/embeddings/premai.d.ts"],"sourcesContent":["import { Embeddings, EmbeddingsParams } from \"@langchain/core/embeddings\";\nimport Prem from \"@premai/prem-sdk\";\n/**\n * Interface for PremEmbeddings parameters. Extends EmbeddingsParams and\n * defines additional parameters specific to the PremEmbeddings class.\n */\nexport interface PremEmbeddingsParams extends EmbeddingsParams {\n    /**\n     * The Prem API key to use for requests.\n     * @default process.env.PREM_API_KEY\n     */\n    apiKey?: string;\n    baseUrl?: string;\n    /**\n     * The ID of the project to use.\n     */\n    project_id?: number | string;\n    /**\n     * The model to generate the embeddings.\n     */\n    model: string;\n    encoding_format?: (\"float\" | \"base64\") & string;\n    batchSize?: number;\n}\n/**\n * Class for generating embeddings using the Prem AI's API. Extends the\n * Embeddings class and implements PremEmbeddingsParams and\n */\nexport declare class PremEmbeddings extends Embeddings implements PremEmbeddingsParams {\n    client: Prem;\n    batchSize: number;\n    apiKey?: string;\n    project_id: number;\n    model: string;\n    encoding_format?: (\"float\" | \"base64\") & string;\n    constructor(fields: PremEmbeddingsParams);\n    /**\n     * Method to generate embeddings for an array of documents. Splits the\n     * documents into batches and makes requests to the Prem API to generate\n     * embeddings.\n     * @param texts Array of documents to generate embeddings for.\n     * @returns Promise that resolves to a 2D array of embeddings for each document.\n     */\n    embedDocuments(texts: string[]): Promise<number[][]>;\n    /**\n     * Method to generate an embedding for a single document. Calls the\n     * embedDocuments method with the document as the input.\n     * @param text Document to generate an embedding for.\n     * @returns Promise that resolves to an embedding for the document.\n     */\n    embedQuery(text: string): Promise<number[]>;\n}\n"],"mappings":";;;;;;;;;;;UAMiBG,oBAAAA,SAA6BF;;;;AAA9C;EAsBqBG,MAAAA,CAAAA,EAAAA,MAAAA;EAAc,OAAA,CAAA,EAAA,MAAA;EAAA;;;EAeS,UAOdC,CAAAA,EAAAA,MAAAA,GAAAA,MAAAA;EAAO;;AAtBiD;;;;;;;;;cAAjED,cAAAA,SAAuBJ,UAAAA,YAAsBG;UACtDD;;;;;;sBAMYC;;;;;;;;mCAQaE;;;;;;;4BAOPA"}